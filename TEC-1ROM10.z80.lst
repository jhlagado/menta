0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   ;TODO??????????????????????????????????????????????????????????????
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 6A 1A               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 6C 1A               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 6E 1A               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 70 1A               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 72 1A               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 74 1A               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 78 1A               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 7A 1A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 7C 1A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 7E 1A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 6A 1A               LD   (RST08),HL   
0094   22 6C 1A               LD   (RST10),HL   
0097   22 6E 1A               LD   (RST18),HL   
009A   22 70 1A               LD   (RST20),HL   
009D   22 72 1A               LD   (RST28),HL   
00A0   22 74 1A               LD   (RST30),HL   
00A3   22 78 1A               LD   (INTVEC),HL   
00A6   22 7A 1A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 7C 1A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 7E 1A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 80 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;      MINT Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;      Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;      GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;      see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                DSIZE:    EQU   $80   
00C6                RSIZE:    EQU   $80   
00C6                TIBSIZE:   EQU   $100   
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                NUMGRPS:   EQU   5   
00C6                GRPSIZE:   EQU   $40   
00C6                VARSOFS:   EQU   ((VARS - mintVars)/2) - "a"   
00C6                SYSVARSOFS:   EQU   ((sysVars - mintVars)/2) -"a"   
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   
0180                START:       
0180   31 80 18               LD   SP,DSTACK   
0183   CD A8 01               CALL   initialize   
0186   CD 87 08               CALL   printStr   
0189   4D 49 4E 54 20 56 31 2E 31 0D 0A 00 .CSTR   "MINT V1.1\r\n"   
0195   C3 E4 01               JP   interpret   
0198                             ; ***********************************************************************
0198                             ; Initial values for user mintVars		
0198                             ; ***********************************************************************		
0198                ISYSVARS:      
0198   80 18                  DW   dStack   ; a vS0
019A   00 00                  DW   FALSE   ; b vBase16
019C   00 00                  DW   0   ; c vTIBPtr
019E   C0 1A                  DW   DEFS   ; d vDEFS
01A0   00 00                  DW   0   ; e vEdited the last command to be edited
01A2   00 00                  DW   0   ; f
01A4   00 00                  DW   0   ; g
01A6   00 1C                  DW   HEAP   ; h vHeapPtr
01A8                INITIALIZE:      
01A8   21 98 01               LD   HL,iSysVars   
01AB   11 00 1A               LD   DE,sysVars   
01AE   01 10 00               LD   BC,8 * 2   
01B1   ED B0                  LDIR      
01B3   21 C0 1A               LD   HL,DEFS   
01B6   06 A0                  LD   B,GRPSIZE/2 * NUMGRPS   
01B8                INIT1:       
01B8   36 9C                  LD   (HL),lsb(empty_)   
01BA   23                     INC   HL   
01BB   36 02                  LD   (HL),msb(empty_)   
01BD   23                     INC   HL   
01BE   10 F8                  DJNZ   init1   
01C0   DD 21 00 19            LD   IX,RSTACK   
01C4   FD 21 40 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
01C8   C9                     RET      
01C9                MACRO:       ; 25
01C9   D5                     PUSH   DE   
01CA   ED 43 04 1A            LD   (vTIBPtr),BC   
01CE   21 80 04               LD   HL,ctrlCodes   
01D1   85                     ADD   A,L   
01D2   6F                     LD   L,A   
01D3   5E                     LD   E,(HL)   
01D4   16 02                  LD   D,msb(macros)   
01D6   D5                     PUSH   DE   ; give GO something to consume
01D7   CD 49 02               CALL   enter   
01DA   5C 47 00               .CSTR   "\\G"   
01DD   ED 4B 04 1A            LD   BC,(vTIBPtr)   
01E1   D1                     POP   DE   
01E2   18 0B                  JR   interpret2   
01E4                INTERPRET:      
01E4   D5                     PUSH   DE   
01E5   CD 93 02               CALL   prompt   
01E8   01 00 00               LD   BC,0   ; load BC with offset into TIB
01EB   ED 43 04 1A            LD   (vTIBPtr),BC   
01EF                INTERPRET2:      ; calc nesting (a macro might have changed it)
01EF   1E 00                  LD   E,0   ; initilize nesting value
01F1   C5                     PUSH   BC   ; save offset into TIB,
01F2                             ; BC is also the count of chars in TIB
01F2   21 00 19               LD   HL,TIB   ; HL is start of TIB
01F5   18 06                  JR   interpret4   
01F7                INTERPRET3:      
01F7   7E                     LD   A,(HL)   ; A = char in TIB
01F8   23                     INC   HL   ; inc pointer into TIB
01F9   0B                     DEC   BC   ; dec count of chars in TIB
01FA   CD 65 02               CALL   nesting   ; update nesting value
01FD                INTERPRET4:      
01FD   79                     LD   A,C   ; is count zero?
01FE   B0                     OR   B   
01FF   20 F6                  JR   NZ,interpret3   ; if not loop
0201   C1                     POP   BC   ; restore offset into TIB
0202                             ; *******************************************************************
0202                             ; Wait for a character from the serial input (keyboard)
0202                             ; and store it in the text buffer. Keep accepting characters,
0202                             ; increasing the instruction pointer BC - until a newline received.
0202                             ; *******************************************************************
0202                WAITCHAR:      
0202   CD 81 00               CALL   getchar   ; loop around waiting for character
0205   FE 20                  CP   $20   
0207   30 0A                  JR   NC,waitchar1   
0209   FE 00                  CP   $0   ; is it end of string?
020B   28 2A                  JR   Z,waitchar4   
020D   FE 0D                  CP   "\r"   ; carriage return?
020F   28 10                  JR   Z,waitchar3   
0211   18 B6                  JR   macro   
0213                WAITCHAR1:      
0213   21 00 19               LD   HL,TIB   
0216   09                     ADD   HL,BC   
0217   77                     LD   (HL),A   ; store the character in textbuf
0218   03                     INC   BC   
0219   CD 85 00               CALL   putchar   ; echo character to screen
021C   CD 65 02               CALL   nesting   
021F   18 E1                  JR   waitchar   ; wait for next character
0221                WAITCHAR3:      
0221   21 00 19               LD   HL,TIB   
0224   09                     ADD   HL,BC   
0225   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
0227   23                     INC   HL   
0228   36 0A                  LD   (HL),"\n"   
022A   23                     INC   HL   
022B   03                     INC   BC   
022C   03                     INC   BC   
022D   CD 6C 08               CALL   crlf   ; echo character to screen
0230   7B                     LD   A,E   ; if zero nesting append an ETX after \r
0231   B7                     OR   A   
0232   20 CE                  JR   NZ,waitchar   
0234   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
0236   03                     INC   BC   
0237                WAITCHAR4:      
0237   ED 43 04 1A            LD   (vTIBPtr),BC   
023B   01 00 19               LD   BC,TIB   ; Instructions stored on heap at address HERE
023E   0B                     DEC   BC   
023F   D1                     POP   DE   ; restore TOS
0240                             ; Drop into the NEXT and dispatch routines
0240                             ; ********************************************************************************
0240                             ; 
0240                             ; Dispatch Routine.
0240                             ; 
0240                             ; Get the next character and form a 1 byte jump address
0240                             ; 
0240                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
0240                             ; jump to the selected function.
0240                             ; 
0240                             ; Individual handler routines will deal with each category:
0240                             ; 
0240                             ; 1. Detect characters A-Z and jump to the User Command handler routine
0240                             ; 
0240                             ; 2. Detect characters a-z and jump to the variable handler routine
0240                             ; 
0240                             ; 3. All other characters are punctuation and cause a jump to the associated
0240                             ; primitive code.
0240                             ; 
0240                             ; Instruction Pointer IP BC is incremented
0240                             ; 
0240                             ; *********************************************************************************
0240                NEXT:        ; 9
0240   03                     INC   BC   ; Increment the IP
0241   0A                     LD   A,(BC)   ; Get the next character and dispatch
0242   6F                     LD   L,A   ; Index into table
0243   26 04                  LD   H,msb(opcodes)   ; Start address of jump table
0245   6E                     LD   L,(HL)   ; get low jump address
0246   26 05                  LD   H,msb(codePage)   ; Load H with the 1st page address
0248   E9                     JP   (HL)   ; Jump to routine
0249                ENTER:       ;=9
0249   60 69                  LD   HL,BC   
024B   CD D8 08               CALL   rpush   ; save Instruction Pointer
024E   C1                     POP   BC   
024F   0B                     DEC   BC   
0250   FD E9                  JP   (IY)   ; Execute code in user command
0252                             ; ARRAY compilation routine
0252                COMPNEXT:      ; 19
0252   2A 0E 1A               LD   HL,(vHeapPtr)   ; load heap ptr
0255   73                     LD   (HL),E   ; store lsb
0256   3A 36 1A               LD   A,(vByteMode)   
0259   23                     INC   HL   
025A   B7                     OR   A   
025B   20 02                  JR   NZ,compNext1   
025D   72                     LD   (HL),D   
025E   23                     INC   HL   
025F                COMPNEXT1:      
025F   D1                     POP   DE   
0260   22 0E 1A               LD   (vHeapPtr),HL   ; save heap ptr
0263   18 DB                  JR   NEXT   
0265                NESTING:      ;=46
0265   CB 7B                  BIT   7,E   
0267   20 06                  JR   NZ,nesting1   
0269   FE 60                  CP   "`"   
026B   28 06                  JR   Z,nesting0   
026D   18 09                  JR   nesting1a   
026F                NESTING1:      
026F   FE 60                  CP   "`"   
0271   20 05                  JR   NZ,nesting1a   
0273                NESTING0:      
0273   3E 80                  LD   A,$80   
0275   AB                     XOR   E   ; flip bit 7
0276   5F                     LD   E,A   
0277   C9                     RET      
0278                NESTING1A:      
0278   FE 3A                  CP   ":"   
027A   28 08                  JR   Z,nesting2   
027C   FE 5B                  CP   "["   
027E   28 04                  JR   Z,nesting2   
0280   FE 28                  CP   "("   
0282   20 02                  JR   NZ,nesting3   
0284                NESTING2:      
0284   1C                     INC   E   
0285   C9                     RET      
0286                NESTING3:      
0286   FE 3B                  CP   ";"   
0288   28 07                  JR   Z,nesting4   
028A   FE 5D                  CP   "]"   
028C   28 03                  JR   Z,nesting4   
028E   FE 29                  CP   ")"   
0290   C0                     RET   NZ   
0291                NESTING4:      
0291   1D                     DEC   E   
0292   C9                     RET      
0293                PROMPT:      ;=9
0293   CD 87 08               CALL   printStr   
0296   0D 0A 3E 20 00         .CSTR   "\r\n> "   
029B   C9                     RET      
029C                             ; **************************************************************************
029C                             ; Macros must be written in Mint and end with ;
029C                             ; this code must not span pages
029C                             ; **************************************************************************
029C                MACROS:      
029C                EMPTY_:      
029C   3B                     DB   ";"   
029D                BACKSP_:      
029D   5C 63 40 30 3D 30 3D 28 31 5F 5C 63 5C 2B 60 08 20 08 60 29 3B DB   "\\c@0=0=(1_\\c\\+`\b \b`);"   
02B2                             ; DB "1_\\c\\+`\b \b`;"
02B2                             ; DB ";"
02B2                REEDIT_:      
02B2   5C 65 5C 40 5C 5A 3B   DB   "\\e\\@\\Z;"   
02B9                EDIT_:       
02B9   60 3F 60 5C 4B 5C 4E 60 3E 20 60 5C 5E 41 2D 5C 5A 3B 00 .CSTR   "`?`\\K\\N`> `\\^A-\\Z;"   
02CC                LIST_:       
02CC   5C 4E 32 36 28 5C 69 40 5C 5A 5C 63 40 30 3E 28 5C 4E 29 29 5C 4E 60 3E 20 60 3B 00 .CSTR   "\\N26(\\i@\\Z\\c@0>(\\N))\\N`> `;"   
02E8                PRINTSTACK_:      
02E8   60 3D 3E 20 60 5C 50 5C 4E 5C 4E 60 3E 20 60 3B 00 .CSTR   "`=> `\\P\\N\\N`> `;"   
02F9                TOGGLEBASE_:      
02F9   5C 62 40 30 3D 5C 62 21 3B 00 .CSTR   "\\b@0=\\b!;"   
0303                             ; **************************************************************************
0303                             ; Page 2  Jump Tables
0303                             ; **************************************************************************
0303                          ALIGN   $100   
0400                OPCODES:      
0400                             ; ***********************************************************************
0400                             ; Initial values for user mintVars		
0400                             ; ***********************************************************************		
0400   77                     DB   lsb(exit_)   ;   NUL
0401   88                     DB   lsb(nop_)   ;   SOH
0402   88                     DB   lsb(nop_)   ;   STX
0403   6A                     DB   lsb(etx_)   ;   ETX
0404   88                     DB   lsb(nop_)   ;   EOT
0405   88                     DB   lsb(nop_)   ;   ENQ
0406   88                     DB   lsb(nop_)   ;   ACK
0407   88                     DB   lsb(nop_)   ;   BEL
0408   88                     DB   lsb(nop_)   ;   BS
0409   88                     DB   lsb(nop_)   ;   TAB
040A   88                     DB   lsb(nop_)   ;   LF
040B   88                     DB   lsb(nop_)   ;   VT
040C   88                     DB   lsb(nop_)   ;   FF
040D   88                     DB   lsb(nop_)   ;   CR
040E   88                     DB   lsb(nop_)   ;   SO
040F   88                     DB   lsb(nop_)   ;   SI
0410   88                     DB   lsb(nop_)   ;   DLE
0411   88                     DB   lsb(nop_)   ;   DC1
0412   88                     DB   lsb(nop_)   ;   DC2
0413   88                     DB   lsb(nop_)   ;   DC3
0414   88                     DB   lsb(nop_)   ;   DC4
0415   88                     DB   lsb(nop_)   ;   NAK
0416   88                     DB   lsb(nop_)   ;   SYN
0417   88                     DB   lsb(nop_)   ;   ETB
0418   88                     DB   lsb(nop_)   ;   CAN
0419   88                     DB   lsb(nop_)   ;   EM
041A   88                     DB   lsb(nop_)   ;   SUB
041B   88                     DB   lsb(nop_)   ;   ESC
041C   88                     DB   lsb(nop_)   ;   FS
041D   88                     DB   lsb(nop_)   ;   GS
041E   88                     DB   lsb(nop_)   ;   RS
041F   88                     DB   lsb(nop_)   ;   US
0420   88                     DB   lsb(nop_)   ;   SP
0421   9B                     DB   lsb(store_)   ;   !   ( val adr -- ) store
0422   67                     DB   lsb(dup_)   ;   "   ( n -- n n ) duplicate
0423   85                     DB   lsb(hex_)   ;   #   hexadecimal number
0424   A3                     DB   lsb(swap_)   ;   $   ( a b -- b a ) swap
0425   8E                     DB   lsb(over_)   ;   %   ( a b -- a b a ) over
0426   03                     DB   lsb(and_)   ;   &   ( n n -- n ) and
0427   64                     DB   lsb(drop_)   ;   '   ( n -- ) drop
0428   3D                     DB   lsb(begin_)   ;   (   ( n -- ) loop n times
0429   F3                     DB   lsb(again_)   ;   )   end of loop
042A   F0                     DB   lsb(mul_)   ;   *   multiply
042B   23                     DB   lsb(add_)   ;   +   add
042C   52                     DB   lsb(hdot_)   ;   ,   print hex
042D   BA                     DB   lsb(sub_)   ;   -   subtract
042E   58                     DB   lsb(dot_)   ;   .   print
042F   ED                     DB   lsb(div_)   ;   /   divide
0430   8B                     DB   lsb(num_)   ;   0   number
0431   8B                     DB   lsb(num_)   ;   1   number
0432   8B                     DB   lsb(num_)   ;   2   number
0433   8B                     DB   lsb(num_)   ;   3   number
0434   8B                     DB   lsb(num_)   ;   4   number
0435   8B                     DB   lsb(num_)   ;   5   number
0436   8B                     DB   lsb(num_)   ;   6   number
0437   8B                     DB   lsb(num_)   ;   7   number
0438   8B                     DB   lsb(num_)   ;   8   number
0439   8B                     DB   lsb(num_)   ;   9   number
043A   4F                     DB   lsb(def_)   ;   :   start of command definition
043B   94                     DB   lsb(ret_)   ;   ;   end of command definition
043C   D9                     DB   lsb(lt_)   ;   <   less than
043D   C1                     DB   lsb(eq_)   ;   =   equal to
043E   D5                     DB   lsb(gt_)   ;   >   greater than
043F   D2                     DB   lsb(getRef_)   ;   ?   get reference to command
0440   7F                     DB   lsb(fetch_)   ;   @   fetch
0441   40                     DB   lsb(call_)   ;   A   call command
0442   40                     DB   lsb(call_)   ;   B
0443   40                     DB   lsb(call_)   ;   C
0444   40                     DB   lsb(call_)   ;   D
0445   40                     DB   lsb(call_)   ;   E
0446   40                     DB   lsb(call_)   ;   F
0447   40                     DB   lsb(call_)   ;   G
0448   40                     DB   lsb(call_)   ;   H
0449   40                     DB   lsb(call_)   ;   I
044A   40                     DB   lsb(call_)   ;   J
044B   40                     DB   lsb(call_)   ;   K
044C   40                     DB   lsb(call_)   ;   L
044D   40                     DB   lsb(call_)   ;   M
044E   40                     DB   lsb(call_)   ;   N
044F   40                     DB   lsb(call_)   ;   O
0450   40                     DB   lsb(call_)   ;   P
0451   40                     DB   lsb(call_)   ;   Q
0452   40                     DB   lsb(call_)   ;   R
0453   40                     DB   lsb(call_)   ;   S
0454   40                     DB   lsb(call_)   ;   T
0455   40                     DB   lsb(call_)   ;   U
0456   40                     DB   lsb(call_)   ;   V
0457   40                     DB   lsb(call_)   ;   W
0458   40                     DB   lsb(call_)   ;   X
0459   40                     DB   lsb(call_)   ;   Y
045A   40                     DB   lsb(call_)   ;   Z   call command
045B   28                     DB   lsb(arrDef_)   ;   [   start an array
045C   00                     DB   lsb(alt_)   ;   \   alternate code
045D   3A                     DB   lsb(arrEnd_)   ;   ]   end of array
045E   1A                     DB   lsb(xor_)   ;   ^   code of char
045F   B5                     DB   lsb(neg_)   ;   _   negate
0460   F6                     DB   lsb(str_)   ;   `   print string
0461   E1                     DB   lsb(var_)   ;   a   variable reference
0462   E1                     DB   lsb(var_)   ;   b
0463   E1                     DB   lsb(var_)   ;   c
0464   E1                     DB   lsb(var_)   ;   d
0465   E1                     DB   lsb(var_)   ;   e
0466   E1                     DB   lsb(var_)   ;   f
0467   E1                     DB   lsb(var_)   ;   g
0468   E1                     DB   lsb(var_)   ;   h
0469   E1                     DB   lsb(var_)   ;   i
046A   E1                     DB   lsb(var_)   ;   j
046B   E1                     DB   lsb(var_)   ;   k
046C   E1                     DB   lsb(var_)   ;   l
046D   E1                     DB   lsb(var_)   ;   m
046E   E1                     DB   lsb(var_)   ;   n
046F   E1                     DB   lsb(var_)   ;   o
0470   E1                     DB   lsb(var_)   ;   p
0471   E1                     DB   lsb(var_)   ;   q
0472   E1                     DB   lsb(var_)   ;   r
0473   E1                     DB   lsb(var_)   ;   s
0474   E1                     DB   lsb(var_)   ;   t
0475   E1                     DB   lsb(var_)   ;   u
0476   E1                     DB   lsb(var_)   ;   v
0477   E1                     DB   lsb(var_)   ;   w
0478   E1                     DB   lsb(var_)   ;   x
0479   E1                     DB   lsb(var_)   ;   y
047A   E1                     DB   lsb(var_)   ;   z   variable reference
047B   A8                     DB   lsb(shl_)   ;   {   shift left
047C   0C                     DB   lsb(or_)   ;   |   or
047D   AD                     DB   lsb(shr_)   ;   }   shift right
047E   15                     DB   lsb(inv_)   ;   ~   invert
047F   88                     DB   lsb(nop_)   ;   backspace
0480                             ; ***********************************************************************
0480                             ; Alternate function codes		
0480                             ; ***********************************************************************		
0480                CTRLCODES:      
0480                ALTCODES:      
0480   9C                     DB   lsb(empty_)   ;   NUL ^@
0481   9C                     DB   lsb(empty_)   ;   SOH ^A
0482   F9                     DB   lsb(toggleBase_)   ;   STX ^B
0483   9C                     DB   lsb(empty_)   ;   ETX ^C
0484   9C                     DB   lsb(empty_)   ;   EOT ^D
0485   B9                     DB   lsb(edit_)   ;   ENQ ^E
0486   9C                     DB   lsb(empty_)   ;   ACK ^F
0487   9C                     DB   lsb(empty_)   ;   BEL ^G
0488   9D                     DB   lsb(backsp_)   ;   BS  ^H
0489   9C                     DB   lsb(empty_)   ;   TAB ^I
048A   B2                     DB   lsb(reedit_)   ;   LF  ^J
048B   9C                     DB   lsb(empty_)   ;   VT  ^K
048C   CC                     DB   lsb(list_)   ;   FF  ^L
048D   9C                     DB   lsb(empty_)   ;   CR  ^M
048E   9C                     DB   lsb(empty_)   ;   SO  ^N
048F   9C                     DB   lsb(empty_)   ;   SI  ^O
0490   E8                     DB   lsb(printStack_)   ;   DLE ^P
0491   9C                     DB   lsb(empty_)   ;   DC1 ^Q
0492   9C                     DB   lsb(empty_)   ;   DC2 ^R
0493   9C                     DB   lsb(empty_)   ;   DC3 ^S
0494   9C                     DB   lsb(empty_)   ;   DC4 ^T
0495   9C                     DB   lsb(empty_)   ;   NAK ^U
0496   9C                     DB   lsb(empty_)   ;   SYN ^V
0497   9C                     DB   lsb(empty_)   ;   ETB ^W
0498   9C                     DB   lsb(empty_)   ;   CAN ^X
0499   9C                     DB   lsb(empty_)   ;   EM  ^Y
049A   9C                     DB   lsb(empty_)   ;   SUB ^Z
049B   9C                     DB   lsb(empty_)   ;   ESC ^[
049C   9C                     DB   lsb(empty_)   ;   FS  ^\
049D   9C                     DB   lsb(empty_)   ;   GS  ^]
049E   9C                     DB   lsb(empty_)   ;   RS  ^^
049F   9C                     DB   lsb(empty_)   ;   US  ^_)
04A0   19                     DB   lsb(aNop_)   ;   SP  ^`
04A1   25                     DB   lsb(cStore_)   ;   !   byte store
04A2   19                     DB   lsb(aNop_)   ;   "
04A3   19                     DB   lsb(aNop_)   ;   #
04A4   19                     DB   lsb(aNop_)   ;   $   ( -- adr ) text input ptr
04A5   19                     DB   lsb(aNop_)   ;   %
04A6   19                     DB   lsb(aNop_)   ;   &
04A7   19                     DB   lsb(aNop_)   ;   '
04A8   41                     DB   lsb(ifte_)   ;   (   ( b -- ) if...then...else
04A9   19                     DB   lsb(aNop_)   ;   )
04AA   19                     DB   lsb(aNop_)   ;   *
04AB   94                     DB   lsb(incr_)   ;   +   ( adr -- ) decrements variable at address
04AC   19                     DB   lsb(aNop_)   ;   ,
04AD   19                     DB   lsb(aNop_)   ;   -
04AE   19                     DB   lsb(aNop_)   ;   .
04AF   19                     DB   lsb(aNop_)   ;   /
04B0   19                     DB   lsb(aNop_)   ;   0
04B1   19                     DB   lsb(aNop_)   ;   1
04B2   19                     DB   lsb(aNop_)   ;   2
04B3   19                     DB   lsb(aNop_)   ;   3
04B4   19                     DB   lsb(aNop_)   ;   4
04B5   19                     DB   lsb(aNop_)   ;   5
04B6   19                     DB   lsb(aNop_)   ;   6
04B7   19                     DB   lsb(aNop_)   ;   7
04B8   19                     DB   lsb(aNop_)   ;   8
04B9   19                     DB   lsb(aNop_)   ;   9
04BA   19                     DB   lsb(aNop_)   ;   :   start defining a macro
04BB   19                     DB   lsb(aNop_)   ;   ;
04BC   19                     DB   lsb(aNop_)   ;   <
04BD   19                     DB   lsb(aNop_)   ;   =
04BE   19                     DB   lsb(aNop_)   ;   >
04BF   19                     DB   lsb(aNop_)   ;   ?
04C0   15                     DB   lsb(cFetch_)   ;   @   byte fetch
04C1   19                     DB   lsb(aNop_)   ;   A
04C2   00                     DB   lsb(break_)   ;   B   break loop
04C3   88                     DB   lsb(nop_)   ;   C
04C4   2B                     DB   lsb(depth_)   ;   D   ( -- val ) depth of data stack
04C5   3A                     DB   lsb(emit_)   ;   E   ( val -- ) emits a char to output
04C6   19                     DB   lsb(aNop_)   ;   F
04C7   5C                     DB   lsb(go_)   ;   G   ( adr -- ) execute mint definition
04C8   19                     DB   lsb(aNop_)   ;   H
04C9   9F                     DB   lsb(inPort_)   ;   I   ( port -- val ) inout from port
04CA   19                     DB   lsb(aNop_)   ;   J
04CB   B1                     DB   lsb(key_)   ;   K   ( -- val )  read a char from input
04CC   19                     DB   lsb(aNop_)   ;   L
04CD   19                     DB   lsb(aNop_)   ;   M
04CE   BA                     DB   lsb(newln_)   ;   N   prints a newline to output
04CF   BF                     DB   lsb(outPort_)   ;   O   ( val port -- )
04D0   D5                     DB   lsb(printStk_)   ;   P   ( -- ) non-destructively prints stack
04D1   19                     DB   lsb(aNop_)   ;   Q   quits from Mint REPL
04D2   C5                     DB   lsb(rot_)   ;   R   ( a b c -- b c a )
04D3   19                     DB   lsb(aNop_)   ;   S
04D4   CE                     DB   lsb(typeStr_)   ;   T   ( adr -- ) prints a null terminated string
04D5   19                     DB   lsb(aNop_)   ;   U
04D6   19                     DB   lsb(aNop_)   ;   V
04D7   19                     DB   lsb(aNop_)   ;   W   ( b -- ) if false, skip to end of loop
04D8   53                     DB   lsb(exec_)   ;   X
04D9   19                     DB   lsb(aNop_)   ;   Y
04DA   EC                     DB   lsb(editDef_)   ;   Z
04DB   10                     DB   lsb(cArrDef_)   ;   [
04DC   23                     DB   lsb(comment_)   ;   \   comment text, skips reading until end of line
04DD   19                     DB   lsb(aNop_)   ;   ]
04DE   1B                     DB   lsb(charCode_)   ;   ^
04DF   19                     DB   lsb(aNop_)   ;   _
04E0   CB                     DB   lsb(strDef_)   ;   `   ( -- adr ) allocates a null terminated string
04E1   89                     DB   lsb(sysVar_)   ;   a   sys var: start of data stack variable
04E2   89                     DB   lsb(sysVar_)   ;   b   sys var: base16 variable
04E3   89                     DB   lsb(sysVar_)   ;   c   sys var: TIBPtr variable
04E4   89                     DB   lsb(sysVar_)   ;   d
04E5   89                     DB   lsb(sysVar_)   ;   e
04E6   89                     DB   lsb(sysVar_)   ;   f
04E7   89                     DB   lsb(sysVar_)   ;   g
04E8   89                     DB   lsb(sysVar_)   ;   h   sys var: heap ptr variable
04E9   8E                     DB   lsb(i_)   ;   i   sys var: returns index variable of current loop
04EA   A6                     DB   lsb(j_)   ;   j   sys var: returns index variable of outer loop
04EB   89                     DB   lsb(sysVar_)   ;   k
04EC   89                     DB   lsb(sysVar_)   ;   l
04ED   89                     DB   lsb(sysVar_)   ;   m
04EE   89                     DB   lsb(sysVar_)   ;   n
04EF   89                     DB   lsb(sysVar_)   ;   o
04F0   89                     DB   lsb(sysVar_)   ;   p
04F1   89                     DB   lsb(sysVar_)   ;   q
04F2   89                     DB   lsb(sysVar_)   ;   r
04F3   89                     DB   lsb(sysVar_)   ;   s
04F4   89                     DB   lsb(sysVar_)   ;   t
04F5   89                     DB   lsb(sysVar_)   ;   u
04F6   89                     DB   lsb(sysVar_)   ;   v
04F7   89                     DB   lsb(sysVar_)   ;   w
04F8   89                     DB   lsb(sysVar_)   ;   x
04F9   89                     DB   lsb(sysVar_)   ;   y
04FA   89                     DB   lsb(sysVar_)   ;   z   sys var:
04FB   6F                     DB   lsb(group_)   ;   {
04FC   19                     DB   lsb(aNop_)   ;   |
04FD   67                     DB   lsb(endGroup_)   ;   }
04FE   19                     DB   lsb(aNop_)   ;   ~
04FF   19                     DB   lsb(aNop_)   ;   BS		
0500                             ; **********************************************************************			
0500                             ; code page primitive routines
0500                             ; **********************************************************************
0500                          ALIGN   $100   
0500                CODEPAGE:      
0500                ALT_:        
0500   C3 36 08               JP   alt   
0503                AND_:        
0503   E1                     POP   HL   ; HL=NOS DE=TOS
0504   7B                     LD   A,E   
0505   A5                     AND   L   
0506   5F                     LD   E,A   
0507   7A                     LD   A,D   
0508   A4                     AND   H   
0509   57                     LD   D,A   
050A   FD E9                  JP   (IY)   
050C                OR_:         
050C   E1                     POP   HL   ; HL=NOS DE=TOS
050D   7B                     LD   A,E   
050E   B5                     OR   L   
050F   5F                     LD   E,A   
0510   7A                     LD   A,D   
0511   B4                     OR   H   
0512   57                     LD   D,A   
0513   FD E9                  JP   (IY)   
0515                INV_:        
0515   21 FF FF               LD   HL,$FFFF   
0518   18 01                  JR   xor1   
051A                XOR_:        
051A   E1                     POP   HL   ; HL=NOS DE=TOS
051B                XOR1:        
051B   7B                     LD   A,E   
051C   AD                     XOR   L   
051D   5F                     LD   E,A   
051E   7A                     LD   A,D   
051F   AA                     XOR   D   
0520   57                     LD   D,A   
0521   FD E9                  JP   (IY)   
0523                ADD_:        
0523   E1                     POP   HL   ; HL=NOS DE=TOS
0524   19                     ADD   HL,DE   ; NOS+TOS
0525   EB                     EX   DE,HL   
0526   FD E9                  JP   (IY)   
0528                ARRDEF_:      
0528                ARRDEF:      ;= 18
0528   3E 00                  LD   A,FALSE   
052A                ARRDEF1:      
052A   FD 21 52 02            LD   IY,compNEXT   
052E   32 36 1A               LD   (vByteMode),A   
0531   2A 0E 1A               LD   HL,(vHeapPtr)   ; HL = heap ptr
0534   CD D8 08               CALL   rpush   ; save start of array \[  \]
0537   C3 40 02               JP   NEXT   ; hardwired to NEXT
053A                ARREND_:      
053A   C3 3E 06               JP   arrEnd   
053D                BEGIN_:      
053D   C3 5B 06               JP   begin   
0540                CALL_:       
0540   60 69                  LD   HL,BC   
0542   CD D8 08               CALL   rpush   ; save Instruction Pointer
0545   0A                     LD   A,(BC)   
0546   CD 7A 08               CALL   lookupDef1   
0549   4E                     LD   C,(HL)   
054A   23                     INC   HL   
054B   46                     LD   B,(HL)   
054C   0B                     DEC   BC   
054D   FD E9                  JP   (IY)   ; Execute code from User def
054F                DEF_:        
054F   C3 89 06               JP   def   
0552                HDOT_:       ; print hexadecimal
0552   EB                     EX   DE,HL   
0553   CD BB 08               CALL   printhex   
0556   18 04                  JR   dot2   
0558                DOT_:        
0558   EB                     EX   DE,HL   
0559   CD 97 08               CALL   printdec   
055C                DOT2:        
055C   D1                     POP   DE   ; consume TOS
055D   3E 20                  LD   A," "   ; print space
055F   CD 85 00               CALL   putchar   
0562   FD E9                  JP   (IY)   
0564                DROP_:       
0564   D1                     POP   DE   
0565   FD E9                  JP   (IY)   
0567                DUP_:        
0567   D5                     PUSH   DE   
0568   FD E9                  JP   (IY)   
056A                ETX_:        
056A                ETX:         
056A   21 80 E7               LD   HL,-DSTACK   
056D   39                     ADD   HL,SP   
056E   D2 74 05               JP   NC,etx1   
0571   31 80 18               LD   SP,DSTACK   
0574                ETX1:        
0574   C3 E4 01               JP   interpret   
0577                EXIT_:       
0577   03                     INC   BC   
0578   C5                     PUSH   BC   
0579   CD E3 08               CALL   rpop   
057C   44 4D                  LD   BC,HL   
057E   C9                     RET      
057F                FETCH_:      
057F   EB                     EX   DE,HL   
0580                FETCH1:      
0580   5E                     LD   E,(HL)   
0581   23                     INC   HL   
0582   56                     LD   D,(HL)   
0583   FD E9                  JP   (IY)   
0585                HEX_:        
0585   C3 C6 06               JP   hex   
0588                NOP_:        
0588   C3 40 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
058B                NUM_:        
058B   C3 49 08               JP   num   
058E                OVER_:       
058E   E1                     POP   HL   ; HL=NOS
058F   E5                     PUSH   HL   
0590   D5                     PUSH   DE   
0591   EB                     EX   DE,HL   
0592   FD E9                  JP   (IY)   
0594                RET_:        
0594   CD E3 08               CALL   rpop   ; Restore Instruction pointer
0597   44 4D                  LD   BC,HL   
0599   FD E9                  JP   (IY)   
059B                STORE_:      
059B   EB                     EX   DE,HL   ; HL = TOS
059C   D1                     POP   DE   ; DE = NOS
059D   73                     LD   (HL),E   
059E   23                     INC   HL   
059F   72                     LD   (HL),D   
05A0   D1                     POP   DE   ; DE = TOS
05A1   FD E9                  JP   (IY)   
05A3                SWAP_:       
05A3   EB                     EX   DE,HL   
05A4   E3                     EX   (SP),HL   
05A5   EB                     EX   DE,HL   
05A6   FD E9                  JP   (IY)   
05A8                SHL_:        
05A8   EB                     EX   DE,HL   
05A9   29                     ADD   HL,HL   ; shift left
05AA   EB                     EX   DE,HL   
05AB   FD E9                  JP   (IY)   
05AD                SHR_:        
05AD   EB                     EX   DE,HL   
05AE                SHR1:        
05AE   CB 3C                  SRL   H   ; div HL by 2
05B0   CB 1D                  RR   L   
05B2   EB                     EX   DE,HL   ; result in TOS
05B3   FD E9                  JP   (IY)   
05B5                NEG_:        
05B5   21 00 00               LD   HL,0   
05B8   18 01                  JR   sub2   
05BA                SUB_:        
05BA                SUB1:        
05BA   E1                     POP   HL   
05BB                SUB2:        
05BB   B7                     OR   A   
05BC   ED 52                  SBC   HL,DE   
05BE   EB                     EX   DE,HL   
05BF   FD E9                  JP   (IY)   
05C1                EQ_:         
05C1   E1                     POP   HL   ; DE=TOS HL=NOS
05C2   B7                     OR   A   ; reset the carry flag
05C3   ED 52                  SBC   HL,DE   ; NOS-TOS if equal HL=0
05C5   EB                     EX   DE,HL   
05C6   28 05                  JR   Z,eq1   
05C8                EQ0:         ; if false
05C8   11 00 00               LD   DE,0   
05CB   FD E9                  JP   (IY)   
05CD                EQ1:         ; if true
05CD   11 01 00               LD   DE,1   
05D0   FD E9                  JP   (IY)   
05D2                GETREF_:      
05D2   C3 41 08               JP   getRef   
05D5                GT_:         
05D5   E1                     POP   HL   
05D6   EB                     EX   DE,HL   
05D7   18 01                  JR   lt1   
05D9                LT_:         
05D9   E1                     POP   HL   
05DA                LT1:         
05DA   B7                     OR   A   ; reset the carry flag
05DB   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
05DD   38 EE                  JR   C,eq1   
05DF   18 E7                  JR   eq0   
05E1                VAR_:        
05E1   3E DF                  LD   A,varsOfs   
05E3                VAR1:        
05E3   60                     LD   H,B   
05E4   69                     LD   L,C   
05E5   86                     ADD   A,(HL)   
05E6   87                     ADD   A,A   
05E7   D5                     PUSH   DE   ; push TOS
05E8   5F                     LD   E,A   ; TOS = ptr to var
05E9   16 1A                  LD   D,msb(mintVars)   
05EB   FD E9                  JP   (IY)   
05ED                DIV_:        
05ED   C3 A5 06               JP   div   
05F0                MUL_:        
05F0   C3 E4 06               JP   mul   
05F3                AGAIN_:      
05F3   C3 05 06               JP   again   
05F6                STR_:        
05F6                STR:         ;= 17
05F6   03                     INC   BC   
05F7                STR1:        
05F7   0A                     LD   A,(BC)   
05F8   03                     INC   BC   
05F9   FE 60                  CP   "`"   ; ` is the string terminator
05FB   28 05                  JR   Z,str2   
05FD   CD 85 00               CALL   putchar   
0600   18 F5                  JR   str1   
0602                STR2:        
0602   0B                     DEC   BC   
0603   FD E9                  JP   (IY)   
0605                             ;*******************************************************************
0605                             ; Code commands Commands continued
0605                             ;*******************************************************************
0605                AGAIN:       ;=57
0605   D5                     PUSH   DE   ; save TOS
0606   DD 5E 00               LD   E,(IX+0)   ; peek loop var
0609   DD 56 01               LD   D,(IX+1)   
060C   7B                     LD   A,E   ; check if IFTEMode (-1)
060D   A2                     AND   D   
060E   3C                     INC   A   
060F   20 09                  JR   NZ,again1   
0611   DD 23                  INC   IX   ; drop IFTEMode
0613   DD 23                  INC   IX   
0615   11 00 00               LD   DE,0   ; TOS=FALSE
0618   FD E9                  JP   (IY)   
061A                AGAIN1:      
061A   DD 6E 02               LD   L,(IX+2)   ; peek loopLimit
061D   DD 66 03               LD   H,(IX+3)   
0620   2B                     DEC   HL   ; loopLimit-1
0621   B7                     OR   A   
0622   ED 52                  SBC   HL,DE   ; loopVar == loopLimit-1 ?
0624   28 10                  JR   Z,again2   
0626   13                     INC   DE   ; no  so update frame and loop back
0627   DD 73 00               LD   (IX+0),E   ; poke loop var
062A   DD 72 01               LD   (IX+1),D   
062D   DD 4E 04               LD   C,(IX+4)   ; peek loop address
0630   DD 46 05               LD   B,(IX+5)   
0633   D1                     POP   DE   ; restore TOS
0634   FD E9                  JP   (IY)   
0636                AGAIN2:      
0636   11 06 00               LD   DE,6   ; yes drop loop frame
0639   DD 19                  ADD   IX,DE   
063B   D1                     POP   DE   ; restore TOS
063C   FD E9                  JP   (IY)   
063E                ARREND:      ;=29
063E   D5                     PUSH   DE   ; save TOS
063F   CD E3 08               CALL   rpop   ; HL=start of array
0642   EB                     EX   DE,HL   ; DE=start of array
0643   D5                     PUSH   DE   ; save start of array
0644   2A 0E 1A               LD   HL,(vHeapPtr)   ; HL = heap ptr
0647   B7                     OR   A   
0648   ED 52                  SBC   HL,DE   ; bytes on heap
064A   3A 36 1A               LD   A,(vByteMode)   
064D   B7                     OR   A   
064E   20 04                  JR   NZ,arrEnd2   ; if not byte mode div by 2
0650   CB 3C                  SRL   H   ; BC = m words
0652   CB 1D                  RR   L   
0654                ARREND2:      
0654   EB                     EX   DE,HL   ; TOS=length
0655   FD 21 40 02            LD   IY,NEXT   ; restore IY
0659   FD E9                  JP   (IY)   ; hardwired to NEXT
065B                             ;=28
065B                BEGIN:       ;=43
065B   7B                     LD   A,E   ; is TOS zero?
065C   B2                     OR   D   
065D   20 0D                  JR   NZ,begin3   ; if zero skip to past closing paren
065F                BEGIN1:      
065F   1E 01                  LD   E,1   ; we have already seen an opening paren
0661                BEGIN2:      
0661   03                     INC   BC   
0662   0A                     LD   A,(BC)   
0663   CD 65 02               CALL   nesting   ; keep nesting balanced
0666   AF                     XOR   A   
0667   B3                     OR   E   
0668   20 F7                  JR   NZ,begin2   
066A   18 1A                  JR   begin4   
066C                BEGIN3:      
066C   EB                     EX   DE,HL   ; HL=loop limit
066D   11 FA FF               LD   DE,-6   
0670   DD 19                  ADD   IX,DE   
0672   DD 36 00 00            LD   (IX+0),0   ; loopVar
0676   DD 36 01 00            LD   (IX+1),0   
067A   DD 75 02               LD   (IX+2),L   ; loopLimit
067D   DD 74 03               LD   (IX+3),H   
0680   DD 71 04               LD   (IX+4),C   ; loopAddress
0683   DD 70 05               LD   (IX+5),B   
0686                BEGIN4:      
0686   D1                     POP   DE   ; consume
0687   FD E9                  JP   (IY)   
0689                DEF:         ; Create a colon definition
0689   03                     INC   BC   
068A   0A                     LD   A,(BC)   ; Get the next character
068B   CD 73 08               CALL   lookupDef   
068E   D5                     PUSH   DE   ; save return SP
068F   ED 5B 0E 1A            LD   DE,(vHeapPtr)   ; start of defintion
0693   73                     LD   (HL),E   ; Save low byte of address in CFA
0694   23                     INC   HL   
0695   72                     LD   (HL),D   ; Save high byte of address in CFA+1
0696   EB                     EX   DE,HL   ; HL=HeapPtr
0697   D1                     POP   DE   ; restore return SP
0698                DEF1:        ; Skip to end of definition
0698   03                     INC   BC   ; Point to next character
0699   0A                     LD   A,(BC)   ; Get the next character
069A   77                     LD   (HL),A   ; write to definition
069B   23                     INC   HL   
069C   FE 3B                  CP   ";"   ; Is it a semicolon
069E   20 F8                  JR   NZ,def1   ; end the definition
06A0   22 0E 1A               LD   (vHeapPtr),HL   ; bump heap ptr to after definiton
06A3   FD E9                  JP   (IY)   
06A5                DIV:         ;=33
06A5   E1                     POP   HL   ; HL=NOS DE=TOS
06A6   C5                     PUSH   BC   ; Preserve the IP
06A7   44 4D                  LD   BC,HL   ; BC = 2nd value
06A9   21 00 00               LD   HL,0   ; zero the remainder
06AC   3E 10                  LD   A,16   ; loop counter
06AE                DIV1:        ; shift the bits from BC (numerator) into HL (accumulator)
06AE   CB 21                  SLA   C   
06B0   CB 10                  RL   B   
06B2   ED 6A                  ADC   HL,HL   
06B4   ED 52                  SBC   HL,DE   ; check if remainder >= denominator (HL>=DE)
06B6   38 03                  JR   C,div2   
06B8   0C                     INC   C   
06B9   18 01                  JR   div3   
06BB                DIV2:        ; remainder is not >= denominator, so we have to add DE back to HL
06BB   19                     ADD   HL,DE   
06BC                DIV3:        
06BC   3D                     DEC   A   
06BD   20 EF                  JR   NZ,div1   
06BF   50 59                  LD   DE,BC   ; result from BC to DE
06C1   C1                     POP   BC   
06C2   D5                     PUSH   DE   ; push Result
06C3   EB                     EX   DE,HL   ; TOS=remainder
06C4   FD E9                  JP   (IY)   
06C6                HEX:         ;= 30
06C6   D5                     PUSH   DE   ; push down TOS
06C7   21 00 00               LD   HL,0   ; Clear HL to accept the number
06CA                HEX1:        
06CA   03                     INC   BC   
06CB   0A                     LD   A,(BC)   ; Get the character which is a numeral
06CC   CB 77                  BIT   6,A   ; is it uppercase alpha?
06CE   28 02                  JR   Z,hex2   ; no a decimal
06D0   D6 07                  SUB   7   ; sub 7  to make $A - $F
06D2                HEX2:        
06D2   D6 30                  SUB   $30   ; Form decimal digit
06D4   DA 68 08               JP   C,num2   
06D7   FE 10                  CP   $0F+1   
06D9   D2 68 08               JP   NC,num2   
06DC   29                     ADD   HL,HL   ; 2X ; Multiply digit(s) in HL by 16
06DD   29                     ADD   HL,HL   ; 4X
06DE   29                     ADD   HL,HL   ; 8X
06DF   29                     ADD   HL,HL   ; 16X
06E0   85                     ADD   A,L   ; Add into bottom of HL
06E1   6F                     LD   L,A   
06E2   18 E6                  JR   hex1   
06E4                MUL:         ;=27
06E4   E1                     POP   HL   ; HL=NOS DE=TOS
06E5   C5                     PUSH   BC   ; Preserve the IP
06E6   44 4D                  LD   BC,HL   ; BC = 2nd value
06E8   21 00 00               LD   HL,0   
06EB   3E 10                  LD   A,16   
06ED                MUL1:        
06ED   29                     ADD   HL,HL   
06EE   CB 13                  RL   E   
06F0   CB 12                  RL   D   
06F2   30 04                  JR   NC,mul2   
06F4   09                     ADD   HL,BC   
06F5   30 01                  JR   NC,mul2   
06F7   13                     INC   DE   
06F8                MUL2:        
06F8   3D                     DEC   A   
06F9   20 F2                  JR   NZ,mul1   
06FB   EB                     EX   DE,HL   
06FC   C1                     POP   BC   
06FD   FD E9                  JP   (IY)   
06FF                             ; **************************************************************************
06FF                             ; Alt code primitives
06FF                             ; **************************************************************************
06FF                          ALIGN   $100   
0700                ALTCODEPAGE:      
0700                BREAK_:      
0700   7B                     LD   A,E   ; zero?
0701   B2                     OR   D   
0702   20 03                  JR   NZ,break1   
0704   D1                     POP   DE   ; consume
0705   FD E9                  JP   (IY)   
0707                BREAK1:      
0707   11 06 00               LD   DE,6   ; drop loop frame
070A   DD 19                  ADD   IX,DE   
070C   D1                     POP   DE   ; consume
070D   C3 5F 06               JP   begin1   ; skip to end of loop
0710                CARRDEF_:      
0710   3E 01                  LD   A,TRUE   
0712   C3 2A 05               JP   arrDef1   
0715                CFETCH_:      
0715   EB                     EX   DE,HL   
0716   16 00                  LD   D,0   
0718   5E                     LD   E,(HL)   
0719                ANOP_:       
0719   FD E9                  JP   (IY)   
071B                CHARCODE_:      
071B   03                     INC   BC   
071C   0A                     LD   A,(BC)   
071D   D5                     PUSH   DE   
071E   16 00                  LD   D,0   
0720   5F                     LD   E,A   
0721   FD E9                  JP   (IY)   
0723                COMMENT_:      
0723   FD E9                  JP   (IY)   
0725                CSTORE_:      
0725   EB                     EX   DE,HL   
0726   D1                     POP   DE   
0727   73                     LD   (HL),E   
0728   D1                     POP   DE   
0729   FD E9                  JP   (IY)   
072B                DEPTH_:      
072B   21 00 00               LD   HL,0   
072E   39                     ADD   HL,SP   
072F   D5                     PUSH   DE   ; push down TOS
0730   EB                     EX   DE,HL   ; DE=SP
0731   21 80 18               LD   HL,DSTACK   ; HL=SP0
0734   B7                     OR   A   
0735   ED 52                  SBC   HL,DE   ; SP0 - SP
0737   C3 AE 05               JP   shr1   
073A                EMIT_:       
073A   7B                     LD   A,E   
073B   D1                     POP   DE   ; consume
073C   CD 85 00               CALL   putchar   
073F   FD E9                  JP   (IY)   
0741                IFTE_:       
0741   7B                     LD   A,E   
0742   B2                     OR   D   
0743   C2 4A 07               JP   NZ,ifte1   
0746   13                     INC   DE   
0747   C3 5F 06               JP   begin1   ; skip to closing ) works with \) too
074A                IFTE1:       
074A   21 FF FF               LD   HL,-1   ; push -1 on return stack to indicate IFTEMode
074D   CD D8 08               CALL   rpush   
0750   D1                     POP   DE   ; consume
0751   FD E9                  JP   (IY)   
0753                EXEC_:       
0753   CD 58 07               CALL   exec1   
0756   FD E9                  JP   (IY)   
0758                EXEC1:       
0758   E1                     POP   HL   ; HL = RET address
0759   E3                     EX   (SP),HL   ; HL = NOS, (SP) = RET
075A   EB                     EX   DE,HL   ; HL = TOS, DE = NOS
075B   E9                     JP   (HL)   ; JP to machine code, RET will return to exec_
075C                GO_:         
075C   60 69                  LD   HL,BC   
075E   CD D8 08               CALL   rpush   ; save Instruction Pointer
0761   42 4B                  LD   BC,DE   ; pop TOS
0763   D1                     POP   DE   ; consume
0764   0B                     DEC   BC   ; decrement to just before
0765   FD E9                  JP   (IY)   ; Execute code from User def
0767                ENDGROUP_:      
0767   CD E3 08               CALL   rpop   
076A   22 06 1A               LD   (vDEFS),HL   
076D   FD E9                  JP   (IY)   
076F                GROUP_:      
076F   2A 06 1A               LD   HL,(vDEFS)   
0772   CD D8 08               CALL   rpush   
0775   53                     LD   D,E   ; TOS * 64
0776   1E 00                  LD   E,0   
0778   CB 3A                  SRL   D   
077A   CB 1B                  RR   E   
077C   CB 3A                  SRL   D   
077E   CB 1B                  RR   E   
0780   21 C0 1A               LD   HL,DEFS   
0783   19                     ADD   HL,DE   ; HL=DEFS + TOS * 64
0784   22 06 1A               LD   (vDEFS),HL   ; store in vDEFS
0787   FD E9                  JP   (IY)   
0789                SYSVAR_:      
0789   3E 9F                  LD   A,sysvarsOfs   
078B   C3 E3 05               JP   var1   
078E                I_:          
078E   D5                     PUSH   DE   ; save TOS
078F   DD E5                  PUSH   IX   
0791   D1                     POP   DE   ; HL=RSP
0792   FD E9                  JP   (IY)   
0794                INCR_:       
0794   E1                     POP   HL   ; DE=addr HL=incr
0795   EB                     EX   DE,HL   ; HL=addr DE=incr
0796   7B                     LD   A,E   
0797   86                     ADD   A,(HL)   
0798   77                     LD   (HL),A   
0799   23                     INC   HL   
079A   7A                     LD   A,D   
079B   8E                     ADC   A,(HL)   
079C   77                     LD   (HL),A   
079D   FD E9                  JP   (IY)   
079F                INPORT_:      
079F   4B                     LD   C,E   
07A0   ED 58                  IN   E,(C)   
07A2   16 00                  LD   D,0   
07A4   FD E9                  JP   (IY)   
07A6                J_:          
07A6   D5                     PUSH   DE   ; save TOS
07A7   DD E5                  PUSH   IX   
07A9   E1                     POP   HL   ; HL=RSP
07AA   11 06 00               LD   DE,6   
07AD   19                     ADD   HL,DE   ; HL+=6
07AE   EB                     EX   DE,HL   ; TOS=RSP+6
07AF   FD E9                  JP   (IY)   
07B1                KEY_:        
07B1   D5                     PUSH   DE   ; push down TOS
07B2   CD 81 00               CALL   getchar   
07B5   5F                     LD   E,A   
07B6   16 00                  LD   D,0   
07B8   FD E9                  JP   (IY)   
07BA                NEWLN_:      
07BA   CD 6C 08               CALL   crlf   
07BD   FD E9                  JP   (IY)   
07BF                OUTPORT_:      
07BF   4B                     LD   C,E   
07C0   E1                     POP   HL   
07C1   ED 69                  OUT   (C),L   
07C3   FD E9                  JP   (IY)   
07C5                ROT_:        ; a b c -- b c a
07C5   E1                     POP   HL   ; (SP)=a HL=b DE=c
07C6   E3                     EX   (SP),HL   ; (SP)=b HL=a DE=c
07C7   EB                     EX   DE,HL   ; (SP)=b HL=c DE=a
07C8   E5                     PUSH   HL   
07C9   FD E9                  JP   (IY)   
07CB                STRDEF_:      
07CB   C3 22 08               JP   strDef   
07CE                TYPESTR_:      
07CE   EB                     EX   DE,HL   
07CF   D1                     POP   DE   
07D0   CD 8E 08               CALL   printStr1   
07D3   FD E9                  JP   (IY)   
07D5                PRINTSTK_:      
07D5                PRINTSTK:      ;= 32
07D5   CD 49 02               CALL   enter   
07D8                             ; .cstr "\\a@2-\\D1-(",$22,"@\\b@\\(,)(.)2-)'"
07D8   5C 61 40 32 2D 5C 44 31 2D 28 22 40 2E 32 2D 29 27 00 .CSTR   "\\a@2-\\D1-(",$22,"@.2-)'"   
07EA   FD E9                  JP   (IY)   
07EC                EDITDEF_:      
07EC                             ;=
07EC                             ;*******************************************************************
07EC                             ; Alt Code commands Commands continued
07EC                             ;*******************************************************************
07EC                             ;=54
07EC                EDITDEF:      ; lookup up def based on number
07EC   3E 41                  LD   A,"A"   
07EE   83                     ADD   A,E   
07EF   08                     EX   AF,AF'   
07F0   2A 06 1A               LD   HL,(vDEFS)   
07F3   19                     ADD   HL,DE   
07F4   19                     ADD   HL,DE   
07F5   5E                     LD   E,(HL)   
07F6   23                     INC   HL   
07F7   56                     LD   D,(HL)   
07F8   EB                     EX   DE,HL   
07F9   7E                     LD   A,(HL)   
07FA   FE 3B                  CP   ";"   
07FC   11 00 19               LD   DE,TIB   
07FF   28 14                  JR   Z,editDef3   
0801   3E 3A                  LD   A,":"   
0803   CD EE 08               CALL   writeChar   
0806   08                     EX   AF,AF'   
0807   CD EE 08               CALL   writeChar   
080A   18 01                  JR   editDef2   
080C                EDITDEF1:      
080C   23                     INC   HL   
080D                EDITDEF2:      
080D   7E                     LD   A,(HL)   
080E   CD EE 08               CALL   writeChar   
0811   FE 3B                  CP   ";"   
0813   20 F7                  JR   NZ,editDef1   
0815                EDITDEF3:      
0815   21 00 19               LD   HL,TIB   
0818   EB                     EX   DE,HL   
0819   B7                     OR   A   
081A   ED 52                  SBC   HL,DE   
081C   22 04 1A               LD   (vTIBPtr),HL   
081F   D1                     POP   DE   ; consume
0820   FD E9                  JP   (IY)   
0822                STRDEF:      ;=20
0822   D5                     PUSH   DE   ; save TOS
0823   2A 0E 1A               LD   HL,(vHeapPtr)   ; HL = heap ptr
0826   54 5D                  LD   DE,HL   ; TOS=start of string
0828   18 02                  JR   strDef2   
082A                STRDEF1:      
082A   77                     LD   (HL),A   ; write char to string
082B   23                     INC   HL   
082C                STRDEF2:      
082C   03                     INC   BC   ; point to next char
082D   0A                     LD   A,(BC)   
082E   FE 60                  CP   "`"   ; ` is the string terminator
0830   20 F8                  JR   NZ,strDef1   
0832   AF                     XOR   A   ; write null to end of string
0833   77                     LD   (HL),A   
0834   FD E9                  JP   (IY)   
0836                             ;*******************************************************************
0836                             ; Misc Commands continued
0836                             ;*******************************************************************
0836                ALT:         ;=11
0836   03                     INC   BC   
0837   0A                     LD   A,(BC)   
0838   21 80 04               LD   HL,altCodes   
083B   85                     ADD   A,L   
083C   6F                     LD   L,A   
083D   6E                     LD   L,(HL)   
083E   26 07                  LD   H,msb(altCodePage)   
0840   E9                     JP   (HL)   
0841                GETREF:      ;= 8
0841   03                     INC   BC   
0842   0A                     LD   A,(BC)   
0843   CD 73 08               CALL   lookupDef   
0846   C3 80 05               JP   fetch1   
0849                NUM:         ;=35
0849   D5                     PUSH   DE   ; push down TOS
084A   21 00 00               LD   HL,$0000   ; Clear HL to accept the number
084D   0A                     LD   A,(BC)   ; Get the character which is a numeral
084E                NUM1:        ; corrected KB 24/11/21
084E   D6 30                  SUB   $30   ; Form decimal digit
0850   85                     ADD   A,L   ; Add into bottom of HL
0851   6F                     LD   L,A   
0852   3E 00                  LD   A,0   ; Clear A
0854   8C                     ADC   A,H   ; Add with carry H-reg
0855   67                     LD   H,A   ; Put result in H-reg
0856   03                     INC   BC   ; Increment IP
0857   0A                     LD   A,(BC)   ; and get the next character
0858   FE 30                  CP   $30   ; Less than $30
085A   38 0C                  JR   C,num2   ; Not a number / end of number
085C   FE 3A                  CP   $3A   ; Greater or equal to $3A
085E   30 08                  JR   NC,num2   ; Not a number / end of number
0860   29                     ADD   HL,HL   ; 2X
0861   54 5D                  LD   DE,HL   
0863   29                     ADD   HL,HL   ; 4X
0864   29                     ADD   HL,HL   ; 8X
0865   19                     ADD   HL,DE   ; 2X  + 8X  = 10X
0866   18 E6                  JR   num1   
0868                NUM2:        
0868   0B                     DEC   BC   
0869   EB                     EX   DE,HL   ; Put the number in TOS
086A   FD E9                  JP   (IY)   ; and process the next character
086C                             ;*******************************************************************
086C                             ; Subroutines
086C                             ;*******************************************************************
086C                CRLF:        ;=7
086C   CD 87 08               CALL   printStr   
086F   0D 0A 00               .CSTR   "\r\n"   
0872   C9                     RET      
0873                LOOKUPDEF:      ;=20
0873   D6 41                  SUB   "A"   
0875   32 08 1A               LD   (vEdited),A   
0878   18 02                  JR   lookupDef2   
087A                LOOKUPDEF1:      
087A   D6 41                  SUB   "A"   
087C                LOOKUPDEF2:      
087C   87                     ADD   A,A   
087D   2A 06 1A               LD   HL,(vDEFS)   
0880   85                     ADD   A,L   
0881   6F                     LD   L,A   
0882   3E 00                  LD   A,0   
0884   8C                     ADC   A,H   
0885   67                     LD   H,A   
0886   C9                     RET      
0887                PRINTSTR:      ;=
0887   E3                     EX   (SP),HL   ; use return address to locate string
0888   CD 8E 08               CALL   printStr1   ; print until null
088B   23                     INC   HL   ; skip past null
088C   E3                     EX   (SP),HL   ; HL contains real return address
088D   C9                     RET      
088E                PRINTSTR1:      
088E   7E                     LD   A,(HL)   ; A=char
088F   B7                     OR   A   
0890   C8                     RET   Z   ; return if null found
0891   CD 85 00               CALL   putchar   
0894   23                     INC   HL   ; next char
0895   18 F7                  JR   printStr1   
0897                PRINTDEC:      ;=36
0897   11 F0 D8               LD   DE,-10000   
089A   CD B0 08               CALL   printdec1   
089D   11 18 FC               LD   DE,-1000   
08A0   CD B0 08               CALL   printdec1   
08A3   11 9C FF               LD   DE,-100   
08A6   CD B0 08               CALL   printdec1   
08A9   1E F6                  LD   E,-10   
08AB   CD B0 08               CALL   printdec1   
08AE   1E FF                  LD   E,-1   
08B0                PRINTDEC1:      
08B0   3E 2F                  LD   A,"0"-1   
08B2                PRINTDEC2:      
08B2   3C                     INC   A   
08B3   19                     ADD   HL,DE   
08B4   38 FC                  JR   C,printdec2   
08B6   ED 52                  SBC   HL,DE   
08B8   C3 85 00               JP   putchar   
08BB                PRINTHEX:      ;=29
08BB   7C                     LD   A,H   
08BC   CD C4 08               CALL   printhex2   
08BF   7D                     LD   A,L   
08C0   CD C4 08               CALL   printhex2   
08C3   C9                     RET      
08C4                PRINTHEX2:      
08C4   4F                     LD   C,A   
08C5   1F                     RRA      
08C6   1F                     RRA      
08C7   1F                     RRA      
08C8   1F                     RRA      
08C9   CD CD 08               CALL   printhex3   
08CC   79                     LD   A,C   
08CD                PRINTHEX3:      
08CD   E6 0F                  AND   0x0F   
08CF   C6 90                  ADD   A,0x90   
08D1   27                     DAA      
08D2   CE 40                  ADC   A,0x40   
08D4   27                     DAA      
08D5   C3 85 00               JP   putchar   
08D8                RPUSH:       ; 11
08D8   DD 2B                  DEC   IX   
08DA   DD 74 00               LD   (IX+0),H   
08DD   DD 2B                  DEC   IX   
08DF   DD 75 00               LD   (IX+0),L   
08E2   C9                     RET      
08E3                RPOP:        ; 11
08E3   DD 6E 00               LD   L,(IX+0)   
08E6   DD 23                  INC   IX   
08E8   DD 66 00               LD   H,(IX+0)   
08EB   DD 23                  INC   IX   
08ED   C9                     RET      
08EE                WRITECHAR:      ;=5
08EE   12                     LD   (DE),A   
08EF   13                     INC   DE   
08F0   C3 85 00               JP   putchar   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                DSTACK:      
1880                          DS   RSIZE   
1900                RSTACK:      
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                MINTVARS:      
1A00                SYSVARS:      
1A00                VS0:      DS   2   ; a
1A02                VBASE16:   DS   2   ; b
1A04                VTIBPTR:   DS   2   ; c
1A06                VDEFS:    DS   2   ; d
1A08                VEDITED:   DS   2   ; e
1A0A                          DS   2   ; f
1A0C                          DS   2   ; g
1A0E                VHEAPPTR:   DS   2   ; h
1A10                          DS   2   ; i
1A12                          DS   2   ; j
1A14                          DS   2   ; k
1A16                          DS   2   ; l
1A18                          DS   2   ; m
1A1A                          DS   2   ; n
1A1C                          DS   2   ; o
1A1E                          DS   2   ; p
1A20                          DS   2   ; q
1A22                          DS   2   ; r
1A24                          DS   2   ; s
1A26                          DS   2   ; t
1A28                          DS   2   ; u
1A2A                          DS   2   ; v
1A2C                          DS   2   ; w
1A2E                          DS   2   ; x
1A30                          DS   2   ; y
1A32                          DS   2   ; z
1A34                VNESTING:   DS   2   ; 
1A36                VBYTEMODE:   DS   2   ; 
1A38                          DS   $30   
1A68                TBPTR:    DS   2   ; reserved for tests
1A6A                RST08:    DS   2   
1A6C                RST10:    DS   2   
1A6E                RST18:    DS   2   
1A70                RST20:    DS   2   
1A72                RST28:    DS   2   
1A74                RST30:    DS   2   ; 
1A76                BAUD:     DS   2   ; 
1A78                INTVEC:   DS   2   ; 
1A7A                NMIVEC:   DS   2   ; 
1A7C                GETCVEC:   DS   2   ; 
1A7E                PUTCVEC:   DS   2   ; 
1A80                             ; ****************************************************************
1A80                             ; VARS Table - holds 26 16-bit user variables
1A80                             ; ****************************************************************
1A80                VARS:     DS   26 * 2   
1AB4                             ; ****************************************************************
1AB4                             ; DEFS Table - holds 26 addresses of user routines
1AB4                             ; ****************************************************************
1AB4                          ALIGN   $40   
1AB4                          .ORG   $-12   
1AB4                          DS   12   ; vars for group 0
1AC0                DEFS:     DS   GRPSIZE * NUMGRPS   
1C00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 30 IN MINT.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 117 IN MINT.asm
                    > USED AT LINE 1109 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 131 IN MINT.asm
                    > USED AT LINE 621 IN MINT.asm
                    > USED AT LINE 778 IN MINT.asm
                    > USED AT LINE 1019 IN MINT.asm
                    > USED AT LINE 1290 IN MINT.asm
                    > USED AT LINE 1311 IN MINT.asm
                    > USED AT LINE 1335 IN MINT.asm
                    > USED AT LINE 1354 IN MINT.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 13 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 14 IN MINT.asm
                    > USED AT LINE 7 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 15 IN MINT.asm
                    > USED AT LINE 10 IN ram.asm
TRUE:               0001 DEFINED AT LINE 16 IN MINT.asm
                    > USED AT LINE 978 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 17 IN MINT.asm
                    > USED AT LINE 44 IN MINT.asm
                    > USED AT LINE 583 IN MINT.asm
NUMGRPS:            0005 DEFINED AT LINE 19 IN MINT.asm
                    > USED AT LINE 59 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
GRPSIZE:            0040 DEFINED AT LINE 20 IN MINT.asm
                    > USED AT LINE 59 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
VARSOFS:            0-21 DEFINED AT LINE 22 IN MINT.asm
                    > USED AT LINE 749 IN MINT.asm
SYSVARSOFS:         0-61 DEFINED AT LINE 23 IN MINT.asm
                    > USED AT LINE 1071 IN MINT.asm
START:              0180 DEFINED AT LINE 32 IN MINT.asm
                    > USED AT LINE 6
ISYSVARS:           0198 DEFINED AT LINE 42 IN MINT.asm
                    > USED AT LINE 53 IN MINT.asm
INITIALIZE:         01A8 DEFINED AT LINE 52 IN MINT.asm
                    > USED AT LINE 34 IN MINT.asm
INIT1:              01B8 DEFINED AT LINE 60 IN MINT.asm
                    > USED AT LINE 65 IN MINT.asm
MACRO:              01C9 DEFINED AT LINE 70 IN MINT.asm
                    > USED AT LINE 124 IN MINT.asm
INTERPRET:          01E4 DEFINED AT LINE 85 IN MINT.asm
                    > USED AT LINE 37 IN MINT.asm
                    > USED AT LINE 639 IN MINT.asm
INTERPRET2:         01EF DEFINED AT LINE 91 IN MINT.asm
                    > USED AT LINE 83 IN MINT.asm
INTERPRET3:         01F7 DEFINED AT LINE 98 IN MINT.asm
                    > USED AT LINE 107 IN MINT.asm
INTERPRET4:         01FD DEFINED AT LINE 104 IN MINT.asm
                    > USED AT LINE 96 IN MINT.asm
WAITCHAR:           0202 DEFINED AT LINE 116 IN MINT.asm
                    > USED AT LINE 133 IN MINT.asm
                    > USED AT LINE 147 IN MINT.asm
WAITCHAR1:          0213 DEFINED AT LINE 126 IN MINT.asm
                    > USED AT LINE 119 IN MINT.asm
WAITCHAR3:          0221 DEFINED AT LINE 135 IN MINT.asm
                    > USED AT LINE 123 IN MINT.asm
WAITCHAR4:          0237 DEFINED AT LINE 151 IN MINT.asm
                    > USED AT LINE 121 IN MINT.asm
NEXT:               0240 DEFINED AT LINE 179 IN MINT.asm
                    > USED AT LINE 67 IN MINT.asm
                    > USED AT LINE 208 IN MINT.asm
                    > USED AT LINE 589 IN MINT.asm
                    > USED AT LINE 660 IN MINT.asm
                    > USED AT LINE 838 IN MINT.asm
ENTER:              0249 DEFINED AT LINE 188 IN MINT.asm
                    > USED AT LINE 79 IN MINT.asm
                    > USED AT LINE 1142 IN MINT.asm
COMPNEXT:           0252 DEFINED AT LINE 196 IN MINT.asm
                    > USED AT LINE 585 IN MINT.asm
COMPNEXT1:          025F DEFINED AT LINE 205 IN MINT.asm
                    > USED AT LINE 202 IN MINT.asm
NESTING:            0265 DEFINED AT LINE 210 IN MINT.asm
                    > USED AT LINE 102 IN MINT.asm
                    > USED AT LINE 132 IN MINT.asm
                    > USED AT LINE 851 IN MINT.asm
NESTING1:           026F DEFINED AT LINE 216 IN MINT.asm
                    > USED AT LINE 212 IN MINT.asm
NESTING0:           0273 DEFINED AT LINE 219 IN MINT.asm
                    > USED AT LINE 214 IN MINT.asm
NESTING1A:          0278 DEFINED AT LINE 224 IN MINT.asm
                    > USED AT LINE 215 IN MINT.asm
                    > USED AT LINE 218 IN MINT.asm
NESTING2:           0284 DEFINED AT LINE 231 IN MINT.asm
                    > USED AT LINE 226 IN MINT.asm
                    > USED AT LINE 228 IN MINT.asm
NESTING3:           0286 DEFINED AT LINE 234 IN MINT.asm
                    > USED AT LINE 230 IN MINT.asm
NESTING4:           0291 DEFINED AT LINE 241 IN MINT.asm
                    > USED AT LINE 236 IN MINT.asm
                    > USED AT LINE 238 IN MINT.asm
PROMPT:             0293 DEFINED AT LINE 245 IN MINT.asm
                    > USED AT LINE 87 IN MINT.asm
MACROS:             029C DEFINED AT LINE 255 IN MINT.asm
EMPTY_:             029C DEFINED AT LINE 1 IN MINT.asm
BACKSP_:            029D DEFINED AT LINE 4 IN MINT.asm
REEDIT_:            02B2 DEFINED AT LINE 9 IN MINT.asm
EDIT_:              02B9 DEFINED AT LINE 12 IN MINT.asm
LIST_:              02CC DEFINED AT LINE 15 IN MINT.asm
PRINTSTACK_:        02E8 DEFINED AT LINE 18 IN MINT.asm
TOGGLEBASE_:        02F9 DEFINED AT LINE 21 IN MINT.asm
OPCODES:            0400 DEFINED AT LINE 263 IN MINT.asm
CTRLCODES:          0480 DEFINED AT LINE 400 IN MINT.asm
                    > USED AT LINE 73 IN MINT.asm
ALTCODES:           0480 DEFINED AT LINE 401 IN MINT.asm
                    > USED AT LINE 1212 IN MINT.asm
CODEPAGE:           0500 DEFINED AT LINE 536 IN MINT.asm
ALT_:               0500 DEFINED AT LINE 538 IN MINT.asm
AND_:               0503 DEFINED AT LINE 540 IN MINT.asm
OR_:                050C DEFINED AT LINE 550 IN MINT.asm
INV_:               0515 DEFINED AT LINE 560 IN MINT.asm
XOR_:               051A DEFINED AT LINE 564 IN MINT.asm
XOR1:               051B DEFINED AT LINE 566 IN MINT.asm
                    > USED AT LINE 562 IN MINT.asm
ADD_:               0523 DEFINED AT LINE 575 IN MINT.asm
ARRDEF_:            0528 DEFINED AT LINE 581 IN MINT.asm
ARRDEF:             0528 DEFINED AT LINE 582 IN MINT.asm
ARRDEF1:            052A DEFINED AT LINE 584 IN MINT.asm
                    > USED AT LINE 979 IN MINT.asm
ARREND_:            053A DEFINED AT LINE 591 IN MINT.asm
BEGIN_:             053D DEFINED AT LINE 594 IN MINT.asm
CALL_:              0540 DEFINED AT LINE 597 IN MINT.asm
DEF_:               054F DEFINED AT LINE 608 IN MINT.asm
HDOT_:              0552 DEFINED AT LINE 611 IN MINT.asm
DOT_:               0558 DEFINED AT LINE 615 IN MINT.asm
DOT2:               055C DEFINED AT LINE 618 IN MINT.asm
                    > USED AT LINE 614 IN MINT.asm
DROP_:              0564 DEFINED AT LINE 624 IN MINT.asm
DUP_:               0567 DEFINED AT LINE 628 IN MINT.asm
ETX_:               056A DEFINED AT LINE 632 IN MINT.asm
ETX:                056A DEFINED AT LINE 633 IN MINT.asm
ETX1:               0574 DEFINED AT LINE 638 IN MINT.asm
                    > USED AT LINE 636 IN MINT.asm
EXIT_:              0577 DEFINED AT LINE 641 IN MINT.asm
FETCH_:             057F DEFINED AT LINE 648 IN MINT.asm
FETCH1:             0580 DEFINED AT LINE 650 IN MINT.asm
                    > USED AT LINE 1223 IN MINT.asm
HEX_:               0585 DEFINED AT LINE 656 IN MINT.asm
NOP_:               0588 DEFINED AT LINE 659 IN MINT.asm
NUM_:               058B DEFINED AT LINE 662 IN MINT.asm
OVER_:              058E DEFINED AT LINE 665 IN MINT.asm
RET_:               0594 DEFINED AT LINE 672 IN MINT.asm
STORE_:             059B DEFINED AT LINE 677 IN MINT.asm
SWAP_:              05A3 DEFINED AT LINE 686 IN MINT.asm
SHL_:               05A8 DEFINED AT LINE 692 IN MINT.asm
SHR_:               05AD DEFINED AT LINE 698 IN MINT.asm
SHR1:               05AE DEFINED AT LINE 700 IN MINT.asm
                    > USED AT LINE 1014 IN MINT.asm
NEG_:               05B5 DEFINED AT LINE 706 IN MINT.asm
SUB_:               05BA DEFINED AT LINE 710 IN MINT.asm
SUB1:               05BA DEFINED AT LINE 711 IN MINT.asm
SUB2:               05BB DEFINED AT LINE 713 IN MINT.asm
                    > USED AT LINE 708 IN MINT.asm
EQ_:                05C1 DEFINED AT LINE 719 IN MINT.asm
EQ0:                05C8 DEFINED AT LINE 725 IN MINT.asm
                    > USED AT LINE 746 IN MINT.asm
EQ1:                05CD DEFINED AT LINE 728 IN MINT.asm
                    > USED AT LINE 724 IN MINT.asm
                    > USED AT LINE 745 IN MINT.asm
GETREF_:            05D2 DEFINED AT LINE 732 IN MINT.asm
GT_:                05D5 DEFINED AT LINE 735 IN MINT.asm
LT_:                05D9 DEFINED AT LINE 740 IN MINT.asm
LT1:                05DA DEFINED AT LINE 742 IN MINT.asm
                    > USED AT LINE 738 IN MINT.asm
VAR_:               05E1 DEFINED AT LINE 748 IN MINT.asm
VAR1:               05E3 DEFINED AT LINE 750 IN MINT.asm
                    > USED AT LINE 1072 IN MINT.asm
DIV_:               05ED DEFINED AT LINE 760 IN MINT.asm
MUL_:               05F0 DEFINED AT LINE 763 IN MINT.asm
AGAIN_:             05F3 DEFINED AT LINE 766 IN MINT.asm
STR_:               05F6 DEFINED AT LINE 769 IN MINT.asm
STR:                05F6 DEFINED AT LINE 770 IN MINT.asm
STR1:               05F7 DEFINED AT LINE 773 IN MINT.asm
                    > USED AT LINE 779 IN MINT.asm
STR2:               0602 DEFINED AT LINE 781 IN MINT.asm
                    > USED AT LINE 777 IN MINT.asm
AGAIN:              0605 DEFINED AT LINE 789 IN MINT.asm
                    > USED AT LINE 767 IN MINT.asm
AGAIN1:             061A DEFINED AT LINE 802 IN MINT.asm
                    > USED AT LINE 796 IN MINT.asm
AGAIN2:             0636 DEFINED AT LINE 817 IN MINT.asm
                    > USED AT LINE 808 IN MINT.asm
ARREND:             063E DEFINED AT LINE 823 IN MINT.asm
                    > USED AT LINE 592 IN MINT.asm
ARREND2:            0654 DEFINED AT LINE 836 IN MINT.asm
                    > USED AT LINE 833 IN MINT.asm
BEGIN:              065B DEFINED AT LINE 842 IN MINT.asm
                    > USED AT LINE 595 IN MINT.asm
BEGIN1:             065F DEFINED AT LINE 846 IN MINT.asm
                    > USED AT LINE 975 IN MINT.asm
                    > USED AT LINE 1027 IN MINT.asm
BEGIN2:             0661 DEFINED AT LINE 848 IN MINT.asm
                    > USED AT LINE 854 IN MINT.asm
BEGIN3:             066C DEFINED AT LINE 856 IN MINT.asm
                    > USED AT LINE 845 IN MINT.asm
BEGIN4:             0686 DEFINED AT LINE 866 IN MINT.asm
                    > USED AT LINE 855 IN MINT.asm
DEF:                0689 DEFINED AT LINE 870 IN MINT.asm
                    > USED AT LINE 609 IN MINT.asm
DEF1:               0698 DEFINED AT LINE 881 IN MINT.asm
                    > USED AT LINE 887 IN MINT.asm
DIV:                06A5 DEFINED AT LINE 891 IN MINT.asm
                    > USED AT LINE 761 IN MINT.asm
DIV1:               06AE DEFINED AT LINE 897 IN MINT.asm
                    > USED AT LINE 909 IN MINT.asm
DIV2:               06BB DEFINED AT LINE 905 IN MINT.asm
                    > USED AT LINE 902 IN MINT.asm
DIV3:               06BC DEFINED AT LINE 907 IN MINT.asm
                    > USED AT LINE 904 IN MINT.asm
HEX:                06C6 DEFINED AT LINE 916 IN MINT.asm
                    > USED AT LINE 657 IN MINT.asm
HEX1:               06CA DEFINED AT LINE 919 IN MINT.asm
                    > USED AT LINE 936 IN MINT.asm
HEX2:               06D2 DEFINED AT LINE 925 IN MINT.asm
                    > USED AT LINE 923 IN MINT.asm
MUL:                06E4 DEFINED AT LINE 938 IN MINT.asm
                    > USED AT LINE 764 IN MINT.asm
MUL1:               06ED DEFINED AT LINE 944 IN MINT.asm
                    > USED AT LINE 954 IN MINT.asm
MUL2:               06F8 DEFINED AT LINE 952 IN MINT.asm
                    > USED AT LINE 948 IN MINT.asm
                    > USED AT LINE 950 IN MINT.asm
ALTCODEPAGE:        0700 DEFINED AT LINE 963 IN MINT.asm
BREAK_:             0700 DEFINED AT LINE 965 IN MINT.asm
BREAK1:             0707 DEFINED AT LINE 971 IN MINT.asm
                    > USED AT LINE 968 IN MINT.asm
CARRDEF_:           0710 DEFINED AT LINE 977 IN MINT.asm
CFETCH_:            0715 DEFINED AT LINE 981 IN MINT.asm
ANOP_:              0719 DEFINED AT LINE 985 IN MINT.asm
CHARCODE_:          071B DEFINED AT LINE 988 IN MINT.asm
COMMENT_:           0723 DEFINED AT LINE 996 IN MINT.asm
CSTORE_:            0725 DEFINED AT LINE 999 IN MINT.asm
DEPTH_:             072B DEFINED AT LINE 1006 IN MINT.asm
EMIT_:              073A DEFINED AT LINE 1016 IN MINT.asm
IFTE_:              0741 DEFINED AT LINE 1022 IN MINT.asm
IFTE1:              074A DEFINED AT LINE 1028 IN MINT.asm
                    > USED AT LINE 1025 IN MINT.asm
EXEC_:              0753 DEFINED AT LINE 1034 IN MINT.asm
EXEC1:              0758 DEFINED AT LINE 1037 IN MINT.asm
                    > USED AT LINE 1035 IN MINT.asm
GO_:                075C DEFINED AT LINE 1043 IN MINT.asm
ENDGROUP_:          0767 DEFINED AT LINE 1051 IN MINT.asm
GROUP_:             076F DEFINED AT LINE 1056 IN MINT.asm
SYSVAR_:            0789 DEFINED AT LINE 1070 IN MINT.asm
I_:                 078E DEFINED AT LINE 1074 IN MINT.asm
INCR_:              0794 DEFINED AT LINE 1080 IN MINT.asm
INPORT_:            079F DEFINED AT LINE 1092 IN MINT.asm
J_:                 07A6 DEFINED AT LINE 1098 IN MINT.asm
KEY_:               07B1 DEFINED AT LINE 1107 IN MINT.asm
NEWLN_:             07BA DEFINED AT LINE 1114 IN MINT.asm
OUTPORT_:           07BF DEFINED AT LINE 1118 IN MINT.asm
ROT_:               07C5 DEFINED AT LINE 1124 IN MINT.asm
STRDEF_:            07CB DEFINED AT LINE 1131 IN MINT.asm
TYPESTR_:           07CE DEFINED AT LINE 1134 IN MINT.asm
PRINTSTK_:          07D5 DEFINED AT LINE 1140 IN MINT.asm
PRINTSTK:           07D5 DEFINED AT LINE 1141 IN MINT.asm
EDITDEF_:           07EC DEFINED AT LINE 1147 IN MINT.asm
EDITDEF:            07EC DEFINED AT LINE 1153 IN MINT.asm
EDITDEF1:           080C DEFINED AT LINE 1173 IN MINT.asm
                    > USED AT LINE 1179 IN MINT.asm
EDITDEF2:           080D DEFINED AT LINE 1175 IN MINT.asm
                    > USED AT LINE 1172 IN MINT.asm
EDITDEF3:           0815 DEFINED AT LINE 1180 IN MINT.asm
                    > USED AT LINE 1167 IN MINT.asm
STRDEF:             0822 DEFINED AT LINE 1189 IN MINT.asm
                    > USED AT LINE 1132 IN MINT.asm
STRDEF1:            082A DEFINED AT LINE 1194 IN MINT.asm
                    > USED AT LINE 1201 IN MINT.asm
STRDEF2:            082C DEFINED AT LINE 1197 IN MINT.asm
                    > USED AT LINE 1193 IN MINT.asm
ALT:                0836 DEFINED AT LINE 1209 IN MINT.asm
                    > USED AT LINE 539 IN MINT.asm
GETREF:             0841 DEFINED AT LINE 1219 IN MINT.asm
                    > USED AT LINE 733 IN MINT.asm
NUM:                0849 DEFINED AT LINE 1225 IN MINT.asm
                    > USED AT LINE 663 IN MINT.asm
NUM1:               084E DEFINED AT LINE 1229 IN MINT.asm
                    > USED AT LINE 1248 IN MINT.asm
NUM2:               0868 DEFINED AT LINE 1249 IN MINT.asm
                    > USED AT LINE 927 IN MINT.asm
                    > USED AT LINE 929 IN MINT.asm
                    > USED AT LINE 1240 IN MINT.asm
                    > USED AT LINE 1242 IN MINT.asm
CRLF:               086C DEFINED AT LINE 1259 IN MINT.asm
                    > USED AT LINE 144 IN MINT.asm
                    > USED AT LINE 1115 IN MINT.asm
LOOKUPDEF:          0873 DEFINED AT LINE 1264 IN MINT.asm
                    > USED AT LINE 873 IN MINT.asm
                    > USED AT LINE 1222 IN MINT.asm
LOOKUPDEF1:         087A DEFINED AT LINE 1268 IN MINT.asm
                    > USED AT LINE 601 IN MINT.asm
LOOKUPDEF2:         087C DEFINED AT LINE 1270 IN MINT.asm
                    > USED AT LINE 1267 IN MINT.asm
PRINTSTR:           0887 DEFINED AT LINE 1280 IN MINT.asm
                    > USED AT LINE 35 IN MINT.asm
                    > USED AT LINE 246 IN MINT.asm
                    > USED AT LINE 1260 IN MINT.asm
PRINTSTR1:          088E DEFINED AT LINE 1286 IN MINT.asm
                    > USED AT LINE 1137 IN MINT.asm
                    > USED AT LINE 1282 IN MINT.asm
                    > USED AT LINE 1292 IN MINT.asm
PRINTDEC:           0897 DEFINED AT LINE 1294 IN MINT.asm
                    > USED AT LINE 617 IN MINT.asm
PRINTDEC1:          08B0 DEFINED AT LINE 1304 IN MINT.asm
                    > USED AT LINE 1296 IN MINT.asm
                    > USED AT LINE 1298 IN MINT.asm
                    > USED AT LINE 1300 IN MINT.asm
                    > USED AT LINE 1302 IN MINT.asm
PRINTDEC2:          08B2 DEFINED AT LINE 1306 IN MINT.asm
                    > USED AT LINE 1309 IN MINT.asm
PRINTHEX:           08BB DEFINED AT LINE 1313 IN MINT.asm
                    > USED AT LINE 613 IN MINT.asm
PRINTHEX2:          08C4 DEFINED AT LINE 1320 IN MINT.asm
                    > USED AT LINE 1315 IN MINT.asm
                    > USED AT LINE 1317 IN MINT.asm
PRINTHEX3:          08CD DEFINED AT LINE 1329 IN MINT.asm
                    > USED AT LINE 1326 IN MINT.asm
RPUSH:              08D8 DEFINED AT LINE 1337 IN MINT.asm
                    > USED AT LINE 190 IN MINT.asm
                    > USED AT LINE 588 IN MINT.asm
                    > USED AT LINE 599 IN MINT.asm
                    > USED AT LINE 1030 IN MINT.asm
                    > USED AT LINE 1045 IN MINT.asm
                    > USED AT LINE 1058 IN MINT.asm
RPOP:               08E3 DEFINED AT LINE 1344 IN MINT.asm
                    > USED AT LINE 644 IN MINT.asm
                    > USED AT LINE 673 IN MINT.asm
                    > USED AT LINE 825 IN MINT.asm
                    > USED AT LINE 1052 IN MINT.asm
WRITECHAR:          08EE DEFINED AT LINE 1351 IN MINT.asm
                    > USED AT LINE 1169 IN MINT.asm
                    > USED AT LINE 1171 IN MINT.asm
                    > USED AT LINE 1177 IN MINT.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
DSTACK:             1880 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 33 IN MINT.asm
                    > USED AT LINE 43 IN MINT.asm
                    > USED AT LINE 634 IN MINT.asm
                    > USED AT LINE 637 IN MINT.asm
                    > USED AT LINE 1011 IN MINT.asm
RSTACK:             1900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 66 IN MINT.asm
TIB:                1900 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 95 IN MINT.asm
                    > USED AT LINE 127 IN MINT.asm
                    > USED AT LINE 136 IN MINT.asm
                    > USED AT LINE 153 IN MINT.asm
                    > USED AT LINE 1166 IN MINT.asm
                    > USED AT LINE 1181 IN MINT.asm
MINTVARS:           1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 22 IN MINT.asm
                    > USED AT LINE 23 IN MINT.asm
SYSVARS:            1A00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 23 IN MINT.asm
                    > USED AT LINE 54 IN MINT.asm
VS0:                1A00 DEFINED AT LINE 16 IN ram.asm
VBASE16:            1A02 DEFINED AT LINE 17 IN ram.asm
VTIBPTR:            1A04 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 72 IN MINT.asm
                    > USED AT LINE 81 IN MINT.asm
                    > USED AT LINE 89 IN MINT.asm
                    > USED AT LINE 152 IN MINT.asm
                    > USED AT LINE 1185 IN MINT.asm
VDEFS:              1A06 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 1053 IN MINT.asm
                    > USED AT LINE 1057 IN MINT.asm
                    > USED AT LINE 1067 IN MINT.asm
                    > USED AT LINE 1157 IN MINT.asm
                    > USED AT LINE 1272 IN MINT.asm
VEDITED:            1A08 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1266 IN MINT.asm
VHEAPPTR:           1A0E DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 197 IN MINT.asm
                    > USED AT LINE 207 IN MINT.asm
                    > USED AT LINE 587 IN MINT.asm
                    > USED AT LINE 828 IN MINT.asm
                    > USED AT LINE 875 IN MINT.asm
                    > USED AT LINE 888 IN MINT.asm
                    > USED AT LINE 1191 IN MINT.asm
VNESTING:           1A34 DEFINED AT LINE 43 IN ram.asm
VBYTEMODE:          1A36 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 199 IN MINT.asm
                    > USED AT LINE 586 IN MINT.asm
                    > USED AT LINE 831 IN MINT.asm
TBPTR:              1A68 DEFINED AT LINE 46 IN ram.asm
RST08:              1A6A DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1A6C DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1A6E DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1A70 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1A72 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1A74 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1A76 DEFINED AT LINE 54 IN ram.asm
INTVEC:             1A78 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1A7A DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1A7C DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1A7E DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
VARS:               1A80 DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 22 IN MINT.asm
DEFS:               1AC0 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 46 IN MINT.asm
                    > USED AT LINE 58 IN MINT.asm
                    > USED AT LINE 1065 IN MINT.asm
HEAP:               1C00 DEFINED AT LINE 72 IN ram.asm
                    > USED AT LINE 50 IN MINT.asm
