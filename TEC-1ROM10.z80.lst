0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   ;TODO??????????????????????????????????????????????????????????????
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 6A 1A               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 6C 1A               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 6E 1A               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 70 1A               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 72 1A               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 74 1A               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 78 1A               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 7A 1A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 7C 1A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 7E 1A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 6A 1A               LD   (RST08),HL   
0094   22 6C 1A               LD   (RST10),HL   
0097   22 6E 1A               LD   (RST18),HL   
009A   22 70 1A               LD   (RST20),HL   
009D   22 72 1A               LD   (RST28),HL   
00A0   22 74 1A               LD   (RST30),HL   
00A3   22 78 1A               LD   (INTVEC),HL   
00A6   22 7A 1A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 7C 1A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 7E 1A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 80 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MINT Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                DSIZE:    EQU   $80   
00C6                RSIZE:    EQU   $80   
00C6                TIBSIZE:   EQU   $100   
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                NUMGRPS:   EQU   5   
00C6                GRPSIZE:   EQU   $40   
00C6                VARSOFS:   EQU   ((VARS - mintVars)/2) - "a"   
00C6                SYSVARSOFS:   EQU   ((sysVars - mintVars)/2) -"a"   
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   
0180                START:       
0180   31 80 18               LD   SP,DSTACK   
0183   CD A8 01               CALL   initialize   
0186   CD 1F 06               CALL   printStr   
0189   4D 49 4E 54 20 56 31 2E 31 0D 0A 00 .CSTR   "MINT V1.1\r\n"   
0195   C3 E3 01               JP   interpret   
0198                             ; ***********************************************************************
0198                             ; Initial values for user mintVars		
0198                             ; ***********************************************************************		
0198                ISYSVARS:      
0198   80 18                  DW   dStack   ; a vS0
019A   00 00                  DW   FALSE   ; b vBase16
019C   00 00                  DW   0   ; c vTIBPtr
019E   C0 1A                  DW   DEFS   ; d vDEFS
01A0   00 00                  DW   0   ; e vEdited the last command to be edited
01A2   00 00                  DW   0   ; f
01A4   00 00                  DW   0   ; g
01A6   00 1C                  DW   HEAP   ; h vHeapPtr
01A8                INITIALIZE:      
01A8   21 98 01               LD   HL,iSysVars   
01AB   11 00 1A               LD   DE,sysVars   
01AE   01 10 00               LD   BC,8 * 2   
01B1   ED B0                  LDIR      
01B3   21 C0 1A               LD   HL,DEFS   
01B6   06 A0                  LD   B,GRPSIZE/2 * NUMGRPS   
01B8                INIT1:       
01B8   36 61                  LD   (HL),lsb(empty_)   
01BA   23                     INC   HL   
01BB   36 02                  LD   (HL),msb(empty_)   
01BD   23                     INC   HL   
01BE   10 F8                  DJNZ   init1   
01C0   D9                     EXX      
01C1   11 00 19               LD   DE,RSTACK   
01C4   D9                     EXX      
01C5   FD 21 43 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
01C9   C9                     RET      
01CA                MACRO:       ; 25
01CA   ED 43 04 1A            LD   (vTIBPtr),BC   
01CE   21 80 03               LD   HL,ctrlCodes   
01D1   85                     ADD   A,L   
01D2   6F                     LD   L,A   
01D3   5E                     LD   E,(HL)   
01D4   16 02                  LD   D,msb(macros)   
01D6   D5                     PUSH   DE   
01D7   CD 3B 06               CALL   ENTER   
01DA   5C 47 00               .CSTR   "\\G"   
01DD   ED 4B 04 1A            LD   BC,(vTIBPtr)   
01E1   18 0A                  JR   interpret2   
01E3                INTERPRET:      
01E3   CD 16 06               CALL   prompt   
01E6   01 00 00               LD   BC,0   ; load BC with offset into TIB
01E9   ED 43 04 1A            LD   (vTIBPtr),BC   
01ED                INTERPRET2:      ; calc nesting (a macro might have changed it)
01ED   D5                     PUSH   DE   ; preserve TOS
01EE   1E 00                  LD   E,0   ; initilize nesting value
01F0   C5                     PUSH   BC   ; save offset into TIB,
01F1                             ; BC is also the count of chars in TIB
01F1   21 00 19               LD   HL,TIB   ; HL is start of TIB
01F4   18 06                  JR   interpret4   
01F6                INTERPRET3:      
01F6   7E                     LD   A,(HL)   ; A = char in TIB
01F7   23                     INC   HL   ; inc pointer into TIB
01F8   0B                     DEC   BC   ; dec count of chars in TIB
01F9   CD 81 06               CALL   nesting   ; update nesting value
01FC                INTERPRET4:      
01FC   79                     LD   A,C   ; is count zero?
01FD   B0                     OR   B   
01FE   20 F6                  JR   NZ,interpret3   ; if not loop
0200   C1                     POP   BC   ; restore offset into TIB
0201                             ; *******************************************************************
0201                             ; Wait for a character from the serial input (keyboard)
0201                             ; and store it in the text buffer. Keep accepting characters,
0201                             ; increasing the instruction pointer BC - until a newline received.
0201                             ; *******************************************************************
0201                WAITCHAR:      
0201   CD 81 00               CALL   getchar   ; loop around waiting for character
0204   FE 20                  CP   $20   
0206   30 0C                  JR   NC,waitchar1   
0208   FE 00                  CP   $0   ; is it end of string?
020A   28 2C                  JR   Z,waitchar4   
020C   FE 0D                  CP   "\r"   ; carriage return?
020E   28 12                  JR   Z,waitchar3   
0210   16 00                  LD   D,0   
0212   18 B6                  JR   macro   
0214                WAITCHAR1:      
0214   21 00 19               LD   HL,TIB   
0217   09                     ADD   HL,BC   
0218   77                     LD   (HL),A   ; store the character in textbuf
0219   03                     INC   BC   
021A   CD 85 00               CALL   putchar   ; echo character to screen
021D   CD 81 06               CALL   nesting   
0220   18 DF                  JR   waitchar   ; wait for next character
0222                WAITCHAR3:      
0222   21 00 19               LD   HL,TIB   
0225   09                     ADD   HL,BC   
0226   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
0228   23                     INC   HL   
0229   36 0A                  LD   (HL),"\n"   
022B   23                     INC   HL   
022C   03                     INC   BC   
022D   03                     INC   BC   
022E   CD 0F 06               CALL   crlf   ; echo character to screen
0231   7B                     LD   A,E   ; if zero nesting append an ETX after \r
0232   B7                     OR   A   
0233   20 CC                  JR   NZ,waitchar   
0235   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
0237   03                     INC   BC   
0238                WAITCHAR4:      
0238   D1                     POP   DE   ; restore TOS
0239   ED 43 04 1A            LD   (vTIBPtr),BC   
023D   D9                     EXX      
023E   01 00 19               LD   BC,TIB   ; Instructions stored on heap at address HERE
0241   0B                     DEC   BC   
0242   D9                     EXX      
0243                             ; Drop into the NEXT and dispatch routines
0243                             ; ********************************************************************************
0243                             ; 
0243                             ; Dispatch Routine.
0243                             ; 
0243                             ; Get the next character and form a 1 byte jump address
0243                             ; 
0243                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
0243                             ; jump to the selected function.
0243                             ; 
0243                             ; Individual handler routines will deal with each category:
0243                             ; 
0243                             ; 1. Detect characters A-Z and jump to the User Command handler routine
0243                             ; 
0243                             ; 2. Detect characters a-z and jump to the variable handler routine
0243                             ; 
0243                             ; 3. All other characters are punctuation and cause a jump to the associated
0243                             ; primitive code.
0243                             ; 
0243                             ; Instruction Pointer IP BC is incremented
0243                             ; 
0243                             ; *********************************************************************************
0243                NEXT:        ; 9
0243   D9                     EXX      
0244   03                     INC   BC   ; 6t    Increment the IP
0245   0A                     LD   A,(BC)   ; 7t    Get the next character and dispatch
0246   D9                     EXX      
0247   6F                     LD   L,A   ; 4t    Index into table
0248   26 03                  LD   H,msb(opcodes)   ; 7t    Start address of jump table
024A   6E                     LD   L,(HL)   ; 7t    get low jump address
024B   26 04                  LD   H,msb(codePage)   ; 7t    Load H with the 1st page address
024D   E9                     JP   (HL)   ; 4t    Jump to routine
024E                             ; ARRAY compilation routine
024E                COMPNEXT:      ; 19
024E   2A 0E 1A               LD   HL,(vHeapPtr)   ; load heap ptr
0251   73                     LD   (HL),E   ; store lsb
0252   3A 36 1A               LD   A,(vByteMode)   
0255   23                     INC   HL   
0256   B7                     OR   A   
0257   20 02                  JR   NZ,compNext1   
0259   72                     LD   (HL),D   
025A   23                     INC   HL   
025B                COMPNEXT1:      
025B   D1                     POP   DE   
025C   22 0E 1A               LD   (vHeapPtr),HL   ; save heap ptr
025F   18 E2                  JR   NEXT   
0261                             ; **************************************************************************
0261                             ; Macros must be written in Mint and end with ;
0261                             ; this code must not span pages
0261                             ; **************************************************************************
0261                MACROS:      
0261                EMPTY_:      
0261   3B                     DB   ";"   
0262                BACKSP_:      
0262   3B                     DB   ";"   
0263                EDIT_:       
0263   3B                     DB   ";"   
0264                REEDIT_:      
0264   3B                     DB   ";"   
0265                LIST_:       
0265   3B                     DB   ";"   
0266                PRINTSTACK_:      
0266   3B                     DB   ";"   
0267                TOGGLEBASE_:      
0267   3B                     DB   ";"   
0268                             ; **************************************************************************
0268                             ; Page 2  Jump Tables
0268                             ; **************************************************************************
0268                          ALIGN   $100   
0300                OPCODES:      
0300                             ; ***********************************************************************
0300                             ; Initial values for user mintVars		
0300                             ; ***********************************************************************		
0300   77                     DB   lsb(exit_)   ;   NUL
0301   89                     DB   lsb(nop_)   ;   SOH
0302   89                     DB   lsb(nop_)   ;   STX
0303   6A                     DB   lsb(etx_)   ;   ETX
0304   89                     DB   lsb(nop_)   ;   EOT
0305   89                     DB   lsb(nop_)   ;   ENQ
0306   89                     DB   lsb(nop_)   ;   ACK
0307   89                     DB   lsb(nop_)   ;   BEL
0308   89                     DB   lsb(nop_)   ;   BS
0309   89                     DB   lsb(nop_)   ;   TAB
030A   89                     DB   lsb(nop_)   ;   LF
030B   89                     DB   lsb(nop_)   ;   VT
030C   89                     DB   lsb(nop_)   ;   FF
030D   89                     DB   lsb(nop_)   ;   CR
030E   89                     DB   lsb(nop_)   ;   SO
030F   89                     DB   lsb(nop_)   ;   SI
0310   89                     DB   lsb(nop_)   ;   DLE
0311   89                     DB   lsb(nop_)   ;   DC1
0312   89                     DB   lsb(nop_)   ;   DC2
0313   89                     DB   lsb(nop_)   ;   DC3
0314   89                     DB   lsb(nop_)   ;   DC4
0315   89                     DB   lsb(nop_)   ;   NAK
0316   89                     DB   lsb(nop_)   ;   SYN
0317   89                     DB   lsb(nop_)   ;   ETB
0318   89                     DB   lsb(nop_)   ;   CAN
0319   89                     DB   lsb(nop_)   ;   EM
031A   89                     DB   lsb(nop_)   ;   SUB
031B   89                     DB   lsb(nop_)   ;   ESC
031C   89                     DB   lsb(nop_)   ;   FS
031D   89                     DB   lsb(nop_)   ;   GS
031E   89                     DB   lsb(nop_)   ;   RS
031F   89                     DB   lsb(nop_)   ;   US
0320   89                     DB   lsb(nop_)   ;   SP
0321   9E                     DB   lsb(store_)   ;   !
0322   67                     DB   lsb(dup_)   ;   "
0323   87                     DB   lsb(hex_)   ;    #
0324   A6                     DB   lsb(swap_)   ;    $
0325   8F                     DB   lsb(over_)   ;    %
0326   0D                     DB   lsb(and_)   ;    &
0327   64                     DB   lsb(drop_)   ;    '
0328   49                     DB   lsb(begin_)   ;    (
0329   EE                     DB   lsb(again_)   ;    )
032A   EB                     DB   lsb(mul_)   ;    *
032B   2D                     DB   lsb(add_)   ;    +
032C   60                     DB   lsb(hdot_)   ;    ,
032D   B4                     DB   lsb(sub_)   ;    -
032E   62                     DB   lsb(dot_)   ;    .
032F   E8                     DB   lsb(div_)   ;    /
0330   8C                     DB   lsb(num_)   ;    0
0331   8C                     DB   lsb(num_)   ;    1
0332   8C                     DB   lsb(num_)   ;    2
0333   8C                     DB   lsb(num_)   ;    3
0334   8C                     DB   lsb(num_)   ;    4
0335   8C                     DB   lsb(num_)   ;    5
0336   8C                     DB   lsb(num_)   ;    6
0337   8C                     DB   lsb(num_)   ;    7
0338   8C                     DB   lsb(num_)   ;    8
0339   8C                     DB   lsb(num_)   ;    9
033A   5D                     DB   lsb(def_)   ;    :
033B   95                     DB   lsb(ret_)   ;    ;
033C   D2                     DB   lsb(lt_)   ;    <
033D   BB                     DB   lsb(eq_)   ;    =
033E   CE                     DB   lsb(gt_)   ;    >
033F   CC                     DB   lsb(getRef_)   ;    ?
0340   81                     DB   lsb(fetch_)   ;    @
0341   4C                     DB   lsb(call_)   ;    A
0342   4C                     DB   lsb(call_)   ;    B
0343   4C                     DB   lsb(call_)   ;    C
0344   4C                     DB   lsb(call_)   ;    D
0345   4C                     DB   lsb(call_)   ;    E
0346   4C                     DB   lsb(call_)   ;    F
0347   4C                     DB   lsb(call_)   ;    G
0348   4C                     DB   lsb(call_)   ;    H
0349   4C                     DB   lsb(call_)   ;    I
034A   4C                     DB   lsb(call_)   ;    J
034B   4C                     DB   lsb(call_)   ;    K
034C   4C                     DB   lsb(call_)   ;    L
034D   4C                     DB   lsb(call_)   ;    M
034E   4C                     DB   lsb(call_)   ;    N
034F   4C                     DB   lsb(call_)   ;    O
0350   4C                     DB   lsb(call_)   ;    P
0351   4C                     DB   lsb(call_)   ;    Q
0352   4C                     DB   lsb(call_)   ;    R
0353   4C                     DB   lsb(call_)   ;    S
0354   4C                     DB   lsb(call_)   ;    T
0355   4C                     DB   lsb(call_)   ;    U
0356   4C                     DB   lsb(call_)   ;    V
0357   4C                     DB   lsb(call_)   ;    W
0358   4C                     DB   lsb(call_)   ;    X
0359   4C                     DB   lsb(call_)   ;    Y
035A   4C                     DB   lsb(call_)   ;    Z
035B   32                     DB   lsb(arrDef_)   ;    [
035C   00                     DB   lsb(alt_)   ;    \
035D   46                     DB   lsb(arrEnd_)   ;    ]
035E   24                     DB   lsb(xor_)   ;    ^
035F   AF                     DB   lsb(neg_)   ;    _
0360   F1                     DB   lsb(str_)   ;    `
0361   DA                     DB   lsb(var_)   ;    a
0362   DA                     DB   lsb(var_)   ;    b
0363   DA                     DB   lsb(var_)   ;    c
0364   DA                     DB   lsb(var_)   ;    d
0365   DA                     DB   lsb(var_)   ;    e
0366   DA                     DB   lsb(var_)   ;    f
0367   DA                     DB   lsb(var_)   ;    g
0368   DA                     DB   lsb(var_)   ;    h
0369   DA                     DB   lsb(var_)   ;    i
036A   DA                     DB   lsb(var_)   ;    j
036B   DA                     DB   lsb(var_)   ;    k
036C   DA                     DB   lsb(var_)   ;    l
036D   DA                     DB   lsb(var_)   ;    m
036E   DA                     DB   lsb(var_)   ;    n
036F   DA                     DB   lsb(var_)   ;    o
0370   DA                     DB   lsb(var_)   ;    p
0371   DA                     DB   lsb(var_)   ;    q
0372   DA                     DB   lsb(var_)   ;    r
0373   DA                     DB   lsb(var_)   ;    s
0374   DA                     DB   lsb(var_)   ;    t
0375   DA                     DB   lsb(var_)   ;    u
0376   DA                     DB   lsb(var_)   ;    v
0377   DA                     DB   lsb(var_)   ;    w
0378   DA                     DB   lsb(var_)   ;    x
0379   DA                     DB   lsb(var_)   ;    y
037A   DA                     DB   lsb(var_)   ;    z
037B   AB                     DB   lsb(shl_)   ;    {
037C   16                     DB   lsb(or_)   ;    |
037D   AD                     DB   lsb(shr_)   ;    }
037E   1F                     DB   lsb(inv_)   ;    ~
037F   89                     DB   lsb(nop_)   ;    backspace
0380                             ; ***********************************************************************
0380                             ; Alternate function codes		
0380                             ; ***********************************************************************		
0380                CTRLCODES:      
0380                ALTCODES:      
0380   61                     DB   lsb(empty_)   ; NUL ^@
0381   61                     DB   lsb(empty_)   ; SOH ^A
0382   67                     DB   lsb(toggleBase_)   ; STX ^B
0383   61                     DB   lsb(empty_)   ; ETX ^C
0384   61                     DB   lsb(empty_)   ; EOT ^D
0385   63                     DB   lsb(edit_)   ; ENQ ^E
0386   61                     DB   lsb(empty_)   ; ACK ^F
0387   61                     DB   lsb(empty_)   ; BEL ^G
0388   62                     DB   lsb(backsp_)   ; BS  ^H
0389   61                     DB   lsb(empty_)   ; TAB ^I
038A   64                     DB   lsb(reedit_)   ; LF  ^J
038B   61                     DB   lsb(empty_)   ; VT  ^K
038C   65                     DB   lsb(list_)   ; FF  ^L
038D   61                     DB   lsb(empty_)   ; CR  ^M
038E   61                     DB   lsb(empty_)   ; SO  ^N
038F   61                     DB   lsb(empty_)   ; SI  ^O
0390   66                     DB   lsb(printStack_)   ; DLE ^P
0391   61                     DB   lsb(empty_)   ; DC1 ^Q
0392   61                     DB   lsb(empty_)   ; DC2 ^R
0393   61                     DB   lsb(empty_)   ; DC3 ^S
0394   61                     DB   lsb(empty_)   ; DC4 ^T
0395   61                     DB   lsb(empty_)   ; NAK ^U
0396   61                     DB   lsb(empty_)   ; SYN ^V
0397   61                     DB   lsb(empty_)   ; ETB ^W
0398   61                     DB   lsb(empty_)   ; CAN ^X
0399   61                     DB   lsb(empty_)   ; EM  ^Y
039A   61                     DB   lsb(empty_)   ; SUB ^Z
039B   61                     DB   lsb(empty_)   ; ESC ^[
039C   61                     DB   lsb(empty_)   ; FS  ^\
039D   61                     DB   lsb(empty_)   ; GS  ^]
039E   61                     DB   lsb(empty_)   ; RS  ^^
039F   61                     DB   lsb(empty_)   ; US  ^_)
03A0   09                     DB   lsb(aNop_)   ; SP  ^`
03A1   17                     DB   lsb(cStore_)   ;    !
03A2   09                     DB   lsb(aNop_)   ;    "
03A3   09                     DB   lsb(aNop_)   ;    #
03A4   09                     DB   lsb(aNop_)   ;    $  ( -- adr ) text input ptr
03A5   09                     DB   lsb(aNop_)   ;    %
03A6   09                     DB   lsb(aNop_)   ;    &
03A7   09                     DB   lsb(aNop_)   ;    '
03A8   21                     DB   lsb(ifte_)   ;    (  ( b -- )
03A9   09                     DB   lsb(aNop_)   ;    )
03AA   09                     DB   lsb(aNop_)   ;    *
03AB   4D                     DB   lsb(incr_)   ;    +  ( adr -- ) decrements variable at address
03AC   09                     DB   lsb(aNop_)   ;    ,
03AD   09                     DB   lsb(aNop_)   ;    -
03AE   09                     DB   lsb(aNop_)   ;    .
03AF   09                     DB   lsb(aNop_)   ;    /
03B0   09                     DB   lsb(aNop_)   ;    0
03B1   09                     DB   lsb(aNop_)   ;    1
03B2   09                     DB   lsb(aNop_)   ;    2
03B3   09                     DB   lsb(aNop_)   ;    3
03B4   09                     DB   lsb(aNop_)   ;    4
03B5   09                     DB   lsb(aNop_)   ;    5
03B6   09                     DB   lsb(aNop_)   ;    6
03B7   09                     DB   lsb(aNop_)   ;    7
03B8   09                     DB   lsb(aNop_)   ;    8
03B9   09                     DB   lsb(aNop_)   ;    9
03BA   09                     DB   lsb(aNop_)   ;    :  start defining a macro
03BB   09                     DB   lsb(aNop_)   ;    ;
03BC   09                     DB   lsb(aNop_)   ;    <
03BD   09                     DB   lsb(aNop_)   ;    =
03BE   09                     DB   lsb(aNop_)   ;    >
03BF   09                     DB   lsb(aNop_)   ;    ?
03C0   05                     DB   lsb(cFetch_)   ;    @
03C1   09                     DB   lsb(aNop_)   ;    A
03C2   6B                     DB   lsb(break_)   ;    B
03C3   89                     DB   lsb(nop_)   ;    C
03C4   1D                     DB   lsb(depth_)   ;    D  ( -- val ) depth of data stack
03C5   1F                     DB   lsb(emit_)   ;    E   ( val -- ) emits a char to output
03C6   09                     DB   lsb(aNop_)   ;    F
03C7   2C                     DB   lsb(go_)   ;    G   ( -- ? ) execute mint definition
03C8   09                     DB   lsb(aNop_)   ;    H
03C9   58                     DB   lsb(inPort_)   ;    I  ( port -- val )
03CA   09                     DB   lsb(aNop_)   ;    J
03CB   5F                     DB   lsb(key_)   ;    K  ( -- val )  read a char from input
03CC   09                     DB   lsb(aNop_)   ;    L
03CD   09                     DB   lsb(aNop_)   ;    M
03CE   61                     DB   lsb(newln_)   ;    N   ; prints a newline to output
03CF   63                     DB   lsb(outPort_)   ;    O  ( val port -- )
03D0   6D                     DB   lsb(printStk_)   ;    P  ( -- ) non-destructively prints stack
03D1   09                     DB   lsb(aNop_)   ;    Q  quits from Mint REPL
03D2   65                     DB   lsb(rot_)   ;    R  ( a b c -- b c a )
03D3   09                     DB   lsb(aNop_)   ;    S
03D4   09                     DB   lsb(aNop_)   ;    T
03D5   09                     DB   lsb(aNop_)   ;    U
03D6   09                     DB   lsb(aNop_)   ;    V
03D7   09                     DB   lsb(aNop_)   ;    W   ; ( b -- ) if false, skip to end of loop
03D8   23                     DB   lsb(exec_)   ;    X
03D9   09                     DB   lsb(aNop_)   ;    Y
03DA   6F                     DB   lsb(editDef_)   ;    Z
03DB   00                     DB   lsb(cArrDef_)   ;    [
03DC   15                     DB   lsb(comment_)   ;    \  comment text, skips reading until end of line
03DD   09                     DB   lsb(aNop_)   ;    ]
03DE   0B                     DB   lsb(charCode_)   ;    ^
03DF   09                     DB   lsb(aNop_)   ;    _)  ( n -- b ) returns true if -ve
03E0   09                     DB   lsb(aNop_)   ;    `
03E1   3C                     DB   lsb(sysVar_)   ;    a  ; start of data stack variable
03E2   3C                     DB   lsb(sysVar_)   ;    b  ; base16 variable
03E3   3C                     DB   lsb(sysVar_)   ;    c  ; TIBPtr variable
03E4   3C                     DB   lsb(sysVar_)   ;    d
03E5   3C                     DB   lsb(sysVar_)   ;    e
03E6   3C                     DB   lsb(sysVar_)   ;    f
03E7   3C                     DB   lsb(sysVar_)   ;    g
03E8   3C                     DB   lsb(sysVar_)   ;    h  ; heap ptr variable
03E9   41                     DB   lsb(i_)   ;    i  ; returns index variable of current loop
03EA   5A                     DB   lsb(j_)   ;    j  ; returns index variable of outer loop
03EB   3C                     DB   lsb(sysVar_)   ;    k
03EC   3C                     DB   lsb(sysVar_)   ;    l
03ED   3C                     DB   lsb(sysVar_)   ;    m  ( a b -- c ) return the minimum value
03EE   3C                     DB   lsb(sysVar_)   ;    n
03EF   3C                     DB   lsb(sysVar_)   ;    o
03F0   3C                     DB   lsb(sysVar_)   ;    p
03F1   3C                     DB   lsb(sysVar_)   ;    q
03F2   3C                     DB   lsb(sysVar_)   ;    r
03F3   3C                     DB   lsb(sysVar_)   ;    s
03F4   3C                     DB   lsb(sysVar_)   ;    t
03F5   3C                     DB   lsb(sysVar_)   ;    u
03F6   3C                     DB   lsb(sysVar_)   ;    v
03F7   3C                     DB   lsb(sysVar_)   ;    w
03F8   3C                     DB   lsb(sysVar_)   ;    x
03F9   3C                     DB   lsb(sysVar_)   ;    y
03FA   3C                     DB   lsb(sysVar_)   ;    z
03FB   3A                     DB   lsb(group_)   ;    {
03FC   09                     DB   lsb(aNop_)   ;    |
03FD   38                     DB   lsb(endGroup_)   ;    }
03FE   09                     DB   lsb(aNop_)   ;    ~
03FF   09                     DB   lsb(aNop_)   ;    BS		
0400                             ; **********************************************************************			
0400                             ; code page primitive routines
0400                             ; **********************************************************************
0400                          ALIGN   $100   
0400                CODEPAGE:      
0400                ALT_:        
0400                ALT:         ;= 11
0400   D9                     EXX      
0401   03                     INC   BC   
0402   0A                     LD   A,(BC)   
0403   D9                     EXX      
0404   21 80 03               LD   HL,altCodes   
0407   85                     ADD   A,L   
0408   6F                     LD   L,A   
0409   6E                     LD   L,(HL)   
040A   26 05                  LD   H,msb(altCodePage)   
040C   E9                     JP   (HL)   
040D                AND_:        
040D   E1                     POP   HL   ; HL=NOS DE=TOS
040E   7B                     LD   A,E   
040F   A5                     AND   L   
0410   5F                     LD   E,A   
0411   7A                     LD   A,D   
0412   A4                     AND   H   
0413   57                     LD   D,A   
0414   FD E9                  JP   (IY)   
0416                OR_:         
0416   E1                     POP   HL   ; HL=NOS DE=TOS
0417   7B                     LD   A,E   
0418   B5                     OR   L   
0419   5F                     LD   E,A   
041A   7A                     LD   A,D   
041B   B4                     OR   H   
041C   57                     LD   D,A   
041D   FD E9                  JP   (IY)   
041F                INV_:        
041F   21 FF FF               LD   HL,$FFFF   
0422   18 01                  JR   xor1   
0424                XOR_:        
0424   E1                     POP   HL   ; HL=NOS DE=TOS
0425                XOR1:        
0425   7B                     LD   A,E   
0426   AD                     XOR   L   
0427   5F                     LD   E,A   
0428   7A                     LD   A,D   
0429   AA                     XOR   D   
042A   57                     LD   D,A   
042B   FD E9                  JP   (IY)   
042D                ADD_:        
042D   E1                     POP   HL   ; HL=NOS DE=TOS
042E   19                     ADD   HL,DE   ; NOS+TOS
042F   EB                     EX   DE,HL   
0430   FD E9                  JP   (IY)   
0432                ARRDEF_:      
0432                ARRDEF:      ;= 18
0432   3E 00                  LD   A,FALSE   
0434                ARRDEF1:      
0434   FD 21 4E 02            LD   IY,compNEXT   
0438   32 36 1A               LD   (vByteMode),A   
043B   D9                     EXX      
043C   2A 0E 1A               LD   HL,(vHeapPtr)   ; HL = heap ptr
043F   CD 2D 06               CALL   rpush   ; save start of array \[  \]
0442   D9                     EXX      
0443   C3 43 02               JP   NEXT   ; hardwired to NEXT
0446                ARREND_:      
0446   C3 A7 05               JP   arrEnd   
0449                BEGIN_:      
0449   C3 AF 06               JP   begin   
044C                CALL_:       
044C   D9                     EXX      
044D   60 69                  LD   HL,BC   
044F   CD 2D 06               CALL   rpush   ; save Instruction Pointer
0452   0A                     LD   A,(BC)   
0453   CD 4D 06               CALL   lookupDef1   
0456   4E                     LD   C,(HL)   
0457   23                     INC   HL   
0458   46                     LD   B,(HL)   
0459   0B                     DEC   BC   
045A   D9                     EXX      
045B   FD E9                  JP   (IY)   ; Execute code from User def
045D                DEF_:        
045D   C3 C8 05               JP   def   
0460                HDOT_:       ; print hexadecimal
0460   FD E9                  JP   (IY)   
0462                DOT_:        
0462   FD E9                  JP   (IY)   
0464                DROP_:       
0464   D1                     POP   DE   
0465   FD E9                  JP   (IY)   
0467                DUP_:        
0467   D5                     PUSH   DE   
0468   FD E9                  JP   (IY)   
046A                ETX_:        
046A                ETX:         
046A   21 80 E7               LD   HL,-DSTACK   
046D   39                     ADD   HL,SP   
046E   D2 74 04               JP   NC,etx1   
0471   31 80 18               LD   SP,DSTACK   
0474                ETX1:        
0474   C3 E3 01               JP   interpret   
0477                EXIT_:       
0477   D9                     EXX      
0478   03                     INC   BC   
0479   C5                     PUSH   BC   
047A   CD 34 06               CALL   rpop   
047D   44 4D                  LD   BC,HL   
047F   D9                     EXX      
0480   C9                     RET      
0481                FETCH_:      
0481   EB                     EX   DE,HL   
0482   5E                     LD   E,(HL)   
0483   23                     INC   HL   
0484   56                     LD   D,(HL)   
0485   FD E9                  JP   (IY)   
0487                HEX_:        
0487   FD E9                  JP   (IY)   
0489                NOP_:        
0489   C3 43 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
048C                NUM_:        
048C   C3 E6 05               JP   num   
048F                OVER_:       
048F   E1                     POP   HL   ; HL=NOS
0490   E5                     PUSH   HL   
0491   D5                     PUSH   DE   
0492   EB                     EX   DE,HL   
0493   FD E9                  JP   (IY)   
0495                RET_:        
0495   D9                     EXX      
0496   CD 34 06               CALL   rpop   ; Restore Instruction pointer
0499   44 4D                  LD   BC,HL   
049B   D9                     EXX      
049C   FD E9                  JP   (IY)   
049E                STORE_:      
049E   EB                     EX   DE,HL   ; HL = TOS
049F   D1                     POP   DE   ; DE = NOS
04A0   73                     LD   (HL),E   
04A1   23                     INC   HL   
04A2   72                     LD   (HL),D   
04A3   D1                     POP   DE   ; DE = TOS
04A4   FD E9                  JP   (IY)   
04A6                SWAP_:       
04A6   EB                     EX   DE,HL   
04A7   E3                     EX   (SP),HL   
04A8   EB                     EX   DE,HL   
04A9   FD E9                  JP   (IY)   
04AB                SHL_:        
04AB   FD E9                  JP   (IY)   
04AD                SHR_:        
04AD   FD E9                  JP   (IY)   
04AF                NEG_:        
04AF   21 00 00               LD   HL,0   
04B2   18 01                  JR   sub2   
04B4                SUB_:        
04B4                SUB1:        
04B4   E1                     POP   HL   
04B5                SUB2:        
04B5   B7                     OR   A   
04B6   ED 52                  SBC   HL,DE   
04B8   EB                     EX   DE,HL   
04B9   FD E9                  JP   (IY)   
04BB                EQ_:         
04BB   E1                     POP   HL   ; DE=TOS HL=NOS
04BC   B7                     OR   A   ; reset the carry flag
04BD   ED 52                  SBC   HL,DE   ; NOS-TOS if equal HL=0
04BF   EB                     EX   DE,HL   
04C0   28 05                  JR   Z,eq1   
04C2                EQ0:         ; if false
04C2   11 00 00               LD   DE,0   
04C5   FD E9                  JP   (IY)   
04C7                EQ1:         ; if true
04C7   11 01 00               LD   DE,1   
04CA   FD E9                  JP   (IY)   
04CC                GETREF_:      
04CC   FD E9                  JP   (IY)   
04CE                GT_:         
04CE   E1                     POP   HL   
04CF   EB                     EX   DE,HL   
04D0   18 01                  JR   lt1   
04D2                LT_:         
04D2   E1                     POP   HL   
04D3                LT1:         
04D3   B7                     OR   A   ; reset the carry flag
04D4   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04D6   38 EF                  JR   C,eq1   
04D8   18 E8                  JR   eq0   
04DA                VAR_:        
04DA   3E DF                  LD   A,varsOfs   
04DC                VAR1:        
04DC   D9                     EXX      
04DD   60                     LD   H,B   
04DE   69                     LD   L,C   
04DF   86                     ADD   A,(HL)   
04E0   87                     ADD   A,A   
04E1   D9                     EXX      
04E2   D5                     PUSH   DE   ; push TOS
04E3   5F                     LD   E,A   ; TOS = ptr to var
04E4   16 1A                  LD   D,msb(mintVars)   
04E6   FD E9                  JP   (IY)   
04E8                DIV_:        
04E8   C3 8A 05               JP   div   
04EB                MUL_:        
04EB   C3 71 05               JP   mul   
04EE                AGAIN_:      
04EE   C3 D8 06               JP   again   
04F1                STR_:        
04F1   FD E9                  JP   (IY)   
04F3                             ;*******************************************************************
04F3                             ; Code commands Commands continued
04F3                             ;*******************************************************************
04F3                             ; **************************************************************************
04F3                             ; Alt code primitives
04F3                             ; **************************************************************************
04F3                          ALIGN   $100   
0500                ALTCODEPAGE:      
0500                CARRDEF_:      
0500   3E 01                  LD   A,TRUE   
0502   C3 34 04               JP   arrDef1   
0505                CFETCH_:      
0505   EB                     EX   DE,HL   
0506   16 00                  LD   D,0   
0508   5E                     LD   E,(HL)   
0509                ANOP_:       
0509   FD E9                  JP   (IY)   
050B                CHARCODE_:      
050B   D9                     EXX      
050C   03                     INC   BC   
050D   0A                     LD   A,(BC)   
050E   D9                     EXX      
050F   D5                     PUSH   DE   
0510   16 00                  LD   D,0   
0512   5F                     LD   E,A   
0513   FD E9                  JP   (IY)   
0515                COMMENT_:      
0515   FD E9                  JP   (IY)   
0517                CSTORE_:      
0517   EB                     EX   DE,HL   
0518   D1                     POP   DE   
0519   73                     LD   (HL),E   
051A   D1                     POP   DE   
051B   FD E9                  JP   (IY)   
051D                DEPTH_:      
051D   FD E9                  JP   (IY)   
051F                EMIT_:       
051F   FD E9                  JP   (IY)   
0521                IFTE_:       
0521   FD E9                  JP   (IY)   
0523                EXEC_:       
0523   CD 28 05               CALL   exec1   
0526   FD E9                  JP   (IY)   
0528                EXEC1:       
0528   E1                     POP   HL   ; HL = RET address
0529   E3                     EX   (SP),HL   ; HL = NOS, (SP) = RET
052A   EB                     EX   DE,HL   ; HL = TOS, DE = NOS
052B   E9                     JP   (HL)   ; JP to machine code, RET will return to exec_
052C                GO_:         
052C   D5                     PUSH   DE   ; push TOS
052D   D9                     EXX      
052E   60 69                  LD   HL,BC   
0530   CD 2D 06               CALL   rpush   ; save Instruction Pointer
0533   C1                     POP   BC   ; pop TOS
0534   0B                     DEC   BC   ; decrement to just before
0535   D9                     EXX      
0536   FD E9                  JP   (IY)   ; Execute code from User def
0538                ENDGROUP_:      
0538   FD E9                  JP   (IY)   
053A                GROUP_:      
053A   FD E9                  JP   (IY)   
053C                SYSVAR_:      
053C   3E 9F                  LD   A,sysvarsOfs   
053E   C3 DC 04               JP   var1   
0541                I_:          
0541   21 00 00               LD   HL,0   ; loop stackframe offset
0544                I1:          
0544   D5                     PUSH   DE   ; push down TOS
0545   D9                     EXX      
0546   D5                     PUSH   DE   ; save RSP (loopVar)
0547   D9                     EXX      
0548   D1                     POP   DE   ; DE=RSP
0549   19                     ADD   HL,DE   ; HL=RSP+offset
054A   EB                     EX   DE,HL   ; TOS=RSP+offset
054B   FD E9                  JP   (IY)   
054D                INCR_:       
054D   E1                     POP   HL   ; DE=addr HL=incr
054E   EB                     EX   DE,HL   ; HL=addr DE=incr
054F   7B                     LD   A,E   
0550   86                     ADD   A,(HL)   
0551   77                     LD   (HL),A   
0552   23                     INC   HL   
0553   7A                     LD   A,D   
0554   8E                     ADC   A,(HL)   
0555   77                     LD   (HL),A   
0556   FD E9                  JP   (IY)   
0558                INPORT_:      
0558   FD E9                  JP   (IY)   
055A                J_:          
055A   21 06 00               LD   HL,6   
055D   18 E5                  JR   i1   
055F                KEY_:        
055F   FD E9                  JP   (IY)   
0561                NEWLN_:      
0561   FD E9                  JP   (IY)   
0563                OUTPORT_:      
0563   FD E9                  JP   (IY)   
0565                ROT_:        ; a b c -- b c a
0565   E1                     POP   HL   ; (SP)=a HL=b DE=c
0566   E3                     EX   (SP),HL   ; (SP)=b HL=a DE=c
0567   EB                     EX   DE,HL   ; (SP)=b HL=c DE=a
0568   E5                     PUSH   HL   
0569   FD E9                  JP   (IY)   
056B                BREAK_:      
056B   FD E9                  JP   (IY)   
056D                PRINTSTK_:      
056D   FD E9                  JP   (IY)   
056F                EDITDEF_:      
056F   FD E9                  JP   (IY)   
0571                             ;*******************************************************************
0571                             ; Alt Code commands Commands continued
0571                             ;*******************************************************************
0571                             ;*******************************************************************
0571                             ; Misc Commands continued
0571                             ;*******************************************************************
0571                MUL:         ; 19
0571   E1                     POP   HL   ; HL=NOS DE=TOS
0572   44                     LD   B,H   ; BC = 2nd value
0573   4D                     LD   C,L   
0574   21 00 00               LD   HL,0   
0577   3E 10                  LD   A,16   
0579                MUL1:        
0579   29                     ADD   HL,HL   
057A   CB 13                  RL   E   
057C   CB 12                  RL   D   
057E   30 04                  JR   NC,mul2   
0580   09                     ADD   HL,BC   
0581   30 01                  JR   NC,mul2   
0583   13                     INC   DE   
0584                MUL2:        
0584   3D                     DEC   A   
0585   20 F2                  JR   NZ,mul1   
0587   EB                     EX   DE,HL   
0588   FD E9                  JP   (IY)   
058A                DIV:         ;=
058A   C1                     POP   BC   ; BC=NOS DE=TOS
058B   21 00 00               LD   HL,0   ; zero the remainder
058E   3E 10                  LD   A,16   ; loop counter
0590                DIV_LOOP:      ; shift the bits from BC (numerator) into HL (accumulator)
0590   CB 21                  SLA   C   
0592   CB 10                  RL   B   
0594   ED 6A                  ADC   HL,HL   
0596   ED 52                  SBC   HL,DE   ; check if remainder >= denominator (HL>=DE)
0598   38 03                  JR   C,div_adjust   
059A   0C                     INC   C   
059B   18 01                  JR   div_done   
059D                DIV_ADJUST:      ; remainder is not >= denominator, so we have to add DE back to HL
059D   19                     ADD   HL,DE   
059E                DIV_DONE:      
059E   3D                     DEC   A   
059F   20 EF                  JR   NZ,div_loop   
05A1   50 59                  LD   DE,BC   ; result from BC to DE
05A3                DIV_END:      
05A3   D5                     PUSH   DE   ; push Result
05A4   EB                     EX   DE,HL   ; TOS=remainder
05A5   FD E9                  JP   (IY)   
05A7                             ; end a word array
05A7                ARREND:      ;=27
05A7   D9                     EXX      
05A8   CD 34 06               CALL   rpop   ; DE = start of array
05AB   E5                     PUSH   HL   
05AC   D9                     EXX      
05AD   EB                     EX   DE,HL   ; HL=TOS
05AE   E3                     EX   (SP),HL   ; (SP)=TOS HL=start of array
05AF   EB                     EX   DE,HL   ; DE=start of array
05B0   2A 0E 1A               LD   HL,(vHeapPtr)   ; HL = heap ptr
05B3   B7                     OR   A   
05B4   ED 52                  SBC   HL,DE   ; bytes on heap
05B6   3A 36 1A               LD   A,(vByteMode)   
05B9   B7                     OR   A   
05BA   20 04                  JR   NZ,arrEnd2   
05BC   CB 3C                  SRL   H   ; BC = m words
05BE   CB 1D                  RR   L   
05C0                ARREND2:      
05C0   D5                     PUSH   DE   ; (SP)=start of array
05C1   EB                     EX   DE,HL   ; DE=length
05C2   FD 21 43 02            LD   IY,NEXT   ; restore IY
05C6   FD E9                  JP   (IY)   ; hardwired to NEXT
05C8                DEF:         ; Create a colon definition
05C8   D9                     EXX      
05C9   03                     INC   BC   
05CA   0A                     LD   A,(BC)   ; Get the next character
05CB   CD 46 06               CALL   lookupDef   
05CE   D5                     PUSH   DE   ; save return SP
05CF   ED 5B 0E 1A            LD   DE,(vHeapPtr)   ; start of defintion
05D3   73                     LD   (HL),E   ; Save low byte of address in CFA
05D4   23                     INC   HL   
05D5   72                     LD   (HL),D   ; Save high byte of address in CFA+1
05D6   EB                     EX   DE,HL   ; HL=HeapPtr
05D7   D1                     POP   DE   ; restore return SP
05D8                DEF1:        ; Skip to end of definition
05D8   03                     INC   BC   ; Point to next character
05D9   0A                     LD   A,(BC)   ; Get the next character
05DA   77                     LD   (HL),A   ; write to definition
05DB   23                     INC   HL   
05DC   FE 3B                  CP   ";"   ; Is it a semicolon
05DE   20 F8                  JR   NZ,def1   ; end the definition
05E0   22 0E 1A               LD   (vHeapPtr),HL   ; bump heap ptr to after definiton
05E3   D9                     EXX      
05E4   FD E9                  JP   (IY)   
05E6                             ; ********************************************************************************
05E6                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
05E6                             ; Read the first character.
05E6                             ;			
05E6                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
05E6                             ; and then added into the L register. (HL forms a 16-bit accumulator)
05E6                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
05E6                             ; and then add in the next digit. Repeat this until a non-number character is
05E6                             ; detected. Add in the final digit so that HL contains the converted number.
05E6                             ; Push HL onto the stack and proceed to the dispatch routine.
05E6                             ; ********************************************************************************
05E6                NUM:         ;=
05E6   D5                     PUSH   DE   
05E7   21 00 00               LD   HL,0   ; Clear HL to accept the number
05EA   D9                     EXX      
05EB   0A                     LD   A,(BC)   ; Get the character which is a numeral
05EC   D9                     EXX      
05ED                NUM1:        ; corrected KB 24/11/21
05ED   D6 30                  SUB   $30   ; Form decimal digit
05EF   85                     ADD   A,L   ; Add into bottom of HL
05F0   6F                     LD   L,A   ; 
05F1   3E 00                  LD   A,0   ; Clear A
05F3   8C                     ADC   A,H   ; Add with carry H-reg
05F4   67                     LD   H,A   ; Put result in H-reg
05F5   D9                     EXX      
05F6   03                     INC   BC   ; Increment IP
05F7   0A                     LD   A,(BC)   ; and get the next character
05F8   D9                     EXX      
05F9   FE 30                  CP   $30   ; Less than $30
05FB   38 0C                  JR   C,num2   ; Not a number / end of number
05FD   FE 3A                  CP   $3A   ; Greater or equal to $3A
05FF   30 08                  JR   NC,num2   ; Not a number / end of number
0601                             ; Multiply digit(s) in HL by 10
0601   29                     ADD   HL,HL   ; 2X
0602   54 5D                  LD   DE,HL   ; LD DE,HL
0604   29                     ADD   HL,HL   ; 4X
0605   29                     ADD   HL,HL   ; 8X
0606   19                     ADD   HL,DE   ; 2X  + 8X  = 10X
0607   18 E4                  JR   num1   
0609                NUM2:        
0609   D9                     EXX      
060A   0B                     DEC   BC   
060B   D9                     EXX      
060C   EB                     EX   DE,HL   ; NOS in HL
060D   FD E9                  JP   (IY)   ; and process the next character
060F                             ;*******************************************************************
060F                             ; Subroutines
060F                             ;*******************************************************************
060F                CRLF:        ; 18
060F   CD 1F 06               CALL   printStr   
0612   0D 0A 00               .CSTR   "\r\n"   
0615   C9                     RET      
0616                PROMPT:      
0616   CD 1F 06               CALL   printStr   
0619   0D 0A 3E 20 00         .CSTR   "\r\n> "   
061E   C9                     RET      
061F                PRINTSTR:      
061F   E3                     EX   (SP),HL   
0620   18 04                  JR   printStr2   
0622                PRINTSTR1:      
0622   CD 85 00               CALL   putchar   
0625   23                     INC   HL   
0626                PRINTSTR2:      
0626   7E                     LD   A,(HL)   
0627   B7                     OR   A   
0628   20 F8                  JR   NZ,printStr1   
062A   23                     INC   HL   
062B   E3                     EX   (SP),HL   
062C   C9                     RET      
062D                RPUSH:       ; 11
062D   EB                     EX   DE,HL   
062E   2B                     DEC   HL   
062F   72                     LD   (HL),D   
0630   2B                     DEC   HL   
0631   73                     LD   (HL),E   
0632   EB                     EX   DE,HL   
0633   C9                     RET      
0634                RPOP:        ; 11
0634   EB                     EX   DE,HL   
0635   5E                     LD   E,(HL)   
0636   23                     INC   HL   
0637   56                     LD   D,(HL)   
0638   23                     INC   HL   
0639   EB                     EX   DE,HL   
063A   C9                     RET      
063B                ENTER:       ;= 9
063B   D9                     EXX      
063C   60 69                  LD   HL,BC   
063E   CD 2D 06               CALL   rpush   ; save Instruction Pointer
0641   C1                     POP   BC   
0642   0B                     DEC   BC   
0643   D9                     EXX      
0644   FD E9                  JP   (IY)   ; Execute code from User def
0646                LOOKUPDEF:      ;= 11
0646   D6 41                  SUB   "A"   
0648   32 08 1A               LD   (vEdited),A   
064B   18 02                  JR   lookupDef2   
064D                LOOKUPDEF1:      
064D   D6 41                  SUB   "A"   
064F                LOOKUPDEF2:      
064F   87                     ADD   A,A   
0650   2A 06 1A               LD   HL,(vDEFS)   
0653   85                     ADD   A,L   
0654   6F                     LD   L,A   
0655   3E 00                  LD   A,0   
0657   8C                     ADC   A,H   
0658   67                     LD   H,A   
0659   C9                     RET      
065A                PRINTNUM:      ; used by tests
065A   E1                     POP   HL   ; DE=TOS RET address
065B   E3                     EX   (SP),HL   ; HL=NOS DE=TOS
065C   EB                     EX   DE,HL   ; HL=TOS DE=NOS
065D                PRINTDEC:      
065D   11 F0 D8               LD   DE,-10000   
0660   CD 76 06               CALL   printdec1   
0663   11 18 FC               LD   DE,-1000   
0666   CD 76 06               CALL   printdec1   
0669   11 9C FF               LD   DE,-100   
066C   CD 76 06               CALL   printdec1   
066F   1E F6                  LD   E,-10   
0671   CD 76 06               CALL   printdec1   
0674   1E FF                  LD   E,-1   
0676                PRINTDEC1:      
0676   3E 2F                  LD   A,"0"-1   
0678                PRINTDEC2:      
0678   3C                     INC   A   
0679   19                     ADD   HL,DE   
067A   38 FC                  JR   C,printdec2   
067C   ED 52                  SBC   HL,DE   
067E   C3 85 00               JP   putchar   
0681                             ; **************************************************************************
0681                             ; calculate nesting value
0681                             ; A is char to be tested,
0681                             ; E is the nesting value (initially 0)
0681                             ; E is increased by ( and [
0681                             ; E is decreased by ) and ]
0681                             ; E has its bit 7 toggled by `
0681                             ; limited to 127 levels
0681                             ; **************************************************************************
0681                NESTING:      ;=
0681   CB 7B                  BIT   7,E   
0683   20 06                  JR   NZ,nesting1   
0685   FE 60                  CP   "`"   
0687   28 06                  JR   Z,nesting0   
0689   18 09                  JR   nesting1a   
068B                NESTING1:      
068B   FE 60                  CP   "`"   
068D   20 05                  JR   NZ,nesting1a   
068F                NESTING0:      
068F   3E 80                  LD   A,$80   
0691   AB                     XOR   E   ; flip bit 7
0692   5F                     LD   E,A   
0693   C9                     RET      
0694                NESTING1A:      
0694   FE 3A                  CP   ":"   
0696   28 08                  JR   Z,nesting2   
0698   FE 5B                  CP   "["   
069A   28 04                  JR   Z,nesting2   
069C   FE 28                  CP   "("   
069E   20 02                  JR   NZ,nesting3   
06A0                NESTING2:      
06A0   1C                     INC   E   
06A1   C9                     RET      
06A2                NESTING3:      
06A2   FE 3B                  CP   ";"   
06A4   28 07                  JR   Z,nesting4   
06A6   FE 5D                  CP   "]"   
06A8   28 03                  JR   Z,nesting4   
06AA   FE 29                  CP   ")"   
06AC   C0                     RET   NZ   
06AD                NESTING4:      
06AD   1D                     DEC   E   
06AE   C9                     RET      
06AF                             ; *************************************
06AF                             ; Loop Handling Code
06AF                             ; *************************************
06AF                             ;= 23
06AF                BEGIN:       ; Left parentesis begins a loop
06AF   7B                     LD   A,E   ; zero?
06B0   B2                     OR   D   
06B1   28 13                  JR   Z,begin1   ; if false skip to closing brace
06B3   D5                     PUSH   DE   ; save loop limit
06B4   D9                     EXX      
06B5   60 69                  LD   HL,BC   ; create loop stackframe
06B7   CD 2D 06               CALL   rpush   ; -> loopAddress
06BA   E1                     POP   HL   ; pop saved loop limit
06BB   CD 2D 06               CALL   rpush   ; -> loopLimit
06BE   21 00 00               LD   HL,0   ; inital value
06C1   CD 2D 06               CALL   rpush   ; -> loopVar
06C4   18 0E                  JR   begin3   
06C6                BEGIN1:      
06C6   D9                     EXX      
06C7   D5                     PUSH   DE   ; preserve RSP
06C8   1E 01                  LD   E,1   ; initalise nesting (include opening "(")
06CA                BEGIN2:      
06CA   03                     INC   BC   ; inc IP
06CB   0A                     LD   A,(BC)   ; read next char
06CC   CD 81 06               CALL   nesting   ; calc nesting
06CF   AF                     XOR   A   
06D0   B3                     OR   E   
06D1   20 F7                  JR   NZ,begin2   ; loop until nesting 0
06D3   D1                     POP   DE   ; restore RSP
06D4                BEGIN3:      
06D4   D9                     EXX      
06D5   D1                     POP   DE   ; consume TOS
06D6   FD E9                  JP   (IY)   
06D8                AGAIN:       
06D8   D9                     EXX      
06D9   CD 34 06               CALL   rpop   ; HL=loopVar
06DC   7C                     LD   A,H   ; check for -1 ($FF) (IFTEMode)
06DD   A5                     AND   L   
06DE   3C                     INC   A   
06DF   20 06                  JR   NZ,again1   
06E1   D9                     EXX      
06E2   D5                     PUSH   DE   ; IFTEMode
06E3   16 00                  LD   D,0   ; return FALSE
06E5   FD E9                  JP   (IY)   
06E7                AGAIN1:      ; HL=loopVar
06E7   C5                     PUSH   BC   ; save IP
06E8   44 4D                  LD   BC,HL   ; BC=loopVar
06EA   CD 34 06               CALL   rpop   ; HL=loopLimit
06ED   2B                     DEC   HL   ; reduce loopLimit by 1
06EE   B7                     OR   A   
06EF   ED 42                  SBC   HL,BC   ; (loopLimit-1) - loopVar
06F1   28 12                  JR   Z,again2   ; exit if loopVar = loopLimit-1
06F3   CD 34 06               CALL   rpop   ; HL=loopAddress (SP)=IP
06F6   E3                     EX   (SP),HL   ; (SP)=loopAddress HL=IP
06F7   60 69                  LD   HL,BC   ; HL=loopVar
06F9   23                     INC   HL   ; inc loopVar
06FA   C1                     POP   BC   ; BC=loopAddress
06FB   1B                     DEC   DE   ; move RSP to point to loopVar
06FC   1B                     DEC   DE   
06FD   1B                     DEC   DE   
06FE   1B                     DEC   DE   
06FF   CD 2D 06               CALL   rpush   ; rpush loopvar, stackFrame restored
0702   D9                     EXX      
0703   FD E9                  JP   (IY)   
0705                AGAIN2:      ; terminating loop
0705   C1                     POP   BC   ; restore IP
0706   13                     INC   DE   ; remove the stackframe
0707   13                     INC   DE   
0708   D9                     EXX      
0709   FD E9                  JP   (IY)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                DSTACK:      
1880                          DS   RSIZE   
1900                RSTACK:      
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                MINTVARS:      
1A00                SYSVARS:      
1A00                VS0:      DS   2   ; a
1A02                VBASE16:   DS   2   ; b
1A04                VTIBPTR:   DS   2   ; c
1A06                VDEFS:    DS   2   ; d
1A08                VEDITED:   DS   2   ; e
1A0A                          DS   2   ; f
1A0C                          DS   2   ; g
1A0E                VHEAPPTR:   DS   2   ; h
1A10                          DS   2   ; i
1A12                          DS   2   ; j
1A14                          DS   2   ; k
1A16                          DS   2   ; l
1A18                          DS   2   ; m
1A1A                          DS   2   ; n
1A1C                          DS   2   ; o
1A1E                          DS   2   ; p
1A20                          DS   2   ; q
1A22                          DS   2   ; r
1A24                          DS   2   ; s
1A26                          DS   2   ; t
1A28                          DS   2   ; u
1A2A                          DS   2   ; v
1A2C                          DS   2   ; w
1A2E                          DS   2   ; x
1A30                          DS   2   ; y
1A32                          DS   2   ; z
1A34                VNESTING:   DS   2   ; 
1A36                VBYTEMODE:   DS   2   ; 
1A38                          DS   $30   
1A68                TBPTR:    DS   2   ; reserved for tests
1A6A                RST08:    DS   2   
1A6C                RST10:    DS   2   
1A6E                RST18:    DS   2   
1A70                RST20:    DS   2   
1A72                RST28:    DS   2   
1A74                RST30:    DS   2   ; 
1A76                BAUD:     DS   2   ; 
1A78                INTVEC:   DS   2   ; 
1A7A                NMIVEC:   DS   2   ; 
1A7C                GETCVEC:   DS   2   ; 
1A7E                PUTCVEC:   DS   2   ; 
1A80                             ; ****************************************************************
1A80                             ; VARS Table - holds 26 16-bit user variables
1A80                             ; ****************************************************************
1A80                VARS:     DS   26 * 2   
1AB4                             ; ****************************************************************
1AB4                             ; DEFS Table - holds 26 addresses of user routines
1AB4                             ; ****************************************************************
1AB4                          ALIGN   $40   
1AB4                          .ORG   $-12   
1AB4                          DS   12   ; vars for group 0
1AC0                DEFS:     DS   GRPSIZE * NUMGRPS   
1C00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 30 IN MINT.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 117 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 132 IN MINT.asm
                    > USED AT LINE 1039 IN MINT.asm
                    > USED AT LINE 1114 IN MINT.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 13 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 14 IN MINT.asm
                    > USED AT LINE 7 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 15 IN MINT.asm
                    > USED AT LINE 10 IN ram.asm
TRUE:               0001 DEFINED AT LINE 16 IN MINT.asm
                    > USED AT LINE 745 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 17 IN MINT.asm
                    > USED AT LINE 44 IN MINT.asm
                    > USED AT LINE 552 IN MINT.asm
NUMGRPS:            0005 DEFINED AT LINE 19 IN MINT.asm
                    > USED AT LINE 59 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
GRPSIZE:            0040 DEFINED AT LINE 20 IN MINT.asm
                    > USED AT LINE 59 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
VARSOFS:            0-21 DEFINED AT LINE 22 IN MINT.asm
                    > USED AT LINE 710 IN MINT.asm
SYSVARSOFS:         0-61 DEFINED AT LINE 23 IN MINT.asm
                    > USED AT LINE 810 IN MINT.asm
START:              0180 DEFINED AT LINE 32 IN MINT.asm
                    > USED AT LINE 6
ISYSVARS:           0198 DEFINED AT LINE 42 IN MINT.asm
                    > USED AT LINE 53 IN MINT.asm
INITIALIZE:         01A8 DEFINED AT LINE 52 IN MINT.asm
                    > USED AT LINE 34 IN MINT.asm
INIT1:              01B8 DEFINED AT LINE 60 IN MINT.asm
                    > USED AT LINE 65 IN MINT.asm
MACRO:              01CA DEFINED AT LINE 72 IN MINT.asm
                    > USED AT LINE 125 IN MINT.asm
INTERPRET:          01E3 DEFINED AT LINE 85 IN MINT.asm
                    > USED AT LINE 37 IN MINT.asm
                    > USED AT LINE 605 IN MINT.asm
INTERPRET2:         01ED DEFINED AT LINE 90 IN MINT.asm
                    > USED AT LINE 83 IN MINT.asm
INTERPRET3:         01F6 DEFINED AT LINE 98 IN MINT.asm
                    > USED AT LINE 107 IN MINT.asm
INTERPRET4:         01FC DEFINED AT LINE 104 IN MINT.asm
                    > USED AT LINE 96 IN MINT.asm
WAITCHAR:           0201 DEFINED AT LINE 116 IN MINT.asm
                    > USED AT LINE 134 IN MINT.asm
                    > USED AT LINE 148 IN MINT.asm
WAITCHAR1:          0214 DEFINED AT LINE 127 IN MINT.asm
                    > USED AT LINE 119 IN MINT.asm
WAITCHAR3:          0222 DEFINED AT LINE 136 IN MINT.asm
                    > USED AT LINE 123 IN MINT.asm
WAITCHAR4:          0238 DEFINED AT LINE 152 IN MINT.asm
                    > USED AT LINE 121 IN MINT.asm
NEXT:               0243 DEFINED AT LINE 182 IN MINT.asm
                    > USED AT LINE 69 IN MINT.asm
                    > USED AT LINE 206 IN MINT.asm
                    > USED AT LINE 560 IN MINT.asm
                    > USED AT LINE 627 IN MINT.asm
                    > USED AT LINE 944 IN MINT.asm
COMPNEXT:           024E DEFINED AT LINE 194 IN MINT.asm
                    > USED AT LINE 554 IN MINT.asm
COMPNEXT1:          025B DEFINED AT LINE 203 IN MINT.asm
                    > USED AT LINE 200 IN MINT.asm
MACROS:             0261 DEFINED AT LINE 212 IN MINT.asm
EMPTY_:             0261 DEFINED AT LINE 1 IN MINT.asm
BACKSP_:            0262 DEFINED AT LINE 4 IN MINT.asm
EDIT_:              0263 DEFINED AT LINE 7 IN MINT.asm
REEDIT_:            0264 DEFINED AT LINE 10 IN MINT.asm
LIST_:              0265 DEFINED AT LINE 13 IN MINT.asm
PRINTSTACK_:        0266 DEFINED AT LINE 16 IN MINT.asm
TOGGLEBASE_:        0267 DEFINED AT LINE 19 IN MINT.asm
OPCODES:            0300 DEFINED AT LINE 221 IN MINT.asm
CTRLCODES:          0380 DEFINED AT LINE 358 IN MINT.asm
                    > USED AT LINE 74 IN MINT.asm
ALTCODES:           0380 DEFINED AT LINE 359 IN MINT.asm
                    > USED AT LINE 502 IN MINT.asm
CODEPAGE:           0400 DEFINED AT LINE 494 IN MINT.asm
ALT_:               0400 DEFINED AT LINE 496 IN MINT.asm
ALT:                0400 DEFINED AT LINE 497 IN MINT.asm
AND_:               040D DEFINED AT LINE 509 IN MINT.asm
OR_:                0416 DEFINED AT LINE 519 IN MINT.asm
INV_:               041F DEFINED AT LINE 529 IN MINT.asm
XOR_:               0424 DEFINED AT LINE 533 IN MINT.asm
XOR1:               0425 DEFINED AT LINE 535 IN MINT.asm
                    > USED AT LINE 531 IN MINT.asm
ADD_:               042D DEFINED AT LINE 544 IN MINT.asm
ARRDEF_:            0432 DEFINED AT LINE 550 IN MINT.asm
ARRDEF:             0432 DEFINED AT LINE 551 IN MINT.asm
ARRDEF1:            0434 DEFINED AT LINE 553 IN MINT.asm
                    > USED AT LINE 746 IN MINT.asm
ARREND_:            0446 DEFINED AT LINE 562 IN MINT.asm
BEGIN_:             0449 DEFINED AT LINE 565 IN MINT.asm
CALL_:              044C DEFINED AT LINE 568 IN MINT.asm
DEF_:               045D DEFINED AT LINE 581 IN MINT.asm
HDOT_:              0460 DEFINED AT LINE 584 IN MINT.asm
DOT_:               0462 DEFINED AT LINE 587 IN MINT.asm
DROP_:              0464 DEFINED AT LINE 590 IN MINT.asm
DUP_:               0467 DEFINED AT LINE 594 IN MINT.asm
ETX_:               046A DEFINED AT LINE 598 IN MINT.asm
ETX:                046A DEFINED AT LINE 599 IN MINT.asm
ETX1:               0474 DEFINED AT LINE 604 IN MINT.asm
                    > USED AT LINE 602 IN MINT.asm
EXIT_:              0477 DEFINED AT LINE 607 IN MINT.asm
FETCH_:             0481 DEFINED AT LINE 616 IN MINT.asm
HEX_:               0487 DEFINED AT LINE 623 IN MINT.asm
NOP_:               0489 DEFINED AT LINE 626 IN MINT.asm
NUM_:               048C DEFINED AT LINE 629 IN MINT.asm
OVER_:              048F DEFINED AT LINE 632 IN MINT.asm
RET_:               0495 DEFINED AT LINE 639 IN MINT.asm
STORE_:             049E DEFINED AT LINE 646 IN MINT.asm
SWAP_:              04A6 DEFINED AT LINE 655 IN MINT.asm
SHL_:               04AB DEFINED AT LINE 661 IN MINT.asm
SHR_:               04AD DEFINED AT LINE 664 IN MINT.asm
NEG_:               04AF DEFINED AT LINE 667 IN MINT.asm
SUB_:               04B4 DEFINED AT LINE 671 IN MINT.asm
SUB1:               04B4 DEFINED AT LINE 672 IN MINT.asm
SUB2:               04B5 DEFINED AT LINE 674 IN MINT.asm
                    > USED AT LINE 669 IN MINT.asm
EQ_:                04BB DEFINED AT LINE 680 IN MINT.asm
EQ0:                04C2 DEFINED AT LINE 686 IN MINT.asm
                    > USED AT LINE 707 IN MINT.asm
EQ1:                04C7 DEFINED AT LINE 689 IN MINT.asm
                    > USED AT LINE 685 IN MINT.asm
                    > USED AT LINE 706 IN MINT.asm
GETREF_:            04CC DEFINED AT LINE 693 IN MINT.asm
GT_:                04CE DEFINED AT LINE 696 IN MINT.asm
LT_:                04D2 DEFINED AT LINE 701 IN MINT.asm
LT1:                04D3 DEFINED AT LINE 703 IN MINT.asm
                    > USED AT LINE 699 IN MINT.asm
VAR_:               04DA DEFINED AT LINE 709 IN MINT.asm
VAR1:               04DC DEFINED AT LINE 711 IN MINT.asm
                    > USED AT LINE 811 IN MINT.asm
DIV_:               04E8 DEFINED AT LINE 723 IN MINT.asm
MUL_:               04EB DEFINED AT LINE 726 IN MINT.asm
AGAIN_:             04EE DEFINED AT LINE 729 IN MINT.asm
STR_:               04F1 DEFINED AT LINE 732 IN MINT.asm
ALTCODEPAGE:        0500 DEFINED AT LINE 742 IN MINT.asm
CARRDEF_:           0500 DEFINED AT LINE 744 IN MINT.asm
CFETCH_:            0505 DEFINED AT LINE 748 IN MINT.asm
ANOP_:              0509 DEFINED AT LINE 752 IN MINT.asm
CHARCODE_:          050B DEFINED AT LINE 755 IN MINT.asm
COMMENT_:           0515 DEFINED AT LINE 765 IN MINT.asm
CSTORE_:            0517 DEFINED AT LINE 768 IN MINT.asm
DEPTH_:             051D DEFINED AT LINE 775 IN MINT.asm
EMIT_:              051F DEFINED AT LINE 778 IN MINT.asm
IFTE_:              0521 DEFINED AT LINE 781 IN MINT.asm
EXEC_:              0523 DEFINED AT LINE 784 IN MINT.asm
EXEC1:              0528 DEFINED AT LINE 787 IN MINT.asm
                    > USED AT LINE 785 IN MINT.asm
GO_:                052C DEFINED AT LINE 793 IN MINT.asm
ENDGROUP_:          0538 DEFINED AT LINE 803 IN MINT.asm
GROUP_:             053A DEFINED AT LINE 806 IN MINT.asm
SYSVAR_:            053C DEFINED AT LINE 809 IN MINT.asm
I_:                 0541 DEFINED AT LINE 813 IN MINT.asm
I1:                 0544 DEFINED AT LINE 815 IN MINT.asm
                    > USED AT LINE 842 IN MINT.asm
INCR_:              054D DEFINED AT LINE 825 IN MINT.asm
INPORT_:            0558 DEFINED AT LINE 837 IN MINT.asm
J_:                 055A DEFINED AT LINE 840 IN MINT.asm
KEY_:               055F DEFINED AT LINE 844 IN MINT.asm
NEWLN_:             0561 DEFINED AT LINE 847 IN MINT.asm
OUTPORT_:           0563 DEFINED AT LINE 850 IN MINT.asm
ROT_:               0565 DEFINED AT LINE 853 IN MINT.asm
BREAK_:             056B DEFINED AT LINE 860 IN MINT.asm
PRINTSTK_:          056D DEFINED AT LINE 863 IN MINT.asm
EDITDEF_:           056F DEFINED AT LINE 866 IN MINT.asm
MUL:                0571 DEFINED AT LINE 877 IN MINT.asm
                    > USED AT LINE 727 IN MINT.asm
MUL1:               0579 DEFINED AT LINE 883 IN MINT.asm
                    > USED AT LINE 893 IN MINT.asm
MUL2:               0584 DEFINED AT LINE 891 IN MINT.asm
                    > USED AT LINE 887 IN MINT.asm
                    > USED AT LINE 889 IN MINT.asm
DIV:                058A DEFINED AT LINE 897 IN MINT.asm
                    > USED AT LINE 724 IN MINT.asm
DIV_LOOP:           0590 DEFINED AT LINE 902 IN MINT.asm
                    > USED AT LINE 916 IN MINT.asm
DIV_ADJUST:         059D DEFINED AT LINE 911 IN MINT.asm
                    > USED AT LINE 907 IN MINT.asm
DIV_DONE:           059E DEFINED AT LINE 914 IN MINT.asm
                    > USED AT LINE 909 IN MINT.asm
DIV_END:            05A3 DEFINED AT LINE 919 IN MINT.asm
ARREND:             05A7 DEFINED AT LINE 925 IN MINT.asm
                    > USED AT LINE 563 IN MINT.asm
ARREND2:            05C0 DEFINED AT LINE 941 IN MINT.asm
                    > USED AT LINE 938 IN MINT.asm
DEF:                05C8 DEFINED AT LINE 947 IN MINT.asm
                    > USED AT LINE 582 IN MINT.asm
DEF1:               05D8 DEFINED AT LINE 959 IN MINT.asm
                    > USED AT LINE 965 IN MINT.asm
NUM:                05E6 DEFINED AT LINE 982 IN MINT.asm
                    > USED AT LINE 630 IN MINT.asm
NUM1:               05ED DEFINED AT LINE 988 IN MINT.asm
                    > USED AT LINE 1012 IN MINT.asm
NUM2:               0609 DEFINED AT LINE 1013 IN MINT.asm
                    > USED AT LINE 1003 IN MINT.asm
                    > USED AT LINE 1005 IN MINT.asm
CRLF:               060F DEFINED AT LINE 1024 IN MINT.asm
                    > USED AT LINE 145 IN MINT.asm
PROMPT:             0616 DEFINED AT LINE 1029 IN MINT.asm
                    > USED AT LINE 86 IN MINT.asm
PRINTSTR:           061F DEFINED AT LINE 1034 IN MINT.asm
                    > USED AT LINE 35 IN MINT.asm
                    > USED AT LINE 1025 IN MINT.asm
                    > USED AT LINE 1030 IN MINT.asm
PRINTSTR1:          0622 DEFINED AT LINE 1038 IN MINT.asm
                    > USED AT LINE 1045 IN MINT.asm
PRINTSTR2:          0626 DEFINED AT LINE 1042 IN MINT.asm
                    > USED AT LINE 1036 IN MINT.asm
RPUSH:              062D DEFINED AT LINE 1050 IN MINT.asm
                    > USED AT LINE 558 IN MINT.asm
                    > USED AT LINE 571 IN MINT.asm
                    > USED AT LINE 797 IN MINT.asm
                    > USED AT LINE 1071 IN MINT.asm
                    > USED AT LINE 1172 IN MINT.asm
                    > USED AT LINE 1174 IN MINT.asm
                    > USED AT LINE 1176 IN MINT.asm
                    > USED AT LINE 1224 IN MINT.asm
RPOP:               0634 DEFINED AT LINE 1059 IN MINT.asm
                    > USED AT LINE 611 IN MINT.asm
                    > USED AT LINE 641 IN MINT.asm
                    > USED AT LINE 927 IN MINT.asm
                    > USED AT LINE 1198 IN MINT.asm
                    > USED AT LINE 1210 IN MINT.asm
                    > USED AT LINE 1215 IN MINT.asm
ENTER:              063B DEFINED AT LINE 1068 IN MINT.asm
                    > USED AT LINE 80 IN MINT.asm
LOOKUPDEF:          0646 DEFINED AT LINE 1077 IN MINT.asm
                    > USED AT LINE 951 IN MINT.asm
LOOKUPDEF1:         064D DEFINED AT LINE 1081 IN MINT.asm
                    > USED AT LINE 573 IN MINT.asm
LOOKUPDEF2:         064F DEFINED AT LINE 1083 IN MINT.asm
                    > USED AT LINE 1080 IN MINT.asm
PRINTNUM:           065A DEFINED AT LINE 1093 IN MINT.asm
PRINTDEC:           065D DEFINED AT LINE 1097 IN MINT.asm
PRINTDEC1:          0676 DEFINED AT LINE 1107 IN MINT.asm
                    > USED AT LINE 1099 IN MINT.asm
                    > USED AT LINE 1101 IN MINT.asm
                    > USED AT LINE 1103 IN MINT.asm
                    > USED AT LINE 1105 IN MINT.asm
PRINTDEC2:          0678 DEFINED AT LINE 1109 IN MINT.asm
                    > USED AT LINE 1112 IN MINT.asm
NESTING:            0681 DEFINED AT LINE 1126 IN MINT.asm
                    > USED AT LINE 102 IN MINT.asm
                    > USED AT LINE 133 IN MINT.asm
                    > USED AT LINE 1186 IN MINT.asm
NESTING1:           068B DEFINED AT LINE 1132 IN MINT.asm
                    > USED AT LINE 1128 IN MINT.asm
NESTING0:           068F DEFINED AT LINE 1135 IN MINT.asm
                    > USED AT LINE 1130 IN MINT.asm
NESTING1A:          0694 DEFINED AT LINE 1140 IN MINT.asm
                    > USED AT LINE 1131 IN MINT.asm
                    > USED AT LINE 1134 IN MINT.asm
NESTING2:           06A0 DEFINED AT LINE 1147 IN MINT.asm
                    > USED AT LINE 1142 IN MINT.asm
                    > USED AT LINE 1144 IN MINT.asm
NESTING3:           06A2 DEFINED AT LINE 1150 IN MINT.asm
                    > USED AT LINE 1146 IN MINT.asm
NESTING4:           06AD DEFINED AT LINE 1157 IN MINT.asm
                    > USED AT LINE 1152 IN MINT.asm
                    > USED AT LINE 1154 IN MINT.asm
BEGIN:              06AF DEFINED AT LINE 1165 IN MINT.asm
                    > USED AT LINE 566 IN MINT.asm
BEGIN1:             06C6 DEFINED AT LINE 1179 IN MINT.asm
                    > USED AT LINE 1168 IN MINT.asm
BEGIN2:             06CA DEFINED AT LINE 1183 IN MINT.asm
                    > USED AT LINE 1189 IN MINT.asm
BEGIN3:             06D4 DEFINED AT LINE 1191 IN MINT.asm
                    > USED AT LINE 1177 IN MINT.asm
AGAIN:              06D8 DEFINED AT LINE 1196 IN MINT.asm
                    > USED AT LINE 730 IN MINT.asm
AGAIN1:             06E7 DEFINED AT LINE 1207 IN MINT.asm
                    > USED AT LINE 1202 IN MINT.asm
AGAIN2:             0705 DEFINED AT LINE 1227 IN MINT.asm
                    > USED AT LINE 1214 IN MINT.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
DSTACK:             1880 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 33 IN MINT.asm
                    > USED AT LINE 43 IN MINT.asm
                    > USED AT LINE 600 IN MINT.asm
                    > USED AT LINE 603 IN MINT.asm
RSTACK:             1900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 67 IN MINT.asm
TIB:                1900 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 95 IN MINT.asm
                    > USED AT LINE 128 IN MINT.asm
                    > USED AT LINE 137 IN MINT.asm
                    > USED AT LINE 156 IN MINT.asm
MINTVARS:           1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 22 IN MINT.asm
                    > USED AT LINE 23 IN MINT.asm
SYSVARS:            1A00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 23 IN MINT.asm
                    > USED AT LINE 54 IN MINT.asm
VS0:                1A00 DEFINED AT LINE 16 IN ram.asm
VBASE16:            1A02 DEFINED AT LINE 17 IN ram.asm
VTIBPTR:            1A04 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 73 IN MINT.asm
                    > USED AT LINE 82 IN MINT.asm
                    > USED AT LINE 88 IN MINT.asm
                    > USED AT LINE 154 IN MINT.asm
VDEFS:              1A06 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 1085 IN MINT.asm
VEDITED:            1A08 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1079 IN MINT.asm
VHEAPPTR:           1A0E DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 195 IN MINT.asm
                    > USED AT LINE 205 IN MINT.asm
                    > USED AT LINE 557 IN MINT.asm
                    > USED AT LINE 933 IN MINT.asm
                    > USED AT LINE 953 IN MINT.asm
                    > USED AT LINE 966 IN MINT.asm
VNESTING:           1A34 DEFINED AT LINE 43 IN ram.asm
VBYTEMODE:          1A36 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 197 IN MINT.asm
                    > USED AT LINE 555 IN MINT.asm
                    > USED AT LINE 936 IN MINT.asm
TBPTR:              1A68 DEFINED AT LINE 46 IN ram.asm
RST08:              1A6A DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1A6C DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1A6E DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1A70 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1A72 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1A74 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1A76 DEFINED AT LINE 54 IN ram.asm
INTVEC:             1A78 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1A7A DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1A7C DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1A7E DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
VARS:               1A80 DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 22 IN MINT.asm
DEFS:               1AC0 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 46 IN MINT.asm
                    > USED AT LINE 58 IN MINT.asm
HEAP:               1C00 DEFINED AT LINE 72 IN ram.asm
                    > USED AT LINE 50 IN MINT.asm
