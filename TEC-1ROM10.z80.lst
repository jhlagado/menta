0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   ;TODO??????????????????????????????????????????????????????????????
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 6A 1A               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 6C 1A               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 6E 1A               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 70 1A               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 72 1A               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 74 1A               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 78 1A               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 7A 1A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 7C 1A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 7E 1A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 6A 1A               LD   (RST08),HL   
0094   22 6C 1A               LD   (RST10),HL   
0097   22 6E 1A               LD   (RST18),HL   
009A   22 70 1A               LD   (RST20),HL   
009D   22 72 1A               LD   (RST28),HL   
00A0   22 74 1A               LD   (RST30),HL   
00A3   22 78 1A               LD   (INTVEC),HL   
00A6   22 7A 1A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 7C 1A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 7E 1A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 80 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MINT Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                DSIZE:    EQU   $80   
00C6                RSIZE:    EQU   $80   
00C6                TIBSIZE:   EQU   $100   
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                NUMGRPS:   EQU   5   
00C6                GRPSIZE:   EQU   $40   
00C6                VARSOFS:   EQU   ((VARS - mintVars)/2) - "a"   
00C6                SYSVARSOFS:   EQU   ((sysVars - mintVars)/2) -"a"   
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   
0180                START:       
0180   31 80 18               LD   SP,DSTACK   
0183   CD A8 01               CALL   initialize   
0186   CD 52 07               CALL   printStr   
0189   4D 49 4E 54 20 56 31 2E 31 0D 0A 00 .CSTR   "MINT V1.1\r\n"   
0195   C3 DE 01               JP   interpret   
0198                             ; ***********************************************************************
0198                             ; Initial values for user mintVars		
0198                             ; ***********************************************************************		
0198                ISYSVARS:      
0198   80 18                  DW   dStack   ; a vS0
019A   00 00                  DW   FALSE   ; b vBase16
019C   00 00                  DW   0   ; c vTIBPtr
019E   C0 1A                  DW   DEFS   ; d vDEFS
01A0   00 00                  DW   0   ; e vEdited the last command to be edited
01A2   00 00                  DW   0   ; f
01A4   00 00                  DW   0   ; g
01A6   00 1C                  DW   HEAP   ; h vHeapPtr
01A8                INITIALIZE:      
01A8   21 98 01               LD   HL,iSysVars   
01AB   11 00 1A               LD   DE,sysVars   
01AE   01 10 00               LD   BC,8 * 2   
01B1   ED B0                  LDIR      
01B3   21 C0 1A               LD   HL,DEFS   
01B6   06 A0                  LD   B,GRPSIZE/2 * NUMGRPS   
01B8                INIT1:       
01B8   36 8F                  LD   (HL),lsb(empty_)   
01BA   23                     INC   HL   
01BB   36 02                  LD   (HL),msb(empty_)   
01BD   23                     INC   HL   
01BE   10 F8                  DJNZ   init1   
01C0   DD 21 00 19            LD   IX,RSTACK   
01C4   FD 21 3C 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
01C8   C9                     RET      
01C9                MACRO:       ; 25
01C9   21 80 03               LD   HL,ctrlCodes   
01CC   85                     ADD   A,L   
01CD   6F                     LD   L,A   
01CE   5E                     LD   E,(HL)   
01CF   16 02                  LD   D,msb(macros)   
01D1   D5                     PUSH   DE   
01D2   CD FF 06               CALL   enter   
01D5   5C 47 00               .CSTR   "\\G"   
01D8   ED 4B 04 1A            LD   BC,(vTIBPtr)   
01DC   18 0A                  JR   interpret2   
01DE                INTERPRET:      
01DE   CD 86 02               CALL   prompt   
01E1   01 00 00               LD   BC,0   ; load BC with offset into TIB
01E4   ED 43 04 1A            LD   (vTIBPtr),BC   
01E8                INTERPRET2:      ; calc nesting (a macro might have changed it)
01E8   D5                     PUSH   DE   ; preserve TOS
01E9   1E 00                  LD   E,0   ; initilize nesting value
01EB   C5                     PUSH   BC   ; save offset into TIB,
01EC                             ; BC is also the count of chars in TIB
01EC   21 00 19               LD   HL,TIB   ; HL is start of TIB
01EF   18 06                  JR   interpret4   
01F1                INTERPRET3:      
01F1   7E                     LD   A,(HL)   ; A = char in TIB
01F2   23                     INC   HL   ; inc pointer into TIB
01F3   0B                     DEC   BC   ; dec count of chars in TIB
01F4   CD 58 02               CALL   nesting   ; update nesting value
01F7                INTERPRET4:      
01F7   79                     LD   A,C   ; is count zero?
01F8   B0                     OR   B   
01F9   20 F6                  JR   NZ,interpret3   ; if not loop
01FB   C1                     POP   BC   ; restore offset into TIB
01FC                             ; *******************************************************************
01FC                             ; Wait for a character from the serial input (keyboard)
01FC                             ; and store it in the text buffer. Keep accepting characters,
01FC                             ; increasing the instruction pointer BC - until a newline received.
01FC                             ; *******************************************************************
01FC                WAITCHAR:      
01FC   CD 81 00               CALL   getchar   ; loop around waiting for character
01FF   FE 20                  CP   $20   
0201   30 0C                  JR   NC,waitchar1   
0203   FE 00                  CP   $0   ; is it end of string?
0205   28 2C                  JR   Z,waitchar4   
0207   FE 0D                  CP   "\r"   ; carriage return?
0209   28 12                  JR   Z,waitchar3   
020B   16 00                  LD   D,0   
020D   18 BA                  JR   macro   
020F                WAITCHAR1:      
020F   21 00 19               LD   HL,TIB   
0212   09                     ADD   HL,BC   
0213   77                     LD   (HL),A   ; store the character in textbuf
0214   03                     INC   BC   
0215   CD 85 00               CALL   putchar   ; echo character to screen
0218   CD 58 02               CALL   nesting   
021B   18 DF                  JR   waitchar   ; wait for next character
021D                WAITCHAR3:      
021D   21 00 19               LD   HL,TIB   
0220   09                     ADD   HL,BC   
0221   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
0223   23                     INC   HL   
0224   36 0A                  LD   (HL),"\n"   
0226   23                     INC   HL   
0227   03                     INC   BC   
0228   03                     INC   BC   
0229   CD 4B 07               CALL   crlf   ; echo character to screen
022C   7B                     LD   A,E   ; if zero nesting append an ETX after \r
022D   B7                     OR   A   
022E   20 CC                  JR   NZ,waitchar   
0230   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
0232   03                     INC   BC   
0233                WAITCHAR4:      
0233   D1                     POP   DE   ; restore TOS
0234   ED 43 04 1A            LD   (vTIBPtr),BC   
0238   01 00 19               LD   BC,TIB   ; Instructions stored on heap at address HERE
023B   0B                     DEC   BC   
023C                             ; Drop into the NEXT and dispatch routines
023C                             ; ********************************************************************************
023C                             ; 
023C                             ; Dispatch Routine.
023C                             ; 
023C                             ; Get the next character and form a 1 byte jump address
023C                             ; 
023C                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
023C                             ; jump to the selected function.
023C                             ; 
023C                             ; Individual handler routines will deal with each category:
023C                             ; 
023C                             ; 1. Detect characters A-Z and jump to the User Command handler routine
023C                             ; 
023C                             ; 2. Detect characters a-z and jump to the variable handler routine
023C                             ; 
023C                             ; 3. All other characters are punctuation and cause a jump to the associated
023C                             ; primitive code.
023C                             ; 
023C                             ; Instruction Pointer IP BC is incremented
023C                             ; 
023C                             ; *********************************************************************************
023C                NEXT:        ; 9
023C   03                     INC   BC   ; Increment the IP
023D   0A                     LD   A,(BC)   ; Get the next character and dispatch
023E   6F                     LD   L,A   ; Index into table
023F   26 03                  LD   H,msb(opcodes)   ; Start address of jump table
0241   6E                     LD   L,(HL)   ; get low jump address
0242   26 04                  LD   H,msb(codePage)   ; Load H with the 1st page address
0244   E9                     JP   (HL)   ; Jump to routine
0245                             ; ARRAY compilation routine
0245                COMPNEXT:      ; 19
0245   2A 0E 1A               LD   HL,(vHeapPtr)   ; load heap ptr
0248   73                     LD   (HL),E   ; store lsb
0249   3A 36 1A               LD   A,(vByteMode)   
024C   23                     INC   HL   
024D   B7                     OR   A   
024E   20 02                  JR   NZ,compNext1   
0250   72                     LD   (HL),D   
0251   23                     INC   HL   
0252                COMPNEXT1:      
0252   D1                     POP   DE   
0253   22 0E 1A               LD   (vHeapPtr),HL   ; save heap ptr
0256   18 E4                  JR   NEXT   
0258                NESTING:      ;=46
0258   CB 7B                  BIT   7,E   
025A   20 06                  JR   NZ,nesting1   
025C   FE 60                  CP   "`"   
025E   28 06                  JR   Z,nesting0   
0260   18 09                  JR   nesting1a   
0262                NESTING1:      
0262   FE 60                  CP   "`"   
0264   20 05                  JR   NZ,nesting1a   
0266                NESTING0:      
0266   3E 80                  LD   A,$80   
0268   AB                     XOR   E   ; flip bit 7
0269   5F                     LD   E,A   
026A   C9                     RET      
026B                NESTING1A:      
026B   FE 3A                  CP   ":"   
026D   28 08                  JR   Z,nesting2   
026F   FE 5B                  CP   "["   
0271   28 04                  JR   Z,nesting2   
0273   FE 28                  CP   "("   
0275   20 02                  JR   NZ,nesting3   
0277                NESTING2:      
0277   1C                     INC   E   
0278   C9                     RET      
0279                NESTING3:      
0279   FE 3B                  CP   ";"   
027B   28 07                  JR   Z,nesting4   
027D   FE 5D                  CP   "]"   
027F   28 03                  JR   Z,nesting4   
0281   FE 29                  CP   ")"   
0283   C0                     RET   NZ   
0284                NESTING4:      
0284   1D                     DEC   E   
0285   C9                     RET      
0286                PROMPT:      ;=9
0286   CD 52 07               CALL   printStr   
0289   0D 0A 3E 20 00         .CSTR   "\r\n> "   
028E   C9                     RET      
028F                             ; **************************************************************************
028F                             ; Macros must be written in Mint and end with ;
028F                             ; this code must not span pages
028F                             ; **************************************************************************
028F                MACROS:      
028F                EMPTY_:      
028F   3B                     DB   ";"   
0290                BACKSP_:      
0290   5C 63 40 30 3D 30 3D 28 31 5F 5C 63 5C 2B 60 08 20 08 60 29 3B DB   "\\c@0=0=(1_\\c\\+`\b \b`);"   
02A5                REEDIT_:      
02A5   5C 65 5C 40 5C 5A 3B   DB   "\\e\\@\\Z;"   
02AC                EDIT_:       
02AC   60 3F 60 5C 4B 5C 4E 60 3E 20 60 5C 5E 41 2D 5C 5A 3B 00 .CSTR   "`?`\\K\\N`> `\\^A-\\Z;"   
02BF                LIST_:       
02BF   5C 4E 32 36 28 5C 69 40 5C 5A 5C 63 40 30 3E 28 5C 4E 29 29 5C 4E 60 3E 20 60 3B 00 .CSTR   "\\N26(\\i@\\Z\\c@0>(\\N))\\N`> `;"   
02DB                PRINTSTACK_:      
02DB   60 3D 3E 20 60 5C 50 5C 4E 5C 4E 60 3E 20 60 3B 00 .CSTR   "`=> `\\P\\N\\N`> `;"   
02EC                TOGGLEBASE_:      
02EC   5C 62 40 30 3D 5C 62 21 3B 00 .CSTR   "\\b@0=\\b!;"   
02F6                             ; **************************************************************************
02F6                             ; Page 2  Jump Tables
02F6                             ; **************************************************************************
02F6                          ALIGN   $100   
0300                OPCODES:      
0300                             ; ***********************************************************************
0300                             ; Initial values for user mintVars		
0300                             ; ***********************************************************************		
0300   77                     DB   lsb(exit_)   ;   NUL
0301   87                     DB   lsb(nop_)   ;   SOH
0302   87                     DB   lsb(nop_)   ;   STX
0303   6A                     DB   lsb(etx_)   ;   ETX
0304   87                     DB   lsb(nop_)   ;   EOT
0305   87                     DB   lsb(nop_)   ;   ENQ
0306   87                     DB   lsb(nop_)   ;   ACK
0307   87                     DB   lsb(nop_)   ;   BEL
0308   87                     DB   lsb(nop_)   ;   BS
0309   87                     DB   lsb(nop_)   ;   TAB
030A   87                     DB   lsb(nop_)   ;   LF
030B   87                     DB   lsb(nop_)   ;   VT
030C   87                     DB   lsb(nop_)   ;   FF
030D   87                     DB   lsb(nop_)   ;   CR
030E   87                     DB   lsb(nop_)   ;   SO
030F   87                     DB   lsb(nop_)   ;   SI
0310   87                     DB   lsb(nop_)   ;   DLE
0311   87                     DB   lsb(nop_)   ;   DC1
0312   87                     DB   lsb(nop_)   ;   DC2
0313   87                     DB   lsb(nop_)   ;   DC3
0314   87                     DB   lsb(nop_)   ;   DC4
0315   87                     DB   lsb(nop_)   ;   NAK
0316   87                     DB   lsb(nop_)   ;   SYN
0317   87                     DB   lsb(nop_)   ;   ETB
0318   87                     DB   lsb(nop_)   ;   CAN
0319   87                     DB   lsb(nop_)   ;   EM
031A   87                     DB   lsb(nop_)   ;   SUB
031B   87                     DB   lsb(nop_)   ;   ESC
031C   87                     DB   lsb(nop_)   ;   FS
031D   87                     DB   lsb(nop_)   ;   GS
031E   87                     DB   lsb(nop_)   ;   RS
031F   87                     DB   lsb(nop_)   ;   US
0320   87                     DB   lsb(nop_)   ;   SP
0321   9A                     DB   lsb(store_)   ;   !
0322   67                     DB   lsb(dup_)   ;   "
0323   85                     DB   lsb(hex_)   ;    #
0324   A2                     DB   lsb(swap_)   ;    $
0325   8D                     DB   lsb(over_)   ;    %
0326   03                     DB   lsb(and_)   ;    &
0327   64                     DB   lsb(drop_)   ;    '
0328   3D                     DB   lsb(begin_)   ;    (
0329   F2                     DB   lsb(again_)   ;    )
032A   EF                     DB   lsb(mul_)   ;    *
032B   23                     DB   lsb(add_)   ;    +
032C   52                     DB   lsb(hdot_)   ;    ,
032D   B9                     DB   lsb(sub_)   ;    -
032E   58                     DB   lsb(dot_)   ;    .
032F   EC                     DB   lsb(div_)   ;    /
0330   8A                     DB   lsb(num_)   ;    0
0331   8A                     DB   lsb(num_)   ;    1
0332   8A                     DB   lsb(num_)   ;    2
0333   8A                     DB   lsb(num_)   ;    3
0334   8A                     DB   lsb(num_)   ;    4
0335   8A                     DB   lsb(num_)   ;    5
0336   8A                     DB   lsb(num_)   ;    6
0337   8A                     DB   lsb(num_)   ;    7
0338   8A                     DB   lsb(num_)   ;    8
0339   8A                     DB   lsb(num_)   ;    9
033A   4F                     DB   lsb(def_)   ;    :
033B   93                     DB   lsb(ret_)   ;    ;
033C   D8                     DB   lsb(lt_)   ;    <
033D   C0                     DB   lsb(eq_)   ;    =
033E   D4                     DB   lsb(gt_)   ;    >
033F   D1                     DB   lsb(getRef_)   ;    ?
0340   7F                     DB   lsb(fetch_)   ;    @
0341   40                     DB   lsb(call_)   ;    A
0342   40                     DB   lsb(call_)   ;    B
0343   40                     DB   lsb(call_)   ;    C
0344   40                     DB   lsb(call_)   ;    D
0345   40                     DB   lsb(call_)   ;    E
0346   40                     DB   lsb(call_)   ;    F
0347   40                     DB   lsb(call_)   ;    G
0348   40                     DB   lsb(call_)   ;    H
0349   40                     DB   lsb(call_)   ;    I
034A   40                     DB   lsb(call_)   ;    J
034B   40                     DB   lsb(call_)   ;    K
034C   40                     DB   lsb(call_)   ;    L
034D   40                     DB   lsb(call_)   ;    M
034E   40                     DB   lsb(call_)   ;    N
034F   40                     DB   lsb(call_)   ;    O
0350   40                     DB   lsb(call_)   ;    P
0351   40                     DB   lsb(call_)   ;    Q
0352   40                     DB   lsb(call_)   ;    R
0353   40                     DB   lsb(call_)   ;    S
0354   40                     DB   lsb(call_)   ;    T
0355   40                     DB   lsb(call_)   ;    U
0356   40                     DB   lsb(call_)   ;    V
0357   40                     DB   lsb(call_)   ;    W
0358   40                     DB   lsb(call_)   ;    X
0359   40                     DB   lsb(call_)   ;    Y
035A   40                     DB   lsb(call_)   ;    Z
035B   28                     DB   lsb(arrDef_)   ;    [
035C   00                     DB   lsb(alt_)   ;    \
035D   3A                     DB   lsb(arrEnd_)   ;    ]
035E   1A                     DB   lsb(xor_)   ;    ^
035F   B4                     DB   lsb(neg_)   ;    _
0360   F5                     DB   lsb(str_)   ;    `
0361   E0                     DB   lsb(var_)   ;    a
0362   E0                     DB   lsb(var_)   ;    b
0363   E0                     DB   lsb(var_)   ;    c
0364   E0                     DB   lsb(var_)   ;    d
0365   E0                     DB   lsb(var_)   ;    e
0366   E0                     DB   lsb(var_)   ;    f
0367   E0                     DB   lsb(var_)   ;    g
0368   E0                     DB   lsb(var_)   ;    h
0369   E0                     DB   lsb(var_)   ;    i
036A   E0                     DB   lsb(var_)   ;    j
036B   E0                     DB   lsb(var_)   ;    k
036C   E0                     DB   lsb(var_)   ;    l
036D   E0                     DB   lsb(var_)   ;    m
036E   E0                     DB   lsb(var_)   ;    n
036F   E0                     DB   lsb(var_)   ;    o
0370   E0                     DB   lsb(var_)   ;    p
0371   E0                     DB   lsb(var_)   ;    q
0372   E0                     DB   lsb(var_)   ;    r
0373   E0                     DB   lsb(var_)   ;    s
0374   E0                     DB   lsb(var_)   ;    t
0375   E0                     DB   lsb(var_)   ;    u
0376   E0                     DB   lsb(var_)   ;    v
0377   E0                     DB   lsb(var_)   ;    w
0378   E0                     DB   lsb(var_)   ;    x
0379   E0                     DB   lsb(var_)   ;    y
037A   E0                     DB   lsb(var_)   ;    z
037B   A7                     DB   lsb(shl_)   ;    {
037C   0C                     DB   lsb(or_)   ;    |
037D   AC                     DB   lsb(shr_)   ;    }
037E   15                     DB   lsb(inv_)   ;    ~
037F   87                     DB   lsb(nop_)   ;    backspace
0380                             ; ***********************************************************************
0380                             ; Alternate function codes		
0380                             ; ***********************************************************************		
0380                CTRLCODES:      
0380                ALTCODES:      
0380   8F                     DB   lsb(empty_)   ; NUL ^@
0381   8F                     DB   lsb(empty_)   ; SOH ^A
0382   EC                     DB   lsb(toggleBase_)   ; STX ^B
0383   8F                     DB   lsb(empty_)   ; ETX ^C
0384   8F                     DB   lsb(empty_)   ; EOT ^D
0385   AC                     DB   lsb(edit_)   ; ENQ ^E
0386   8F                     DB   lsb(empty_)   ; ACK ^F
0387   8F                     DB   lsb(empty_)   ; BEL ^G
0388   90                     DB   lsb(backsp_)   ; BS  ^H
0389   8F                     DB   lsb(empty_)   ; TAB ^I
038A   A5                     DB   lsb(reedit_)   ; LF  ^J
038B   8F                     DB   lsb(empty_)   ; VT  ^K
038C   BF                     DB   lsb(list_)   ; FF  ^L
038D   8F                     DB   lsb(empty_)   ; CR  ^M
038E   8F                     DB   lsb(empty_)   ; SO  ^N
038F   8F                     DB   lsb(empty_)   ; SI  ^O
0390   DB                     DB   lsb(printStack_)   ; DLE ^P
0391   8F                     DB   lsb(empty_)   ; DC1 ^Q
0392   8F                     DB   lsb(empty_)   ; DC2 ^R
0393   8F                     DB   lsb(empty_)   ; DC3 ^S
0394   8F                     DB   lsb(empty_)   ; DC4 ^T
0395   8F                     DB   lsb(empty_)   ; NAK ^U
0396   8F                     DB   lsb(empty_)   ; SYN ^V
0397   8F                     DB   lsb(empty_)   ; ETB ^W
0398   8F                     DB   lsb(empty_)   ; CAN ^X
0399   8F                     DB   lsb(empty_)   ; EM  ^Y
039A   8F                     DB   lsb(empty_)   ; SUB ^Z
039B   8F                     DB   lsb(empty_)   ; ESC ^[
039C   8F                     DB   lsb(empty_)   ; FS  ^\
039D   8F                     DB   lsb(empty_)   ; GS  ^]
039E   8F                     DB   lsb(empty_)   ; RS  ^^
039F   8F                     DB   lsb(empty_)   ; US  ^_)
03A0   09                     DB   lsb(aNop_)   ; SP  ^`
03A1   15                     DB   lsb(cStore_)   ;    !
03A2   09                     DB   lsb(aNop_)   ;    "
03A3   09                     DB   lsb(aNop_)   ;    #
03A4   09                     DB   lsb(aNop_)   ;    $  ( -- adr ) text input ptr
03A5   09                     DB   lsb(aNop_)   ;    %
03A6   09                     DB   lsb(aNop_)   ;    &
03A7   09                     DB   lsb(aNop_)   ;    '
03A8   31                     DB   lsb(ifte_)   ;    (  ( b -- )
03A9   09                     DB   lsb(aNop_)   ;    )
03AA   09                     DB   lsb(aNop_)   ;    *
03AB   72                     DB   lsb(incr_)   ;    +  ( adr -- ) decrements variable at address
03AC   09                     DB   lsb(aNop_)   ;    ,
03AD   09                     DB   lsb(aNop_)   ;    -
03AE   09                     DB   lsb(aNop_)   ;    .
03AF   09                     DB   lsb(aNop_)   ;    /
03B0   09                     DB   lsb(aNop_)   ;    0
03B1   09                     DB   lsb(aNop_)   ;    1
03B2   09                     DB   lsb(aNop_)   ;    2
03B3   09                     DB   lsb(aNop_)   ;    3
03B4   09                     DB   lsb(aNop_)   ;    4
03B5   09                     DB   lsb(aNop_)   ;    5
03B6   09                     DB   lsb(aNop_)   ;    6
03B7   09                     DB   lsb(aNop_)   ;    7
03B8   09                     DB   lsb(aNop_)   ;    8
03B9   09                     DB   lsb(aNop_)   ;    9
03BA   09                     DB   lsb(aNop_)   ;    :  start defining a macro
03BB   09                     DB   lsb(aNop_)   ;    ;
03BC   09                     DB   lsb(aNop_)   ;    <
03BD   09                     DB   lsb(aNop_)   ;    =
03BE   09                     DB   lsb(aNop_)   ;    >
03BF   09                     DB   lsb(aNop_)   ;    ?
03C0   05                     DB   lsb(cFetch_)   ;    @
03C1   09                     DB   lsb(aNop_)   ;    A
03C2   A3                     DB   lsb(break_)   ;    B
03C3   87                     DB   lsb(nop_)   ;    C
03C4   1B                     DB   lsb(depth_)   ;    D  ( -- val ) depth of data stack
03C5   2A                     DB   lsb(emit_)   ;    E   ( val -- ) emits a char to output
03C6   09                     DB   lsb(aNop_)   ;    F
03C7   3C                     DB   lsb(go_)   ;    G   ( -- ? ) execute mint definition
03C8   09                     DB   lsb(aNop_)   ;    H
03C9   7D                     DB   lsb(inPort_)   ;    I  ( port -- val )
03CA   09                     DB   lsb(aNop_)   ;    J
03CB   89                     DB   lsb(key_)   ;    K  ( -- val )  read a char from input
03CC   09                     DB   lsb(aNop_)   ;    L
03CD   09                     DB   lsb(aNop_)   ;    M
03CE   92                     DB   lsb(newln_)   ;    N   ; prints a newline to output
03CF   97                     DB   lsb(outPort_)   ;    O  ( val port -- )
03D0   A5                     DB   lsb(printStk_)   ;    P  ( -- ) non-destructively prints stack
03D1   09                     DB   lsb(aNop_)   ;    Q  quits from Mint REPL
03D2   9D                     DB   lsb(rot_)   ;    R  ( a b c -- b c a )
03D3   09                     DB   lsb(aNop_)   ;    S
03D4   09                     DB   lsb(aNop_)   ;    T
03D5   09                     DB   lsb(aNop_)   ;    U
03D6   09                     DB   lsb(aNop_)   ;    V
03D7   09                     DB   lsb(aNop_)   ;    W   ; ( b -- ) if false, skip to end of loop
03D8   33                     DB   lsb(exec_)   ;    X
03D9   09                     DB   lsb(aNop_)   ;    Y
03DA   A7                     DB   lsb(editDef_)   ;    Z
03DB   00                     DB   lsb(cArrDef_)   ;    [
03DC   13                     DB   lsb(comment_)   ;    \  comment text, skips reading until end of line
03DD   09                     DB   lsb(aNop_)   ;    ]
03DE   0B                     DB   lsb(charCode_)   ;    ^
03DF   09                     DB   lsb(aNop_)   ;    _)  ( n -- b ) returns true if -ve
03E0   09                     DB   lsb(aNop_)   ;    `
03E1   68                     DB   lsb(sysVar_)   ;    a  ; start of data stack variable
03E2   68                     DB   lsb(sysVar_)   ;    b  ; base16 variable
03E3   68                     DB   lsb(sysVar_)   ;    c  ; TIBPtr variable
03E4   68                     DB   lsb(sysVar_)   ;    d
03E5   68                     DB   lsb(sysVar_)   ;    e
03E6   68                     DB   lsb(sysVar_)   ;    f
03E7   68                     DB   lsb(sysVar_)   ;    g
03E8   68                     DB   lsb(sysVar_)   ;    h  ; heap ptr variable
03E9   6D                     DB   lsb(i_)   ;    i  ; returns index variable of current loop
03EA   84                     DB   lsb(j_)   ;    j  ; returns index variable of outer loop
03EB   68                     DB   lsb(sysVar_)   ;    k
03EC   68                     DB   lsb(sysVar_)   ;    l
03ED   68                     DB   lsb(sysVar_)   ;    m  ( a b -- c ) return the minimum value
03EE   68                     DB   lsb(sysVar_)   ;    n
03EF   68                     DB   lsb(sysVar_)   ;    o
03F0   68                     DB   lsb(sysVar_)   ;    p
03F1   68                     DB   lsb(sysVar_)   ;    q
03F2   68                     DB   lsb(sysVar_)   ;    r
03F3   68                     DB   lsb(sysVar_)   ;    s
03F4   68                     DB   lsb(sysVar_)   ;    t
03F5   68                     DB   lsb(sysVar_)   ;    u
03F6   68                     DB   lsb(sysVar_)   ;    v
03F7   68                     DB   lsb(sysVar_)   ;    w
03F8   68                     DB   lsb(sysVar_)   ;    x
03F9   68                     DB   lsb(sysVar_)   ;    y
03FA   68                     DB   lsb(sysVar_)   ;    z
03FB   4E                     DB   lsb(group_)   ;    {
03FC   09                     DB   lsb(aNop_)   ;    |
03FD   46                     DB   lsb(endGroup_)   ;    }
03FE   09                     DB   lsb(aNop_)   ;    ~
03FF   09                     DB   lsb(aNop_)   ;    BS		
0400                             ; **********************************************************************			
0400                             ; code page primitive routines
0400                             ; **********************************************************************
0400                          ALIGN   $100   
0400                CODEPAGE:      
0400                ALT_:        
0400   C3 0C 05               JP   alt   
0403                AND_:        
0403   E1                     POP   HL   ; HL=NOS DE=TOS
0404   7B                     LD   A,E   
0405   A5                     AND   L   
0406   5F                     LD   E,A   
0407   7A                     LD   A,D   
0408   A4                     AND   H   
0409   57                     LD   D,A   
040A   FD E9                  JP   (IY)   
040C                OR_:         
040C   E1                     POP   HL   ; HL=NOS DE=TOS
040D   7B                     LD   A,E   
040E   B5                     OR   L   
040F   5F                     LD   E,A   
0410   7A                     LD   A,D   
0411   B4                     OR   H   
0412   57                     LD   D,A   
0413   FD E9                  JP   (IY)   
0415                INV_:        
0415   21 FF FF               LD   HL,$FFFF   
0418   18 01                  JR   xor1   
041A                XOR_:        
041A   E1                     POP   HL   ; HL=NOS DE=TOS
041B                XOR1:        
041B   7B                     LD   A,E   
041C   AD                     XOR   L   
041D   5F                     LD   E,A   
041E   7A                     LD   A,D   
041F   AA                     XOR   D   
0420   57                     LD   D,A   
0421   FD E9                  JP   (IY)   
0423                ADD_:        
0423   E1                     POP   HL   ; HL=NOS DE=TOS
0424   19                     ADD   HL,DE   ; NOS+TOS
0425   EB                     EX   DE,HL   
0426   FD E9                  JP   (IY)   
0428                ARRDEF_:      
0428                ARRDEF:      ;= 18
0428   3E 00                  LD   A,FALSE   
042A                ARRDEF1:      
042A   FD 21 45 02            LD   IY,compNEXT   
042E   32 36 1A               LD   (vByteMode),A   
0431   2A 0E 1A               LD   HL,(vHeapPtr)   ; HL = heap ptr
0434   CD 08 07               CALL   rpush   ; save start of array \[  \]
0437   C3 3C 02               JP   NEXT   ; hardwired to NEXT
043A                ARREND_:      
043A   C3 FD 06               JP   arrEnd   
043D                BEGIN_:      
043D   C3 8C 05               JP   begin   
0440                CALL_:       
0440   60 69                  LD   HL,BC   
0442   CD 08 07               CALL   rpush   ; save Instruction Pointer
0445   0A                     LD   A,(BC)   
0446   CD 25 07               CALL   lookupDef1   
0449   4E                     LD   C,(HL)   
044A   23                     INC   HL   
044B   46                     LD   B,(HL)   
044C   0B                     DEC   BC   
044D   FD E9                  JP   (IY)   ; Execute code from User def
044F                DEF_:        
044F   C3 4D 05               JP   def   
0452                HDOT_:       ; print hexadecimal
0452   EB                     EX   DE,HL   
0453   CD 84 07               CALL   printhex   
0456   18 04                  JR   dot2   
0458                DOT_:        
0458   EB                     EX   DE,HL   
0459   CD 60 07               CALL   printdec   
045C                DOT2:        
045C   D1                     POP   DE   ; consume TOS
045D   3E 20                  LD   A," "   ; print space
045F   CD 85 00               CALL   putchar   
0462   FD E9                  JP   (IY)   
0464                DROP_:       
0464   D1                     POP   DE   
0465   FD E9                  JP   (IY)   
0467                DUP_:        
0467   D5                     PUSH   DE   
0468   FD E9                  JP   (IY)   
046A                ETX_:        
046A                ETX:         
046A   21 80 E7               LD   HL,-DSTACK   
046D   39                     ADD   HL,SP   
046E   D2 74 04               JP   NC,etx1   
0471   31 80 18               LD   SP,DSTACK   
0474                ETX1:        
0474   C3 DE 01               JP   interpret   
0477                EXIT_:       
0477   03                     INC   BC   
0478   C5                     PUSH   BC   
0479   CD 13 07               CALL   rpop   
047C   44 4D                  LD   BC,HL   
047E   C9                     RET      
047F                FETCH_:      
047F   EB                     EX   DE,HL   
0480                FETCH1:      
0480   5E                     LD   E,(HL)   
0481   23                     INC   HL   
0482   56                     LD   D,(HL)   
0483   FD E9                  JP   (IY)   
0485                HEX_:        
0485   FD E9                  JP   (IY)   
0487                NOP_:        
0487   C3 3C 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
048A                NUM_:        
048A   C3 69 05               JP   num   
048D                OVER_:       
048D   E1                     POP   HL   ; HL=NOS
048E   E5                     PUSH   HL   
048F   D5                     PUSH   DE   
0490   EB                     EX   DE,HL   
0491   FD E9                  JP   (IY)   
0493                RET_:        
0493   CD 13 07               CALL   rpop   ; Restore Instruction pointer
0496   44 4D                  LD   BC,HL   
0498   FD E9                  JP   (IY)   
049A                STORE_:      
049A   EB                     EX   DE,HL   ; HL = TOS
049B   D1                     POP   DE   ; DE = NOS
049C   73                     LD   (HL),E   
049D   23                     INC   HL   
049E   72                     LD   (HL),D   
049F   D1                     POP   DE   ; DE = TOS
04A0   FD E9                  JP   (IY)   
04A2                SWAP_:       
04A2   EB                     EX   DE,HL   
04A3   E3                     EX   (SP),HL   
04A4   EB                     EX   DE,HL   
04A5   FD E9                  JP   (IY)   
04A7                SHL_:        
04A7   EB                     EX   DE,HL   
04A8   29                     ADD   HL,HL   ; shift left
04A9   EB                     EX   DE,HL   
04AA   FD E9                  JP   (IY)   
04AC                SHR_:        
04AC   EB                     EX   DE,HL   
04AD                SHR1:        
04AD   CB 3C                  SRL   H   
04AF   CB 1D                  RR   L   
04B1   EB                     EX   DE,HL   
04B2   FD E9                  JP   (IY)   
04B4                NEG_:        
04B4   21 00 00               LD   HL,0   
04B7   18 01                  JR   sub2   
04B9                SUB_:        
04B9                SUB1:        
04B9   E1                     POP   HL   
04BA                SUB2:        
04BA   B7                     OR   A   
04BB   ED 52                  SBC   HL,DE   
04BD   EB                     EX   DE,HL   
04BE   FD E9                  JP   (IY)   
04C0                EQ_:         
04C0   E1                     POP   HL   ; DE=TOS HL=NOS
04C1   B7                     OR   A   ; reset the carry flag
04C2   ED 52                  SBC   HL,DE   ; NOS-TOS if equal HL=0
04C4   EB                     EX   DE,HL   
04C5   28 05                  JR   Z,eq1   
04C7                EQ0:         ; if false
04C7   11 00 00               LD   DE,0   
04CA   FD E9                  JP   (IY)   
04CC                EQ1:         ; if true
04CC   11 01 00               LD   DE,1   
04CF   FD E9                  JP   (IY)   
04D1                GETREF_:      
04D1   C3 04 05               JP   getRef   
04D4                GT_:         
04D4   E1                     POP   HL   
04D5   EB                     EX   DE,HL   
04D6   18 01                  JR   lt1   
04D8                LT_:         
04D8   E1                     POP   HL   
04D9                LT1:         
04D9   B7                     OR   A   ; reset the carry flag
04DA   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04DC   38 EE                  JR   C,eq1   
04DE   18 E7                  JR   eq0   
04E0                VAR_:        
04E0   3E DF                  LD   A,varsOfs   
04E2                VAR1:        
04E2   60                     LD   H,B   
04E3   69                     LD   L,C   
04E4   86                     ADD   A,(HL)   
04E5   87                     ADD   A,A   
04E6   D5                     PUSH   DE   ; push TOS
04E7   5F                     LD   E,A   ; TOS = ptr to var
04E8   16 1A                  LD   D,msb(mintVars)   
04EA   FD E9                  JP   (IY)   
04EC                DIV_:        
04EC   C3 30 05               JP   div   
04EF                MUL_:        
04EF   C3 17 05               JP   mul   
04F2                AGAIN_:      
04F2   C3 8E 05               JP   again   
04F5                STR_:        
04F5                STR:         ;= 17
04F5   03                     INC   BC   
04F6                STR1:        
04F6   0A                     LD   A,(BC)   
04F7   03                     INC   BC   
04F8   FE 60                  CP   "`"   ; ` is the string terminator
04FA   28 05                  JR   Z,str2   
04FC   CD 85 00               CALL   putchar   
04FF   18 F5                  JR   str1   
0501                STR2:        
0501   0B                     DEC   BC   
0502   FD E9                  JP   (IY)   
0504                             ;*******************************************************************
0504                             ; Code commands Commands continued
0504                             ;*******************************************************************
0504                GETREF:      ;= 8
0504   03                     INC   BC   
0505   0A                     LD   A,(BC)   
0506   CD 32 07               CALL   getGroup   
0509   C3 80 04               JP   fetch1   
050C                ALT:         ;=13
050C   03                     INC   BC   
050D   0A                     LD   A,(BC)   
050E   21 80 03               LD   HL,altCodes   
0511   85                     ADD   A,L   
0512   6F                     LD   L,A   
0513   6E                     LD   L,(HL)   
0514   26 06                  LD   H,msb(altCodePage)   
0516   E9                     JP   (HL)   
0517                MUL:         ;=25
0517   E1                     POP   HL   ; HL=NOS DE=TOS
0518   44                     LD   B,H   ; BC = 2nd value
0519   4D                     LD   C,L   
051A   21 00 00               LD   HL,0   
051D   3E 10                  LD   A,16   
051F                MUL1:        
051F   29                     ADD   HL,HL   
0520   CB 13                  RL   E   
0522   CB 12                  RL   D   
0524   30 04                  JR   NC,mul2   
0526   09                     ADD   HL,BC   
0527   30 01                  JR   NC,mul2   
0529   13                     INC   DE   
052A                MUL2:        
052A   3D                     DEC   A   
052B   20 F2                  JR   NZ,mul1   
052D   EB                     EX   DE,HL   
052E   FD E9                  JP   (IY)   
0530                DIV:         ;=29
0530   C1                     POP   BC   ; BC=NOS DE=TOS
0531   21 00 00               LD   HL,0   ; zero the remainder
0534   3E 10                  LD   A,16   ; loop counter
0536                DIV1:        ; shift the bits from BC (numerator) into HL (accumulator)
0536   CB 21                  SLA   C   
0538   CB 10                  RL   B   
053A   ED 6A                  ADC   HL,HL   
053C   ED 52                  SBC   HL,DE   ; check if remainder >= denominator (HL>=DE)
053E   38 03                  JR   C,div2   
0540   0C                     INC   C   
0541   18 01                  JR   div3   
0543                DIV2:        ; remainder is not >= denominator, so we have to add DE back to HL
0543   19                     ADD   HL,DE   
0544                DIV3:        
0544   3D                     DEC   A   
0545   20 EF                  JR   NZ,div1   
0547   50 59                  LD   DE,BC   ; result from BC to DE
0549   D5                     PUSH   DE   ; push Result
054A   EB                     EX   DE,HL   ; TOS=remainder
054B   FD E9                  JP   (IY)   
054D                             ;=30
054D                DEF:         ; Create a colon definition
054D   03                     INC   BC   
054E   0A                     LD   A,(BC)   ; Get the next character
054F   CD 1E 07               CALL   lookupDef   
0552   D5                     PUSH   DE   ; save return SP
0553   ED 5B 0E 1A            LD   DE,(vHeapPtr)   ; start of defintion
0557   73                     LD   (HL),E   ; Save low byte of address in CFA
0558   23                     INC   HL   
0559   72                     LD   (HL),D   ; Save high byte of address in CFA+1
055A   EB                     EX   DE,HL   ; HL=HeapPtr
055B   D1                     POP   DE   ; restore return SP
055C                DEF1:        ; Skip to end of definition
055C   03                     INC   BC   ; Point to next character
055D   0A                     LD   A,(BC)   ; Get the next character
055E   77                     LD   (HL),A   ; write to definition
055F   23                     INC   HL   
0560   FE 3B                  CP   ";"   ; Is it a semicolon
0562   20 F8                  JR   NZ,def1   ; end the definition
0564   22 0E 1A               LD   (vHeapPtr),HL   ; bump heap ptr to after definiton
0567   FD E9                  JP   (IY)   
0569                NUM:         ;=41
0569   D5                     PUSH   DE   ; push down TOS
056A   21 00 00               LD   HL,$0000   ; Clear HL to accept the number
056D   0A                     LD   A,(BC)   ; Get the character which is a numeral
056E                NUM1:        ; corrected KB 24/11/21
056E   D6 30                  SUB   $30   ; Form decimal digit
0570   85                     ADD   A,L   ; Add into bottom of HL
0571   6F                     LD   L,A   
0572   3E 00                  LD   A,0   ; Clear A
0574   8C                     ADC   A,H   ; Add with carry H-reg
0575   67                     LD   H,A   ; Put result in H-reg
0576   03                     INC   BC   ; Increment IP
0577   0A                     LD   A,(BC)   ; and get the next character
0578   FE 30                  CP   $30   ; Less than $30
057A   38 0C                  JR   C,num2   ; Not a number / end of number
057C   FE 3A                  CP   $3A   ; Greater or equal to $3A
057E   30 08                  JR   NC,num2   ; Not a number / end of number
0580   29                     ADD   HL,HL   ; 2X
0581   54 5D                  LD   DE,HL   
0583   29                     ADD   HL,HL   ; 4X
0584   29                     ADD   HL,HL   ; 8X
0585   19                     ADD   HL,DE   ; 2X  + 8X  = 10X
0586   18 E6                  JR   num1   
0588                NUM2:        
0588   0B                     DEC   BC   
0589   EB                     EX   DE,HL   ; Put the number in TOS
058A   FD E9                  JP   (IY)   ; and process the next character
058C                             ;=41
058C                BEGIN:       ; Left parentesis begins a loop
058C                             ;         LD A,E                      ; zero?
058C                             ;         OR D
058C                             ;         JR Z,begin1                 ; if false skip to closing brace
058C                             ;         PUSH DE                     ; save loop limit
058C                             ;         EXX
058C                             ;         LD HL,BC                    ; create loop stackframe
058C                             ;         CALL rpush                  ; -> loopAddress
058C                             ;         POP HL                      ; pop saved loop limit
058C                             ;         CALL rpush                  ; -> loopLimit
058C                             ;         LD HL,0                     ; inital value
058C                             ;         CALL rpush                  ; -> loopVar
058C                             ;         JR begin3
058C                             ; begin1:
058C                             ;         EXX
058C                             ;         PUSH DE                     ; preserve RSP
058C                             ;         LD E,1                      ; initalise nesting (include opening "(")
058C                             ; begin2:
058C                             ;         INC BC                      ; inc IP
058C                             ;         LD A,(BC)                   ; read next char
058C                             ;         CALL nesting                ; calc nesting
058C                             ;         XOR A
058C                             ;         OR E
058C                             ;         JR NZ,begin2                ; loop until nesting 0
058C                             ;         POP DE                      ; restore RSP
058C                             ; begin3:
058C                             ;         EXX
058C                             ;         POP DE                      ; consume TOS
058C   FD E9                  JP   (IY)   
058E                AGAIN:       ;=51
058E                             ;         EXX
058E                             ;         CALL rpop                   ; HL=loopVar
058E                             ;         LD A,H                      ; check for -1 ($FF) (IFTEMode)
058E                             ;         AND L
058E                             ;         INC A
058E                             ;         JR NZ,again1
058E                             ;         EXX
058E                             ;         PUSH DE                     ; IFTEMode
058E                             ;         LD D,0                      ; return FALSE
058E                             ;         JP (IY)
058E                             ; again1:                             ; HL=loopVar
058E                             ;         PUSH BC                     ; save IP
058E                             ;         LD BC,HL                    ; BC=loopVar
058E                             ;         CALL rpop                   ; HL=loopLimit
058E                             ;         DEC HL                      ; reduce loopLimit by 1
058E                             ;         OR A
058E                             ;         SBC HL,BC                   ; (loopLimit-1) - loopVar
058E                             ;         JR Z,again2                 ; exit if loopVar = loopLimit-1
058E                             ;         CALL rpop                   ; HL=loopAddress (SP)=IP
058E                             ;         EX (SP),HL                  ; (SP)=loopAddress HL=IP
058E                             ;         LD HL,BC                    ; HL=loopVar
058E                             ;         INC HL                      ; inc loopVar
058E                             ;         POP BC                      ; BC=loopAddress
058E                             ;         DEC DE                      ; move RSP to point to loopVar
058E                             ;         DEC DE
058E                             ;         DEC DE
058E                             ;         DEC DE
058E                             ;         CALL rpush                  ; rpush loopvar, stackFrame restored
058E                             ;         EXX
058E                             ;         JP (IY)
058E                             ; again2:                             ; terminating loop
058E                             ;         POP BC                      ; restore IP
058E                             ;         INC DE                      ; remove the stackframe
058E                             ;         INC DE
058E                             ;         EXX
058E   FD E9                  JP   (IY)   
0590                             ; **************************************************************************
0590                             ; Alt code primitives
0590                             ; **************************************************************************
0590                          ALIGN   $100   
0600                ALTCODEPAGE:      
0600                CARRDEF_:      
0600   3E 01                  LD   A,TRUE   
0602   C3 2A 04               JP   arrDef1   
0605                CFETCH_:      
0605   EB                     EX   DE,HL   
0606   16 00                  LD   D,0   
0608   5E                     LD   E,(HL)   
0609                ANOP_:       
0609   FD E9                  JP   (IY)   
060B                CHARCODE_:      
060B   03                     INC   BC   
060C   0A                     LD   A,(BC)   
060D   D5                     PUSH   DE   
060E   16 00                  LD   D,0   
0610   5F                     LD   E,A   
0611   FD E9                  JP   (IY)   
0613                COMMENT_:      
0613   FD E9                  JP   (IY)   
0615                CSTORE_:      
0615   EB                     EX   DE,HL   
0616   D1                     POP   DE   
0617   73                     LD   (HL),E   
0618   D1                     POP   DE   
0619   FD E9                  JP   (IY)   
061B                DEPTH_:      
061B   21 00 00               LD   HL,0   
061E   39                     ADD   HL,SP   
061F   D5                     PUSH   DE   ; preserve TOS
0620   EB                     EX   DE,HL   ; DE=SP
0621   21 80 18               LD   HL,DSTACK   ; HL=start
0624   B7                     OR   A   
0625   ED 52                  SBC   HL,DE   ; start - SP
0627   C3 AD 04               JP   shr1   
062A                EMIT_:       
062A   7B                     LD   A,E   
062B   D1                     POP   DE   ; consume
062C   CD 85 00               CALL   putchar   
062F   FD E9                  JP   (IY)   
0631                IFTE_:       
0631                             ;         LD A,E
0631                             ;         OR D
0631                             ;         JP NZ,ifte1
0631                             ;         INC DE                      ; TOS=TRUE for else clause
0631                             ;         JP begin1                   ; skip to closing ) works with \) too
0631                             ; ifte1:
0631                             ;         LD HL,-1                    ; push -1 on RSTACK to indicate IFTEMode
0631                             ;         CALL rpush
0631                             ;         POP DE                      ; consume
0631   FD E9                  JP   (IY)   
0633                EXEC_:       
0633   CD 38 06               CALL   exec1   
0636   FD E9                  JP   (IY)   
0638                EXEC1:       
0638   E1                     POP   HL   ; HL = RET address
0639   E3                     EX   (SP),HL   ; HL = NOS, (SP) = RET
063A   EB                     EX   DE,HL   ; HL = TOS, DE = NOS
063B   E9                     JP   (HL)   ; JP to machine code, RET will return to exec_
063C                GO_:         
063C   D5                     PUSH   DE   ; push TOS
063D   60 69                  LD   HL,BC   
063F   CD 08 07               CALL   rpush   ; save Instruction Pointer
0642   C1                     POP   BC   ; pop TOS
0643   0B                     DEC   BC   ; decrement to just before
0644   FD E9                  JP   (IY)   ; Execute code from User def
0646                ENDGROUP_:      
0646   CD 13 07               CALL   rpop   
0649   22 06 1A               LD   (vDEFS),HL   
064C   FD E9                  JP   (IY)   
064E                GROUP_:      
064E   2A 06 1A               LD   HL,(vDEFS)   
0651   CD 08 07               CALL   rpush   
0654   53                     LD   D,E   ; TOS * 64
0655   1E 00                  LD   E,0   
0657   CB 3A                  SRL   D   
0659   CB 1B                  RR   E   
065B   CB 3A                  SRL   D   
065D   CB 1B                  RR   E   
065F   21 C0 1A               LD   HL,DEFS   
0662   19                     ADD   HL,DE   ; HL=DEFS + TOS * 64
0663   22 06 1A               LD   (vDEFS),HL   ; store in vDEFS
0666   FD E9                  JP   (IY)   
0668                SYSVAR_:      
0668   3E 9F                  LD   A,sysvarsOfs   
066A   C3 E2 04               JP   var1   
066D                I_:          
066D   21 00 00               LD   HL,0   ; loop stackframe offset
0670                I1:          
0670                             ; PUSH DE                     ; push down TOS
0670                             ; EXX
0670                             ; PUSH DE                     ; save RSP (loopVar)
0670                             ; EXX
0670                             ; POP DE                      ; DE=RSP
0670                             ; ADD HL,DE                   ; HL=RSP+offset
0670                             ; EX DE,HL                    ; TOS=RSP+offset
0670   FD E9                  JP   (IY)   
0672                INCR_:       
0672   E1                     POP   HL   ; DE=addr HL=incr
0673   EB                     EX   DE,HL   ; HL=addr DE=incr
0674   7B                     LD   A,E   
0675   86                     ADD   A,(HL)   
0676   77                     LD   (HL),A   
0677   23                     INC   HL   
0678   7A                     LD   A,D   
0679   8E                     ADC   A,(HL)   
067A   77                     LD   (HL),A   
067B   FD E9                  JP   (IY)   
067D                INPORT_:      
067D   4B                     LD   C,E   
067E   ED 58                  IN   E,(C)   
0680   16 00                  LD   D,0   
0682   FD E9                  JP   (IY)   
0684                J_:          
0684   21 06 00               LD   HL,6   
0687   18 E7                  JR   i1   
0689                KEY_:        
0689   D5                     PUSH   DE   ; push down TOS
068A   CD 81 00               CALL   getchar   
068D   5F                     LD   E,A   
068E   16 00                  LD   D,0   
0690   FD E9                  JP   (IY)   
0692                NEWLN_:      
0692   CD 4B 07               CALL   crlf   
0695   FD E9                  JP   (IY)   
0697                OUTPORT_:      
0697   4B                     LD   C,E   
0698   E1                     POP   HL   
0699   ED 69                  OUT   (C),L   
069B   FD E9                  JP   (IY)   
069D                ROT_:        ; a b c -- b c a
069D   E1                     POP   HL   ; (SP)=a HL=b DE=c
069E   E3                     EX   (SP),HL   ; (SP)=b HL=a DE=c
069F   EB                     EX   DE,HL   ; (SP)=b HL=c DE=a
06A0   E5                     PUSH   HL   
06A1   FD E9                  JP   (IY)   
06A3                BREAK_:      
06A3                             ;         LD A,E                      ; zero?
06A3                             ;         OR D
06A3                             ;         POP DE                      ; consume
06A3                             ;         JR NZ,break1
06A3                             ;         JP (IY)
06A3                             ; break1:
06A3                             ;         LD HL,6                     ; drop loop frame
06A3                             ;         ADD HL,DE
06A3                             ;         EX DE,HL
06A3                             ;         JP begin1                   ; skip to end of loop
06A3   FD E9                  JP   (IY)   
06A5                PRINTSTK_:      
06A5   18 36                  JR   printStk   
06A7                EDITDEF_:      
06A7                             ;=
06A7                             ;*******************************************************************
06A7                             ; Alt Code commands Commands continued
06A7                             ;*******************************************************************
06A7                             ;=54
06A7                EDITDEF:      ; lookup up def based on number
06A7   3E 41                  LD   A,"A"   
06A9   83                     ADD   A,E   
06AA   08                     EX   AF,AF'   
06AB   2A 06 1A               LD   HL,(vDEFS)   
06AE   19                     ADD   HL,DE   
06AF   19                     ADD   HL,DE   
06B0   5E                     LD   E,(HL)   
06B1   23                     INC   HL   
06B2   56                     LD   D,(HL)   
06B3   EB                     EX   DE,HL   
06B4   7E                     LD   A,(HL)   
06B5   FE 3B                  CP   ";"   
06B7   11 00 19               LD   DE,TIB   
06BA   28 14                  JR   Z,editDef3   
06BC   3E 3A                  LD   A,":"   
06BE   CD 46 07               CALL   writeChar   
06C1   08                     EX   AF,AF'   
06C2   CD 46 07               CALL   writeChar   
06C5   18 01                  JR   editDef2   
06C7                EDITDEF1:      
06C7   23                     INC   HL   
06C8                EDITDEF2:      
06C8   7E                     LD   A,(HL)   
06C9   CD 46 07               CALL   writeChar   
06CC   FE 3B                  CP   ";"   
06CE   20 F7                  JR   NZ,editDef1   
06D0                EDITDEF3:      
06D0   21 00 19               LD   HL,TIB   
06D3   EB                     EX   DE,HL   
06D4   B7                     OR   A   
06D5   ED 52                  SBC   HL,DE   
06D7   22 04 1A               LD   (vTIBPtr),HL   
06DA   D1                     POP   DE   ; consume
06DB   FD E9                  JP   (IY)   
06DD                PRINTSTK:      ;= 40
06DD   CD FF 06               CALL   enter   
06E0   5C 61 40 32 2D 5C 44 31 2D 28 22 40 5C 62 40 5C 28 2C 29 28 2E 29 32 2D 29 27 00 .CSTR   "\\a@2-\\D1-(",$22,"@\\b@\\(,)(.)2-)'"   
06FB   FD E9                  JP   (IY)   
06FD                             ;*******************************************************************
06FD                             ; Misc Commands continued
06FD                             ;*******************************************************************
06FD                ARREND:      ;=33
06FD                             ;         EXX
06FD                             ;         CALL rpop                   ; DE = start of array
06FD                             ;         PUSH HL
06FD                             ;         EXX
06FD                             ;         EX DE,HL                    ; HL=TOS
06FD                             ;         EX (SP),HL                  ; (SP)=TOS HL=start of array
06FD                             ;         EX DE,HL                    ; DE=start of array
06FD                             ;         LD HL,(vHeapPtr)            ; HL = heap ptr
06FD                             ;         OR A
06FD                             ;         SBC HL,DE                   ; bytes on heap
06FD                             ;         LD A,(vByteMode)
06FD                             ;         OR A
06FD                             ;         JR NZ,arrEnd2
06FD                             ;         SRL H                       ; BC = m words
06FD                             ;         RR L
06FD                             ; arrEnd2:
06FD                             ;         PUSH DE                     ; (SP)=start of array
06FD                             ;         EX DE,HL                    ; DE=length
06FD                             ;         LD IY,NEXT                  ; restore IY
06FD   FD E9                  JP   (IY)   ; hardwired to NEXT
06FF                             ;*******************************************************************
06FF                             ; Subroutines
06FF                             ;*******************************************************************
06FF                ENTER:       ;=11
06FF   60 69                  LD   HL,BC   
0701   CD 08 07               CALL   rpush   ; save Instruction Pointer
0704   C1                     POP   BC   
0705   0B                     DEC   BC   
0706   FD E9                  JP   (IY)   ; Execute code in user command
0708                RPUSH:       ; 11
0708   DD 2B                  DEC   IX   
070A   DD 74 00               LD   (IX+0),H   
070D   DD 2B                  DEC   IX   
070F   DD 75 00               LD   (IX+0),L   
0712   C9                     RET      
0713                RPOP:        ; 11
0713   DD 6E 00               LD   L,(IX+0)   
0716   DD 23                  INC   IX   
0718   DD 66 00               LD   H,(IX+0)   
071B   DD 23                  INC   IX   
071D   C9                     RET      
071E                LOOKUPDEF:      ;=20
071E   D6 41                  SUB   "A"   
0720   32 08 1A               LD   (vEdited),A   
0723   18 02                  JR   lookupDef2   
0725                LOOKUPDEF1:      
0725   D6 41                  SUB   "A"   
0727                LOOKUPDEF2:      
0727   87                     ADD   A,A   
0728   2A 06 1A               LD   HL,(vDEFS)   
072B   85                     ADD   A,L   
072C   6F                     LD   L,A   
072D   3E 00                  LD   A,0   
072F   8C                     ADC   A,H   
0730   67                     LD   H,A   
0731   C9                     RET      
0732                GETGROUP:      ;=20
0732   D6 41                  SUB   "A"   
0734   32 08 1A               LD   (vEdited),A   
0737   18 02                  JR   getGroup2   
0739                GETGROUP1:      
0739   D6 41                  SUB   "A"   
073B                GETGROUP2:      
073B   87                     ADD   A,A   
073C   2A 06 1A               LD   HL,(vDEFS)   
073F   85                     ADD   A,L   
0740   6F                     LD   L,A   
0741   3E 00                  LD   A,0   
0743   8C                     ADC   A,H   
0744   67                     LD   H,A   
0745   C9                     RET      
0746                WRITECHAR:      ;=5
0746   12                     LD   (DE),A   
0747   13                     INC   DE   
0748   C3 85 00               JP   putchar   
074B                CRLF:        ;=7
074B   CD 52 07               CALL   printStr   
074E   0D 0A 00               .CSTR   "\r\n"   
0751   C9                     RET      
0752                PRINTSTR:      ;=14
0752   E3                     EX   (SP),HL   
0753   18 04                  JR   printStr2   
0755                PRINTSTR1:      
0755   CD 85 00               CALL   putchar   
0758   23                     INC   HL   
0759                PRINTSTR2:      
0759   7E                     LD   A,(HL)   
075A   B7                     OR   A   
075B   20 F8                  JR   NZ,printStr1   
075D   23                     INC   HL   
075E   E3                     EX   (SP),HL   
075F   C9                     RET      
0760                PRINTDEC:      ;=36
0760   11 F0 D8               LD   DE,-10000   
0763   CD 79 07               CALL   printdec1   
0766   11 18 FC               LD   DE,-1000   
0769   CD 79 07               CALL   printdec1   
076C   11 9C FF               LD   DE,-100   
076F   CD 79 07               CALL   printdec1   
0772   1E F6                  LD   E,-10   
0774   CD 79 07               CALL   printdec1   
0777   1E FF                  LD   E,-1   
0779                PRINTDEC1:      
0779   3E 2F                  LD   A,"0"-1   
077B                PRINTDEC2:      
077B   3C                     INC   A   
077C   19                     ADD   HL,DE   
077D   38 FC                  JR   C,printdec2   
077F   ED 52                  SBC   HL,DE   
0781   C3 85 00               JP   putchar   
0784                PRINTHEX:      ;=29
0784   7C                     LD   A,H   
0785   CD 8D 07               CALL   printhex2   
0788   7D                     LD   A,L   
0789   CD 8D 07               CALL   printhex2   
078C   C9                     RET      
078D                PRINTHEX2:      
078D   4F                     LD   C,A   
078E   1F                     RRA      
078F   1F                     RRA      
0790   1F                     RRA      
0791   1F                     RRA      
0792   CD 96 07               CALL   printhex3   
0795   79                     LD   A,C   
0796                PRINTHEX3:      
0796   E6 0F                  AND   0x0F   
0798   C6 90                  ADD   A,0x90   
079A   27                     DAA      
079B   CE 40                  ADC   A,0x40   
079D   27                     DAA      
079E   C3 85 00               JP   putchar   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                DSTACK:      
1880                          DS   RSIZE   
1900                RSTACK:      
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                MINTVARS:      
1A00                SYSVARS:      
1A00                VS0:      DS   2   ; a
1A02                VBASE16:   DS   2   ; b
1A04                VTIBPTR:   DS   2   ; c
1A06                VDEFS:    DS   2   ; d
1A08                VEDITED:   DS   2   ; e
1A0A                          DS   2   ; f
1A0C                          DS   2   ; g
1A0E                VHEAPPTR:   DS   2   ; h
1A10                          DS   2   ; i
1A12                          DS   2   ; j
1A14                          DS   2   ; k
1A16                          DS   2   ; l
1A18                          DS   2   ; m
1A1A                          DS   2   ; n
1A1C                          DS   2   ; o
1A1E                          DS   2   ; p
1A20                          DS   2   ; q
1A22                          DS   2   ; r
1A24                          DS   2   ; s
1A26                          DS   2   ; t
1A28                          DS   2   ; u
1A2A                          DS   2   ; v
1A2C                          DS   2   ; w
1A2E                          DS   2   ; x
1A30                          DS   2   ; y
1A32                          DS   2   ; z
1A34                VNESTING:   DS   2   ; 
1A36                VBYTEMODE:   DS   2   ; 
1A38                          DS   $30   
1A68                TBPTR:    DS   2   ; reserved for tests
1A6A                RST08:    DS   2   
1A6C                RST10:    DS   2   
1A6E                RST18:    DS   2   
1A70                RST20:    DS   2   
1A72                RST28:    DS   2   
1A74                RST30:    DS   2   ; 
1A76                BAUD:     DS   2   ; 
1A78                INTVEC:   DS   2   ; 
1A7A                NMIVEC:   DS   2   ; 
1A7C                GETCVEC:   DS   2   ; 
1A7E                PUTCVEC:   DS   2   ; 
1A80                             ; ****************************************************************
1A80                             ; VARS Table - holds 26 16-bit user variables
1A80                             ; ****************************************************************
1A80                VARS:     DS   26 * 2   
1AB4                             ; ****************************************************************
1AB4                             ; DEFS Table - holds 26 addresses of user routines
1AB4                             ; ****************************************************************
1AB4                          ALIGN   $40   
1AB4                          .ORG   $-12   
1AB4                          DS   12   ; vars for group 0
1AC0                DEFS:     DS   GRPSIZE * NUMGRPS   
1C00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 30 IN MINT.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 114 IN MINT.asm
                    > USED AT LINE 1105 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 129 IN MINT.asm
                    > USED AT LINE 613 IN MINT.asm
                    > USED AT LINE 770 IN MINT.asm
                    > USED AT LINE 1014 IN MINT.asm
                    > USED AT LINE 1275 IN MINT.asm
                    > USED AT LINE 1287 IN MINT.asm
                    > USED AT LINE 1315 IN MINT.asm
                    > USED AT LINE 1339 IN MINT.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 13 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 14 IN MINT.asm
                    > USED AT LINE 7 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 15 IN MINT.asm
                    > USED AT LINE 10 IN ram.asm
TRUE:               0001 DEFINED AT LINE 16 IN MINT.asm
                    > USED AT LINE 973 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 17 IN MINT.asm
                    > USED AT LINE 44 IN MINT.asm
                    > USED AT LINE 575 IN MINT.asm
NUMGRPS:            0005 DEFINED AT LINE 19 IN MINT.asm
                    > USED AT LINE 59 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
GRPSIZE:            0040 DEFINED AT LINE 20 IN MINT.asm
                    > USED AT LINE 59 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
VARSOFS:            0-21 DEFINED AT LINE 22 IN MINT.asm
                    > USED AT LINE 741 IN MINT.asm
SYSVARSOFS:         0-61 DEFINED AT LINE 23 IN MINT.asm
                    > USED AT LINE 1066 IN MINT.asm
START:              0180 DEFINED AT LINE 32 IN MINT.asm
                    > USED AT LINE 6
ISYSVARS:           0198 DEFINED AT LINE 42 IN MINT.asm
                    > USED AT LINE 53 IN MINT.asm
INITIALIZE:         01A8 DEFINED AT LINE 52 IN MINT.asm
                    > USED AT LINE 34 IN MINT.asm
INIT1:              01B8 DEFINED AT LINE 60 IN MINT.asm
                    > USED AT LINE 65 IN MINT.asm
MACRO:              01C9 DEFINED AT LINE 70 IN MINT.asm
                    > USED AT LINE 122 IN MINT.asm
INTERPRET:          01DE DEFINED AT LINE 82 IN MINT.asm
                    > USED AT LINE 37 IN MINT.asm
                    > USED AT LINE 631 IN MINT.asm
INTERPRET2:         01E8 DEFINED AT LINE 87 IN MINT.asm
                    > USED AT LINE 80 IN MINT.asm
INTERPRET3:         01F1 DEFINED AT LINE 95 IN MINT.asm
                    > USED AT LINE 104 IN MINT.asm
INTERPRET4:         01F7 DEFINED AT LINE 101 IN MINT.asm
                    > USED AT LINE 93 IN MINT.asm
WAITCHAR:           01FC DEFINED AT LINE 113 IN MINT.asm
                    > USED AT LINE 131 IN MINT.asm
                    > USED AT LINE 145 IN MINT.asm
WAITCHAR1:          020F DEFINED AT LINE 124 IN MINT.asm
                    > USED AT LINE 116 IN MINT.asm
WAITCHAR3:          021D DEFINED AT LINE 133 IN MINT.asm
                    > USED AT LINE 120 IN MINT.asm
WAITCHAR4:          0233 DEFINED AT LINE 149 IN MINT.asm
                    > USED AT LINE 118 IN MINT.asm
NEXT:               023C DEFINED AT LINE 177 IN MINT.asm
                    > USED AT LINE 67 IN MINT.asm
                    > USED AT LINE 199 IN MINT.asm
                    > USED AT LINE 581 IN MINT.asm
                    > USED AT LINE 652 IN MINT.asm
COMPNEXT:           0245 DEFINED AT LINE 187 IN MINT.asm
                    > USED AT LINE 577 IN MINT.asm
COMPNEXT1:          0252 DEFINED AT LINE 196 IN MINT.asm
                    > USED AT LINE 193 IN MINT.asm
NESTING:            0258 DEFINED AT LINE 201 IN MINT.asm
                    > USED AT LINE 99 IN MINT.asm
                    > USED AT LINE 130 IN MINT.asm
NESTING1:           0262 DEFINED AT LINE 207 IN MINT.asm
                    > USED AT LINE 203 IN MINT.asm
NESTING0:           0266 DEFINED AT LINE 210 IN MINT.asm
                    > USED AT LINE 205 IN MINT.asm
NESTING1A:          026B DEFINED AT LINE 215 IN MINT.asm
                    > USED AT LINE 206 IN MINT.asm
                    > USED AT LINE 209 IN MINT.asm
NESTING2:           0277 DEFINED AT LINE 222 IN MINT.asm
                    > USED AT LINE 217 IN MINT.asm
                    > USED AT LINE 219 IN MINT.asm
NESTING3:           0279 DEFINED AT LINE 225 IN MINT.asm
                    > USED AT LINE 221 IN MINT.asm
NESTING4:           0284 DEFINED AT LINE 232 IN MINT.asm
                    > USED AT LINE 227 IN MINT.asm
                    > USED AT LINE 229 IN MINT.asm
PROMPT:             0286 DEFINED AT LINE 236 IN MINT.asm
                    > USED AT LINE 83 IN MINT.asm
MACROS:             028F DEFINED AT LINE 246 IN MINT.asm
EMPTY_:             028F DEFINED AT LINE 1 IN MINT.asm
BACKSP_:            0290 DEFINED AT LINE 4 IN MINT.asm
REEDIT_:            02A5 DEFINED AT LINE 7 IN MINT.asm
EDIT_:              02AC DEFINED AT LINE 10 IN MINT.asm
LIST_:              02BF DEFINED AT LINE 13 IN MINT.asm
PRINTSTACK_:        02DB DEFINED AT LINE 16 IN MINT.asm
TOGGLEBASE_:        02EC DEFINED AT LINE 19 IN MINT.asm
OPCODES:            0300 DEFINED AT LINE 255 IN MINT.asm
CTRLCODES:          0380 DEFINED AT LINE 392 IN MINT.asm
                    > USED AT LINE 71 IN MINT.asm
ALTCODES:           0380 DEFINED AT LINE 393 IN MINT.asm
                    > USED AT LINE 790 IN MINT.asm
CODEPAGE:           0400 DEFINED AT LINE 528 IN MINT.asm
ALT_:               0400 DEFINED AT LINE 530 IN MINT.asm
AND_:               0403 DEFINED AT LINE 532 IN MINT.asm
OR_:                040C DEFINED AT LINE 542 IN MINT.asm
INV_:               0415 DEFINED AT LINE 552 IN MINT.asm
XOR_:               041A DEFINED AT LINE 556 IN MINT.asm
XOR1:               041B DEFINED AT LINE 558 IN MINT.asm
                    > USED AT LINE 554 IN MINT.asm
ADD_:               0423 DEFINED AT LINE 567 IN MINT.asm
ARRDEF_:            0428 DEFINED AT LINE 573 IN MINT.asm
ARRDEF:             0428 DEFINED AT LINE 574 IN MINT.asm
ARRDEF1:            042A DEFINED AT LINE 576 IN MINT.asm
                    > USED AT LINE 974 IN MINT.asm
ARREND_:            043A DEFINED AT LINE 583 IN MINT.asm
BEGIN_:             043D DEFINED AT LINE 586 IN MINT.asm
CALL_:              0440 DEFINED AT LINE 589 IN MINT.asm
DEF_:               044F DEFINED AT LINE 600 IN MINT.asm
HDOT_:              0452 DEFINED AT LINE 603 IN MINT.asm
DOT_:               0458 DEFINED AT LINE 607 IN MINT.asm
DOT2:               045C DEFINED AT LINE 610 IN MINT.asm
                    > USED AT LINE 606 IN MINT.asm
DROP_:              0464 DEFINED AT LINE 616 IN MINT.asm
DUP_:               0467 DEFINED AT LINE 620 IN MINT.asm
ETX_:               046A DEFINED AT LINE 624 IN MINT.asm
ETX:                046A DEFINED AT LINE 625 IN MINT.asm
ETX1:               0474 DEFINED AT LINE 630 IN MINT.asm
                    > USED AT LINE 628 IN MINT.asm
EXIT_:              0477 DEFINED AT LINE 633 IN MINT.asm
FETCH_:             047F DEFINED AT LINE 640 IN MINT.asm
FETCH1:             0480 DEFINED AT LINE 642 IN MINT.asm
                    > USED AT LINE 785 IN MINT.asm
HEX_:               0485 DEFINED AT LINE 648 IN MINT.asm
NOP_:               0487 DEFINED AT LINE 651 IN MINT.asm
NUM_:               048A DEFINED AT LINE 654 IN MINT.asm
OVER_:              048D DEFINED AT LINE 657 IN MINT.asm
RET_:               0493 DEFINED AT LINE 664 IN MINT.asm
STORE_:             049A DEFINED AT LINE 669 IN MINT.asm
SWAP_:              04A2 DEFINED AT LINE 678 IN MINT.asm
SHL_:               04A7 DEFINED AT LINE 684 IN MINT.asm
SHR_:               04AC DEFINED AT LINE 690 IN MINT.asm
SHR1:               04AD DEFINED AT LINE 692 IN MINT.asm
                    > USED AT LINE 1009 IN MINT.asm
NEG_:               04B4 DEFINED AT LINE 698 IN MINT.asm
SUB_:               04B9 DEFINED AT LINE 702 IN MINT.asm
SUB1:               04B9 DEFINED AT LINE 703 IN MINT.asm
SUB2:               04BA DEFINED AT LINE 705 IN MINT.asm
                    > USED AT LINE 700 IN MINT.asm
EQ_:                04C0 DEFINED AT LINE 711 IN MINT.asm
EQ0:                04C7 DEFINED AT LINE 717 IN MINT.asm
                    > USED AT LINE 738 IN MINT.asm
EQ1:                04CC DEFINED AT LINE 720 IN MINT.asm
                    > USED AT LINE 716 IN MINT.asm
                    > USED AT LINE 737 IN MINT.asm
GETREF_:            04D1 DEFINED AT LINE 724 IN MINT.asm
GT_:                04D4 DEFINED AT LINE 727 IN MINT.asm
LT_:                04D8 DEFINED AT LINE 732 IN MINT.asm
LT1:                04D9 DEFINED AT LINE 734 IN MINT.asm
                    > USED AT LINE 730 IN MINT.asm
VAR_:               04E0 DEFINED AT LINE 740 IN MINT.asm
VAR1:               04E2 DEFINED AT LINE 742 IN MINT.asm
                    > USED AT LINE 1067 IN MINT.asm
DIV_:               04EC DEFINED AT LINE 752 IN MINT.asm
MUL_:               04EF DEFINED AT LINE 755 IN MINT.asm
AGAIN_:             04F2 DEFINED AT LINE 758 IN MINT.asm
STR_:               04F5 DEFINED AT LINE 761 IN MINT.asm
STR:                04F5 DEFINED AT LINE 762 IN MINT.asm
STR1:               04F6 DEFINED AT LINE 765 IN MINT.asm
                    > USED AT LINE 771 IN MINT.asm
STR2:               0501 DEFINED AT LINE 773 IN MINT.asm
                    > USED AT LINE 769 IN MINT.asm
GETREF:             0504 DEFINED AT LINE 781 IN MINT.asm
                    > USED AT LINE 725 IN MINT.asm
ALT:                050C DEFINED AT LINE 787 IN MINT.asm
                    > USED AT LINE 531 IN MINT.asm
MUL:                0517 DEFINED AT LINE 798 IN MINT.asm
                    > USED AT LINE 756 IN MINT.asm
MUL1:               051F DEFINED AT LINE 804 IN MINT.asm
                    > USED AT LINE 814 IN MINT.asm
MUL2:               052A DEFINED AT LINE 812 IN MINT.asm
                    > USED AT LINE 808 IN MINT.asm
                    > USED AT LINE 810 IN MINT.asm
DIV:                0530 DEFINED AT LINE 818 IN MINT.asm
                    > USED AT LINE 753 IN MINT.asm
DIV1:               0536 DEFINED AT LINE 823 IN MINT.asm
                    > USED AT LINE 837 IN MINT.asm
DIV2:               0543 DEFINED AT LINE 832 IN MINT.asm
                    > USED AT LINE 828 IN MINT.asm
DIV3:               0544 DEFINED AT LINE 835 IN MINT.asm
                    > USED AT LINE 830 IN MINT.asm
DEF:                054D DEFINED AT LINE 844 IN MINT.asm
                    > USED AT LINE 601 IN MINT.asm
DEF1:               055C DEFINED AT LINE 855 IN MINT.asm
                    > USED AT LINE 861 IN MINT.asm
NUM:                0569 DEFINED AT LINE 865 IN MINT.asm
                    > USED AT LINE 655 IN MINT.asm
NUM1:               056E DEFINED AT LINE 869 IN MINT.asm
                    > USED AT LINE 888 IN MINT.asm
NUM2:               0588 DEFINED AT LINE 889 IN MINT.asm
                    > USED AT LINE 880 IN MINT.asm
                    > USED AT LINE 882 IN MINT.asm
BEGIN:              058C DEFINED AT LINE 896 IN MINT.asm
                    > USED AT LINE 587 IN MINT.asm
AGAIN:              058E DEFINED AT LINE 927 IN MINT.asm
                    > USED AT LINE 759 IN MINT.asm
ALTCODEPAGE:        0600 DEFINED AT LINE 970 IN MINT.asm
CARRDEF_:           0600 DEFINED AT LINE 972 IN MINT.asm
CFETCH_:            0605 DEFINED AT LINE 976 IN MINT.asm
ANOP_:              0609 DEFINED AT LINE 980 IN MINT.asm
CHARCODE_:          060B DEFINED AT LINE 983 IN MINT.asm
COMMENT_:           0613 DEFINED AT LINE 991 IN MINT.asm
CSTORE_:            0615 DEFINED AT LINE 994 IN MINT.asm
DEPTH_:             061B DEFINED AT LINE 1001 IN MINT.asm
EMIT_:              062A DEFINED AT LINE 1011 IN MINT.asm
IFTE_:              0631 DEFINED AT LINE 1017 IN MINT.asm
EXEC_:              0633 DEFINED AT LINE 1029 IN MINT.asm
EXEC1:              0638 DEFINED AT LINE 1032 IN MINT.asm
                    > USED AT LINE 1030 IN MINT.asm
GO_:                063C DEFINED AT LINE 1038 IN MINT.asm
ENDGROUP_:          0646 DEFINED AT LINE 1046 IN MINT.asm
GROUP_:             064E DEFINED AT LINE 1051 IN MINT.asm
SYSVAR_:            0668 DEFINED AT LINE 1065 IN MINT.asm
I_:                 066D DEFINED AT LINE 1069 IN MINT.asm
I1:                 0670 DEFINED AT LINE 1071 IN MINT.asm
                    > USED AT LINE 1101 IN MINT.asm
INCR_:              0672 DEFINED AT LINE 1081 IN MINT.asm
INPORT_:            067D DEFINED AT LINE 1093 IN MINT.asm
J_:                 0684 DEFINED AT LINE 1099 IN MINT.asm
KEY_:               0689 DEFINED AT LINE 1103 IN MINT.asm
NEWLN_:             0692 DEFINED AT LINE 1110 IN MINT.asm
OUTPORT_:           0697 DEFINED AT LINE 1114 IN MINT.asm
ROT_:               069D DEFINED AT LINE 1120 IN MINT.asm
BREAK_:             06A3 DEFINED AT LINE 1127 IN MINT.asm
PRINTSTK_:          06A5 DEFINED AT LINE 1140 IN MINT.asm
EDITDEF_:           06A7 DEFINED AT LINE 1142 IN MINT.asm
EDITDEF:            06A7 DEFINED AT LINE 1148 IN MINT.asm
EDITDEF1:           06C7 DEFINED AT LINE 1168 IN MINT.asm
                    > USED AT LINE 1174 IN MINT.asm
EDITDEF2:           06C8 DEFINED AT LINE 1170 IN MINT.asm
                    > USED AT LINE 1167 IN MINT.asm
EDITDEF3:           06D0 DEFINED AT LINE 1175 IN MINT.asm
                    > USED AT LINE 1162 IN MINT.asm
PRINTSTK:           06DD DEFINED AT LINE 1184 IN MINT.asm
                    > USED AT LINE 1141 IN MINT.asm
ARREND:             06FD DEFINED AT LINE 1193 IN MINT.asm
                    > USED AT LINE 584 IN MINT.asm
ENTER:              06FF DEFINED AT LINE 1219 IN MINT.asm
                    > USED AT LINE 77 IN MINT.asm
                    > USED AT LINE 1185 IN MINT.asm
RPUSH:              0708 DEFINED AT LINE 1226 IN MINT.asm
                    > USED AT LINE 580 IN MINT.asm
                    > USED AT LINE 591 IN MINT.asm
                    > USED AT LINE 1041 IN MINT.asm
                    > USED AT LINE 1053 IN MINT.asm
                    > USED AT LINE 1221 IN MINT.asm
RPOP:               0713 DEFINED AT LINE 1233 IN MINT.asm
                    > USED AT LINE 636 IN MINT.asm
                    > USED AT LINE 665 IN MINT.asm
                    > USED AT LINE 1047 IN MINT.asm
LOOKUPDEF:          071E DEFINED AT LINE 1240 IN MINT.asm
                    > USED AT LINE 847 IN MINT.asm
LOOKUPDEF1:         0725 DEFINED AT LINE 1244 IN MINT.asm
                    > USED AT LINE 593 IN MINT.asm
LOOKUPDEF2:         0727 DEFINED AT LINE 1246 IN MINT.asm
                    > USED AT LINE 1243 IN MINT.asm
GETGROUP:           0732 DEFINED AT LINE 1256 IN MINT.asm
                    > USED AT LINE 784 IN MINT.asm
GETGROUP1:          0739 DEFINED AT LINE 1260 IN MINT.asm
GETGROUP2:          073B DEFINED AT LINE 1262 IN MINT.asm
                    > USED AT LINE 1259 IN MINT.asm
WRITECHAR:          0746 DEFINED AT LINE 1272 IN MINT.asm
                    > USED AT LINE 1164 IN MINT.asm
                    > USED AT LINE 1166 IN MINT.asm
                    > USED AT LINE 1172 IN MINT.asm
CRLF:               074B DEFINED AT LINE 1277 IN MINT.asm
                    > USED AT LINE 142 IN MINT.asm
                    > USED AT LINE 1111 IN MINT.asm
PRINTSTR:           0752 DEFINED AT LINE 1282 IN MINT.asm
                    > USED AT LINE 35 IN MINT.asm
                    > USED AT LINE 237 IN MINT.asm
                    > USED AT LINE 1278 IN MINT.asm
PRINTSTR1:          0755 DEFINED AT LINE 1286 IN MINT.asm
                    > USED AT LINE 1293 IN MINT.asm
PRINTSTR2:          0759 DEFINED AT LINE 1290 IN MINT.asm
                    > USED AT LINE 1284 IN MINT.asm
PRINTDEC:           0760 DEFINED AT LINE 1298 IN MINT.asm
                    > USED AT LINE 609 IN MINT.asm
PRINTDEC1:          0779 DEFINED AT LINE 1308 IN MINT.asm
                    > USED AT LINE 1300 IN MINT.asm
                    > USED AT LINE 1302 IN MINT.asm
                    > USED AT LINE 1304 IN MINT.asm
                    > USED AT LINE 1306 IN MINT.asm
PRINTDEC2:          077B DEFINED AT LINE 1310 IN MINT.asm
                    > USED AT LINE 1313 IN MINT.asm
PRINTHEX:           0784 DEFINED AT LINE 1317 IN MINT.asm
                    > USED AT LINE 605 IN MINT.asm
PRINTHEX2:          078D DEFINED AT LINE 1324 IN MINT.asm
                    > USED AT LINE 1319 IN MINT.asm
                    > USED AT LINE 1321 IN MINT.asm
PRINTHEX3:          0796 DEFINED AT LINE 1333 IN MINT.asm
                    > USED AT LINE 1330 IN MINT.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
DSTACK:             1880 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 33 IN MINT.asm
                    > USED AT LINE 43 IN MINT.asm
                    > USED AT LINE 626 IN MINT.asm
                    > USED AT LINE 629 IN MINT.asm
                    > USED AT LINE 1006 IN MINT.asm
RSTACK:             1900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 66 IN MINT.asm
TIB:                1900 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 92 IN MINT.asm
                    > USED AT LINE 125 IN MINT.asm
                    > USED AT LINE 134 IN MINT.asm
                    > USED AT LINE 152 IN MINT.asm
                    > USED AT LINE 1161 IN MINT.asm
                    > USED AT LINE 1176 IN MINT.asm
MINTVARS:           1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 22 IN MINT.asm
                    > USED AT LINE 23 IN MINT.asm
SYSVARS:            1A00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 23 IN MINT.asm
                    > USED AT LINE 54 IN MINT.asm
VS0:                1A00 DEFINED AT LINE 16 IN ram.asm
VBASE16:            1A02 DEFINED AT LINE 17 IN ram.asm
VTIBPTR:            1A04 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 79 IN MINT.asm
                    > USED AT LINE 85 IN MINT.asm
                    > USED AT LINE 151 IN MINT.asm
                    > USED AT LINE 1180 IN MINT.asm
VDEFS:              1A06 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 1048 IN MINT.asm
                    > USED AT LINE 1052 IN MINT.asm
                    > USED AT LINE 1062 IN MINT.asm
                    > USED AT LINE 1152 IN MINT.asm
                    > USED AT LINE 1248 IN MINT.asm
                    > USED AT LINE 1264 IN MINT.asm
VEDITED:            1A08 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1242 IN MINT.asm
                    > USED AT LINE 1258 IN MINT.asm
VHEAPPTR:           1A0E DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 188 IN MINT.asm
                    > USED AT LINE 198 IN MINT.asm
                    > USED AT LINE 579 IN MINT.asm
                    > USED AT LINE 849 IN MINT.asm
                    > USED AT LINE 862 IN MINT.asm
VNESTING:           1A34 DEFINED AT LINE 43 IN ram.asm
VBYTEMODE:          1A36 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 190 IN MINT.asm
                    > USED AT LINE 578 IN MINT.asm
TBPTR:              1A68 DEFINED AT LINE 46 IN ram.asm
RST08:              1A6A DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1A6C DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1A6E DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1A70 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1A72 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1A74 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1A76 DEFINED AT LINE 54 IN ram.asm
INTVEC:             1A78 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1A7A DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1A7C DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1A7E DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
VARS:               1A80 DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 22 IN MINT.asm
DEFS:               1AC0 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 46 IN MINT.asm
                    > USED AT LINE 58 IN MINT.asm
                    > USED AT LINE 1060 IN MINT.asm
HEAP:               1C00 DEFINED AT LINE 72 IN ram.asm
                    > USED AT LINE 50 IN MINT.asm
