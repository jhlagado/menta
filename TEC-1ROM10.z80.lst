0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 6A 0A               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 6C 0A               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 6E 0A               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 70 0A               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 72 0A               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 74 0A               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 78 0A               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 7A 0A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 7C 0A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 7E 0A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 08               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 6A 0A               LD   (RST08),HL   
0094   22 6C 0A               LD   (RST10),HL   
0097   22 6E 0A               LD   (RST18),HL   
009A   22 70 0A               LD   (RST20),HL   
009D   22 72 0A               LD   (RST28),HL   
00A0   22 74 0A               LD   (RST30),HL   
00A3   22 78 0A               LD   (INTVEC),HL   
00A6   22 7A 0A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 7C 0A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 7E 0A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 80 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MINT Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                DSIZE:    EQU   $80   
00C6                RSIZE:    EQU   $80   
00C6                TIBSIZE:   EQU   $100   
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                NUMGRPS:   EQU   5   
00C6                GRPSIZE:   EQU   $40   
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   
0180                START:       
0180   31 80 08               LD   SP,DSTACK   
0183   CD A8 01               CALL   initialize   
0186   CD 70 05               CALL   printStr   
0189   4D 49 4E 54 20 56 31 2E 30 0D 0A 00 .CSTR   "MINT V1.0\r\n"   
0195   C3 E2 01               JP   interpret   
0198                             ; ***********************************************************************
0198                             ; Initial values for user mintVars		
0198                             ; ***********************************************************************		
0198                ISYSVARS:      
0198   80 08                  DW   dStack   ; a vS0
019A   00 00                  DW   FALSE   ; b vBase16
019C   00 00                  DW   0   ; c vTIBPtr
019E   C0 0A                  DW   DEFS   ; d vDEFS
01A0   00 00                  DW   0   ; e vEdited the last command to be edited
01A2   00 00                  DW   0   ; f
01A4   00 00                  DW   0   ; g
01A6   00 0C                  DW   HEAP   ; h vHeapPtr
01A8                INITIALIZE:      
01A8   DD 21 00 09            LD   IX,RSTACK   
01AC   FD 21 3F 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
01B0   21 98 01               LD   HL,iSysVars   
01B3   11 00 0A               LD   DE,sysVars   
01B6   01 10 00               LD   BC,8 * 2   
01B9   ED B0                  LDIR      
01BB   21 C0 0A               LD   HL,DEFS   
01BE   06 A0                  LD   B,GRPSIZE/2 * NUMGRPS   
01C0                INIT1:       
01C0   36 4A                  LD   (HL),lsb(empty_)   
01C2   23                     INC   HL   
01C3   36 02                  LD   (HL),msb(empty_)   
01C5   23                     INC   HL   
01C6   10 F8                  DJNZ   init1   
01C8   C9                     RET      
01C9                MACRO:       ; 25
01C9   ED 43 04 0A            LD   (vTIBPtr),BC   
01CD   21 80 03               LD   HL,ctrlCodes   
01D0   85                     ADD   A,L   
01D1   6F                     LD   L,A   
01D2   5E                     LD   E,(HL)   
01D3   16 02                  LD   D,msb(macros)   
01D5   D5                     PUSH   DE   
01D6   CD 94 05               CALL   ENTER   
01D9   5C 47 00               .CSTR   "\\G"   
01DC   ED 4B 04 0A            LD   BC,(vTIBPtr)   
01E0   18 0A                  JR   interpret2   
01E2                INTERPRET:      
01E2   CD 67 05               CALL   prompt   
01E5   01 00 00               LD   BC,0   ; load BC with offset into TIB
01E8   ED 43 04 0A            LD   (vTIBPtr),BC   
01EC                INTERPRET2:      ; calc nesting (a macro might have changed it)
01EC   1E 00                  LD   E,0   ; initilize nesting value
01EE   C5                     PUSH   BC   ; save offset into TIB,
01EF                             ; BC is also the count of chars in TIB
01EF   21 00 09               LD   HL,TIB   ; HL is start of TIB
01F2   18 06                  JR   interpret4   
01F4                INTERPRET3:      
01F4   7E                     LD   A,(HL)   ; A = char in TIB
01F5   23                     INC   HL   ; inc pointer into TIB
01F6   0B                     DEC   BC   ; dec count of chars in TIB
01F7   CD 34 05               CALL   nesting   ; update nesting value
01FA                INTERPRET4:      
01FA   79                     LD   A,C   ; is count zero?
01FB   B0                     OR   B   
01FC   20 F6                  JR   NZ,interpret3   ; if not loop
01FE   C1                     POP   BC   ; restore offset into TIB
01FF                             ; *******************************************************************
01FF                             ; Wait for a character from the serial input (keyboard)
01FF                             ; and store it in the text buffer. Keep accepting characters,
01FF                             ; increasing the instruction pointer BC - until a newline received.
01FF                             ; *******************************************************************
01FF                WAITCHAR:      
01FF   CD 81 00               CALL   getchar   ; loop around waiting for character
0202   FE 20                  CP   $20   
0204   30 0C                  JR   NC,waitchar1   
0206   FE 00                  CP   $0   ; is it end of string?
0208   28 2C                  JR   Z,waitchar4   
020A   FE 0D                  CP   "\r"   ; carriage return?
020C   28 12                  JR   Z,waitchar3   
020E   16 00                  LD   D,0   
0210   18 B7                  JR   macro   
0212                WAITCHAR1:      
0212   21 00 09               LD   HL,TIB   
0215   09                     ADD   HL,BC   
0216   77                     LD   (HL),A   ; store the character in textbuf
0217   03                     INC   BC   
0218   CD 85 00               CALL   putchar   ; echo character to screen
021B   CD 34 05               CALL   nesting   
021E   18 DF                  JR   waitchar   ; wait for next character
0220                WAITCHAR3:      
0220   21 00 09               LD   HL,TIB   
0223   09                     ADD   HL,BC   
0224   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
0226   23                     INC   HL   
0227   36 0A                  LD   (HL),"\n"   
0229   23                     INC   HL   
022A   03                     INC   BC   
022B   03                     INC   BC   
022C   CD 60 05               CALL   crlf   ; echo character to screen
022F   7B                     LD   A,E   ; if zero nesting append and ETX after \r
0230   B7                     OR   A   
0231   20 CC                  JR   NZ,waitchar   
0233   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
0235   03                     INC   BC   
0236                WAITCHAR4:      
0236   ED 43 04 0A            LD   (vTIBPtr),BC   
023A   01 00 09               LD   BC,TIB   ; Instructions stored on heap at address HERE
023D   0B                     DEC   BC   
023E                             ; Drop into the NEXT and dispatch routines
023E                             ; ********************************************************************************
023E                             ; 
023E                             ; Dispatch Routine.
023E                             ; 
023E                             ; Get the next character and form a 1 byte jump address
023E                             ; 
023E                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
023E                             ; jump to the selected function.
023E                             ; 
023E                             ; Individual handler routines will deal with each category:
023E                             ; 
023E                             ; 1. Detect characters A-Z and jump to the User Command handler routine
023E                             ; 
023E                             ; 2. Detect characters a-z and jump to the variable handler routine
023E                             ; 
023E                             ; 3. All other characters are punctuation and cause a jump to the associated
023E                             ; primitive code.
023E                             ; 
023E                             ; Instruction Pointer IP BC is incremented
023E                             ; 
023E                             ; *********************************************************************************
023E   D9                     EXX      
023F                NEXT:        ; 9
023F   D9                     EXX      
0240   03                     INC   BC   ; 6t    Increment the IP
0241   0A                     LD   A,(BC)   ; 7t    Get the next character and dispatch
0242   D9                     EXX      
0243   6F                     LD   L,A   ; 4t    Index into table
0244   26 03                  LD   H,msb(opcodes)   ; 7t    Start address of jump table
0246   6E                     LD   L,(HL)   ; 7t    get low jump address
0247   26 04                  LD   H,msb(page4)   ; 7t    Load H with the 1st page address
0249   E9                     JP   (HL)   ; 4t    Jump to routine
024A                             ; **************************************************************************
024A                             ; Macros must be written in Mint and end with ;
024A                             ; this code must not span pages
024A                             ; **************************************************************************
024A                MACROS:      
024A                EMPTY_:      
024A   3B                     DB   ";"   
024B                BACKSP_:      
024B   3B                     DB   ";"   
024C                EDIT_:       
024C   3B                     DB   ";"   
024D                REEDIT_:      
024D   3B                     DB   ";"   
024E                LIST_:       
024E   3B                     DB   ";"   
024F                PRINTSTACK_:      
024F   3B                     DB   ";"   
0250                TOGGLEBASE_:      
0250   3B                     DB   ";"   
0251                             ; **************************************************************************
0251                             ; Page 2  Jump Tables
0251                             ; **************************************************************************
0251                          ALIGN   $100   
0300                OPCODES:      
0300                             ; ***********************************************************************
0300                             ; Initial values for user mintVars		
0300                             ; ***********************************************************************		
0300   36                     DB   lsb(exit_)   ;   NUL
0301   46                     DB   lsb(nop_)   ;   SOH
0302   46                     DB   lsb(nop_)   ;   STX
0303   29                     DB   lsb(etx_)   ;   ETX
0304   46                     DB   lsb(nop_)   ;   EOT
0305   46                     DB   lsb(nop_)   ;   ENQ
0306   46                     DB   lsb(nop_)   ;   ACK
0307   46                     DB   lsb(nop_)   ;   BEL
0308   46                     DB   lsb(nop_)   ;   BS
0309   46                     DB   lsb(nop_)   ;   TAB
030A   46                     DB   lsb(nop_)   ;   LF
030B   46                     DB   lsb(nop_)   ;   VT
030C   46                     DB   lsb(nop_)   ;   FF
030D   46                     DB   lsb(nop_)   ;   CR
030E   46                     DB   lsb(nop_)   ;   SO
030F   46                     DB   lsb(nop_)   ;   SI
0310   46                     DB   lsb(nop_)   ;   DLE
0311   46                     DB   lsb(nop_)   ;   DC1
0312   46                     DB   lsb(nop_)   ;   DC2
0313   46                     DB   lsb(nop_)   ;   DC3
0314   46                     DB   lsb(nop_)   ;   DC4
0315   46                     DB   lsb(nop_)   ;   NAK
0316   46                     DB   lsb(nop_)   ;   SYN
0317   46                     DB   lsb(nop_)   ;   ETB
0318   46                     DB   lsb(nop_)   ;   CAN
0319   46                     DB   lsb(nop_)   ;   EM
031A   46                     DB   lsb(nop_)   ;   SUB
031B   46                     DB   lsb(nop_)   ;   ESC
031C   46                     DB   lsb(nop_)   ;   FS
031D   46                     DB   lsb(nop_)   ;   GS
031E   46                     DB   lsb(nop_)   ;   RS
031F   46                     DB   lsb(nop_)   ;   US
0320   46                     DB   lsb(nop_)   ;   SP
0321   56                     DB   lsb(store_)   ;   !
0322   27                     DB   lsb(dup_)   ;   "
0323   44                     DB   lsb(hex_)   ;    #
0324   58                     DB   lsb(swap_)   ;    $
0325   4B                     DB   lsb(over_)   ;    %
0326   0D                     DB   lsb(and_)   ;    &
0327   25                     DB   lsb(drop_)   ;    '
0328   1B                     DB   lsb(begin_)   ;    (
0329   70                     DB   lsb(again_)   ;    )
032A   6E                     DB   lsb(mul_)   ;    *
032B   15                     DB   lsb(add_)   ;    +
032C   21                     DB   lsb(hdot_)   ;    ,
032D   60                     DB   lsb(sub_)   ;    -
032E   23                     DB   lsb(dot_)   ;    .
032F   6C                     DB   lsb(div_)   ;    /
0330   49                     DB   lsb(num_)   ;    0
0331   49                     DB   lsb(num_)   ;    1
0332   49                     DB   lsb(num_)   ;    2
0333   49                     DB   lsb(num_)   ;    3
0334   49                     DB   lsb(num_)   ;    4
0335   49                     DB   lsb(num_)   ;    5
0336   49                     DB   lsb(num_)   ;    6
0337   49                     DB   lsb(num_)   ;    7
0338   49                     DB   lsb(num_)   ;    8
0339   49                     DB   lsb(num_)   ;    9
033A   1F                     DB   lsb(def_)   ;    :
033B   4D                     DB   lsb(ret_)   ;    ;
033C   68                     DB   lsb(lt_)   ;    <
033D   62                     DB   lsb(eq_)   ;    =
033E   66                     DB   lsb(gt_)   ;    >
033F   64                     DB   lsb(getRef_)   ;    ?
0340   42                     DB   lsb(fetch_)   ;    @
0341   1D                     DB   lsb(call_)   ;    A
0342   1D                     DB   lsb(call_)   ;    B
0343   1D                     DB   lsb(call_)   ;    C
0344   1D                     DB   lsb(call_)   ;    D
0345   1D                     DB   lsb(call_)   ;    E
0346   1D                     DB   lsb(call_)   ;    F
0347   1D                     DB   lsb(call_)   ;    G
0348   1D                     DB   lsb(call_)   ;    H
0349   1D                     DB   lsb(call_)   ;    I
034A   1D                     DB   lsb(call_)   ;    J
034B   1D                     DB   lsb(call_)   ;    K
034C   1D                     DB   lsb(call_)   ;    L
034D   1D                     DB   lsb(call_)   ;    M
034E   1D                     DB   lsb(call_)   ;    N
034F   1D                     DB   lsb(call_)   ;    O
0350   1D                     DB   lsb(call_)   ;    P
0351   1D                     DB   lsb(call_)   ;    Q
0352   1D                     DB   lsb(call_)   ;    R
0353   1D                     DB   lsb(call_)   ;    S
0354   1D                     DB   lsb(call_)   ;    T
0355   1D                     DB   lsb(call_)   ;    U
0356   1D                     DB   lsb(call_)   ;    V
0357   1D                     DB   lsb(call_)   ;    W
0358   1D                     DB   lsb(call_)   ;    X
0359   1D                     DB   lsb(call_)   ;    Y
035A   1D                     DB   lsb(call_)   ;    Z
035B   17                     DB   lsb(arrDef_)   ;    [
035C   00                     DB   lsb(alt_)   ;    \
035D   19                     DB   lsb(arrEnd_)   ;    ]
035E   11                     DB   lsb(xor_)   ;    ^
035F   5E                     DB   lsb(neg_)   ;    _
0360   72                     DB   lsb(str_)   ;    `
0361   6A                     DB   lsb(var_)   ;    a
0362   6A                     DB   lsb(var_)   ;    b
0363   6A                     DB   lsb(var_)   ;    c
0364   6A                     DB   lsb(var_)   ;    d
0365   6A                     DB   lsb(var_)   ;    e
0366   6A                     DB   lsb(var_)   ;    f
0367   6A                     DB   lsb(var_)   ;    g
0368   6A                     DB   lsb(var_)   ;    h
0369   6A                     DB   lsb(var_)   ;    i
036A   6A                     DB   lsb(var_)   ;    j
036B   6A                     DB   lsb(var_)   ;    k
036C   6A                     DB   lsb(var_)   ;    l
036D   6A                     DB   lsb(var_)   ;    m
036E   6A                     DB   lsb(var_)   ;    n
036F   6A                     DB   lsb(var_)   ;    o
0370   6A                     DB   lsb(var_)   ;    p
0371   6A                     DB   lsb(var_)   ;    q
0372   6A                     DB   lsb(var_)   ;    r
0373   6A                     DB   lsb(var_)   ;    s
0374   6A                     DB   lsb(var_)   ;    t
0375   6A                     DB   lsb(var_)   ;    u
0376   6A                     DB   lsb(var_)   ;    v
0377   6A                     DB   lsb(var_)   ;    w
0378   6A                     DB   lsb(var_)   ;    x
0379   6A                     DB   lsb(var_)   ;    y
037A   6A                     DB   lsb(var_)   ;    z
037B   5A                     DB   lsb(shl_)   ;    {
037C   0F                     DB   lsb(or_)   ;    |
037D   5C                     DB   lsb(shr_)   ;    }
037E   13                     DB   lsb(inv_)   ;    ~
037F   46                     DB   lsb(nop_)   ;    backspace
0380                             ; ***********************************************************************
0380                             ; Alternate function codes		
0380                             ; ***********************************************************************		
0380                CTRLCODES:      
0380                ALTCODES:      
0380   4A                     DB   lsb(empty_)   ; NUL ^@
0381   4A                     DB   lsb(empty_)   ; SOH ^A
0382   50                     DB   lsb(toggleBase_)   ; STX ^B
0383   4A                     DB   lsb(empty_)   ; ETX ^C
0384   4A                     DB   lsb(empty_)   ; EOT ^D
0385   4C                     DB   lsb(edit_)   ; ENQ ^E
0386   4A                     DB   lsb(empty_)   ; ACK ^F
0387   4A                     DB   lsb(empty_)   ; BEL ^G
0388   4B                     DB   lsb(backsp_)   ; BS  ^H
0389   4A                     DB   lsb(empty_)   ; TAB ^I
038A   4D                     DB   lsb(reedit_)   ; LF  ^J
038B   4A                     DB   lsb(empty_)   ; VT  ^K
038C   4E                     DB   lsb(list_)   ; FF  ^L
038D   4A                     DB   lsb(empty_)   ; CR  ^M
038E   4A                     DB   lsb(empty_)   ; SO  ^N
038F   4A                     DB   lsb(empty_)   ; SI  ^O
0390   4F                     DB   lsb(printStack_)   ; DLE ^P
0391   4A                     DB   lsb(empty_)   ; DC1 ^Q
0392   4A                     DB   lsb(empty_)   ; DC2 ^R
0393   4A                     DB   lsb(empty_)   ; DC3 ^S
0394   4A                     DB   lsb(empty_)   ; DC4 ^T
0395   4A                     DB   lsb(empty_)   ; NAK ^U
0396   4A                     DB   lsb(empty_)   ; SYN ^V
0397   4A                     DB   lsb(empty_)   ; ETB ^W
0398   4A                     DB   lsb(empty_)   ; CAN ^X
0399   4A                     DB   lsb(empty_)   ; EM  ^Y
039A   4A                     DB   lsb(empty_)   ; SUB ^Z
039B   4A                     DB   lsb(empty_)   ; ESC ^[
039C   4A                     DB   lsb(empty_)   ; FS  ^\
039D   4A                     DB   lsb(empty_)   ; GS  ^]
039E   4A                     DB   lsb(empty_)   ; RS  ^^
039F   4A                     DB   lsb(empty_)   ; US  ^_)
03A0   04                     DB   lsb(aNop_)   ; SP  ^`
03A1   0A                     DB   lsb(cStore_)   ;    !
03A2   04                     DB   lsb(aNop_)   ;    "
03A3   04                     DB   lsb(aNop_)   ;    #
03A4   04                     DB   lsb(aNop_)   ;    $  ( -- adr ) text input ptr
03A5   04                     DB   lsb(aNop_)   ;    %
03A6   04                     DB   lsb(aNop_)   ;    &
03A7   04                     DB   lsb(aNop_)   ;    '
03A8   10                     DB   lsb(ifte_)   ;    (  ( b -- )
03A9   04                     DB   lsb(aNop_)   ;    )
03AA   04                     DB   lsb(aNop_)   ;    *
03AB   1E                     DB   lsb(incr_)   ;    +  ( adr -- ) decrements variable at address
03AC   04                     DB   lsb(aNop_)   ;    ,
03AD   04                     DB   lsb(aNop_)   ;    -
03AE   04                     DB   lsb(aNop_)   ;    .
03AF   04                     DB   lsb(aNop_)   ;    /
03B0   04                     DB   lsb(aNop_)   ;    0
03B1   04                     DB   lsb(aNop_)   ;    1
03B2   04                     DB   lsb(aNop_)   ;    2
03B3   04                     DB   lsb(aNop_)   ;    3
03B4   04                     DB   lsb(aNop_)   ;    4
03B5   04                     DB   lsb(aNop_)   ;    5
03B6   04                     DB   lsb(aNop_)   ;    6
03B7   04                     DB   lsb(aNop_)   ;    7
03B8   04                     DB   lsb(aNop_)   ;    8
03B9   04                     DB   lsb(aNop_)   ;    9
03BA   04                     DB   lsb(aNop_)   ;    :  start defining a macro
03BB   04                     DB   lsb(aNop_)   ;    ;
03BC   04                     DB   lsb(aNop_)   ;    <
03BD   04                     DB   lsb(aNop_)   ;    =
03BE   04                     DB   lsb(aNop_)   ;    >
03BF   04                     DB   lsb(aNop_)   ;    ?
03C0   02                     DB   lsb(cFetch_)   ;    @
03C1   04                     DB   lsb(aNop_)   ;    A
03C2   2E                     DB   lsb(break_)   ;    B
03C3   46                     DB   lsb(nop_)   ;    C
03C4   0C                     DB   lsb(depth_)   ;    D  ( -- val ) depth of data stack
03C5   0E                     DB   lsb(emit_)   ;    E   ( val -- ) emits a char to output
03C6   04                     DB   lsb(aNop_)   ;    F
03C7   14                     DB   lsb(go_)   ;    G   ( -- ? ) execute mint definition
03C8   04                     DB   lsb(aNop_)   ;    H
03C9   20                     DB   lsb(inPort_)   ;    I  ( port -- val )
03CA   04                     DB   lsb(aNop_)   ;    J
03CB   24                     DB   lsb(key_)   ;    K  ( -- val )  read a char from input
03CC   04                     DB   lsb(aNop_)   ;    L
03CD   04                     DB   lsb(aNop_)   ;    M
03CE   26                     DB   lsb(newln_)   ;    N   ; prints a newline to output
03CF   28                     DB   lsb(outPort_)   ;    O  ( val port -- )
03D0   30                     DB   lsb(printStk_)   ;    P  ( -- ) non-destructively prints stack
03D1   04                     DB   lsb(aNop_)   ;    Q  quits from Mint REPL
03D2   2A                     DB   lsb(rot_)   ;    R  ( a b c -- b c a )
03D3   04                     DB   lsb(aNop_)   ;    S
03D4   04                     DB   lsb(aNop_)   ;    T
03D5   04                     DB   lsb(aNop_)   ;    U
03D6   04                     DB   lsb(aNop_)   ;    V
03D7   04                     DB   lsb(aNop_)   ;    W   ; ( b -- ) if false, skip to end of loop
03D8   12                     DB   lsb(exec_)   ;    X
03D9   04                     DB   lsb(aNop_)   ;    Y
03DA   32                     DB   lsb(editDef_)   ;    Z
03DB   00                     DB   lsb(cArrDef_)   ;    [
03DC   08                     DB   lsb(comment_)   ;    \  comment text, skips reading until end of line
03DD   04                     DB   lsb(aNop_)   ;    ]
03DE   06                     DB   lsb(charCode_)   ;    ^
03DF   2C                     DB   lsb(sign_)   ;    _)  ( n -- b ) returns true if -ve
03E0   04                     DB   lsb(aNop_)   ;    `
03E1   1A                     DB   lsb(sysVar_)   ;    a  ; start of data stack variable
03E2   1A                     DB   lsb(sysVar_)   ;    b  ; base16 variable
03E3   1A                     DB   lsb(sysVar_)   ;    c  ; TIBPtr variable
03E4   1A                     DB   lsb(sysVar_)   ;    d
03E5   1A                     DB   lsb(sysVar_)   ;    e
03E6   1A                     DB   lsb(sysVar_)   ;    f
03E7   1A                     DB   lsb(sysVar_)   ;    g
03E8   1A                     DB   lsb(sysVar_)   ;    h  ; heap ptr variable
03E9   1C                     DB   lsb(i_)   ;    i  ; returns index variable of current loop
03EA   22                     DB   lsb(j_)   ;    j  ; returns index variable of outer loop
03EB   1A                     DB   lsb(sysVar_)   ;    k
03EC   1A                     DB   lsb(sysVar_)   ;    l
03ED   1A                     DB   lsb(sysVar_)   ;    m  ( a b -- c ) return the minimum value
03EE   1A                     DB   lsb(sysVar_)   ;    n
03EF   1A                     DB   lsb(sysVar_)   ;    o
03F0   1A                     DB   lsb(sysVar_)   ;    p
03F1   1A                     DB   lsb(sysVar_)   ;    q
03F2   1A                     DB   lsb(sysVar_)   ;    r
03F3   1A                     DB   lsb(sysVar_)   ;    s
03F4   1A                     DB   lsb(sysVar_)   ;    t
03F5   1A                     DB   lsb(sysVar_)   ;    u
03F6   1A                     DB   lsb(sysVar_)   ;    v
03F7   1A                     DB   lsb(sysVar_)   ;    w
03F8   1A                     DB   lsb(sysVar_)   ;    x
03F9   1A                     DB   lsb(sysVar_)   ;    y
03FA   1A                     DB   lsb(sysVar_)   ;    z
03FB   18                     DB   lsb(group_)   ;    {
03FC   04                     DB   lsb(aNop_)   ;    |
03FD   16                     DB   lsb(endGroup_)   ;    }
03FE   04                     DB   lsb(aNop_)   ;    ~
03FF   04                     DB   lsb(aNop_)   ;    BS		
0400                             ; **********************************************************************			
0400                             ; Page 4 primitive routines
0400                             ; **********************************************************************
0400                          ALIGN   $100   
0400                PAGE4:       
0400                ALT_:        
0400                ALT:         ;= 11
0400   D9                     EXX      
0401   03                     INC   BC   
0402   0A                     LD   A,(BC)   
0403   D9                     EXX      
0404   21 80 03               LD   HL,altCodes   
0407   85                     ADD   A,L   
0408   6F                     LD   L,A   
0409   6E                     LD   L,(HL)   ; 7t    get low jump address
040A   26 05                  LD   H,msb(page6)   ; Load H with the 5th page address
040C   E9                     JP   (HL)   ; 4t    Jump to routine
040D                AND_:        
040D   FD E9                  JP   (IY)   
040F                             ; 63t
040F                OR_:         
040F   FD E9                  JP   (IY)   
0411                XOR_:        
0411   FD E9                  JP   (IY)   
0413                INV_:        
0413   FD E9                  JP   (IY)   
0415                ADD_:        ; Add the top 2 members of the stack
0415   FD E9                  JP   (IY)   
0417                ARRDEF_:      
0417   FD E9                  JP   (IY)   
0419                ARREND_:      
0419   FD E9                  JP   (IY)   
041B                BEGIN_:      
041B   FD E9                  JP   (IY)   
041D                CALL_:       
041D   FD E9                  JP   (IY)   
041F                DEF_:        
041F   FD E9                  JP   (IY)   
0421                HDOT_:       ; print hexadecimal
0421   FD E9                  JP   (IY)   
0423                DOT_:        
0423   FD E9                  JP   (IY)   
0425                DROP_:       ; Discard the top member of the stack
0425   FD E9                  JP   (IY)   
0427                DUP_:        
0427   FD E9                  JP   (IY)   
0429                ETX_:        
0429                ETX:         
0429   21 80 F7               LD   HL,-DSTACK   
042C   39                     ADD   HL,SP   
042D   D2 33 04               JP   NC,etx1   
0430   31 80 08               LD   SP,DSTACK   
0433                ETX1:        
0433   C3 E2 01               JP   interpret   
0436                EXIT_:       
0436   D9                     EXX      
0437   03                     INC   BC   
0438   50 59                  LD   DE,BC   
043A   CD 89 05               CALL   rpop   ; Restore Instruction pointer
043D   44 4D                  LD   BC,HL   
043F   EB                     EX   DE,HL   
0440   D9                     EXX      
0441   E9                     JP   (HL)   
0442                FETCH_:      ; Fetch the value from the address placed on the top of the stack
0442   FD E9                  JP   (IY)   
0444                HEX_:        
0444   FD E9                  JP   (IY)   
0446                NOP_:        
0446   C3 3F 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
0449                NUM_:        
0449   FD E9                  JP   (IY)   
044B                OVER_:       
044B   FD E9                  JP   (IY)   
044D                RET_:        
044D   D9                     EXX      
044E   CD 89 05               CALL   rpop   ; Restore Instruction pointer
0451   44 4D                  LD   BC,HL   
0453   D9                     EXX      
0454   FD E9                  JP   (IY)   
0456                STORE_:      ; Store the value at the address placed on the top of the stack
0456   FD E9                  JP   (IY)   
0458                SWAP_:       
0458   FD E9                  JP   (IY)   
045A                SHL_:        
045A   FD E9                  JP   (IY)   
045C                SHR_:        
045C   FD E9                  JP   (IY)   
045E                NEG_:        
045E   FD E9                  JP   (IY)   
0460                SUB_:        ; Subtract the value 2nd on stack from top of stack
0460   FD E9                  JP   (IY)   
0462                             ; 58t
0462                EQ_:         
0462   FD E9                  JP   (IY)   
0464                GETREF_:      
0464   FD E9                  JP   (IY)   
0466                GT_:         
0466   FD E9                  JP   (IY)   
0468                LT_:         
0468   FD E9                  JP   (IY)   
046A                VAR_:        
046A   FD E9                  JP   (IY)   
046C                DIV_:        
046C   FD E9                  JP   (IY)   
046E                MUL_:        
046E   FD E9                  JP   (IY)   
0470                AGAIN_:      
0470   FD E9                  JP   (IY)   
0472                STR_:        
0472   FD E9                  JP   (IY)   
0474                             ;*******************************************************************
0474                             ; Page 5 primitive routines
0474                             ;*******************************************************************
0474                             ;falls through
0474                             ; **************************************************************************
0474                             ; Page 6 Alt primitives
0474                             ; **************************************************************************
0474                          ALIGN   $100   
0500                PAGE6:       
0500                CARRDEF_:      ; define a byte array
0500   FD E9                  JP   (IY)   
0502                CFETCH_:      
0502   FD E9                  JP   (IY)   
0504                ANOP_:       
0504   FD E9                  JP   (IY)   ; 8t
0506                             ; 49t
0506                CHARCODE_:      
0506   FD E9                  JP   (IY)   
0508                COMMENT_:      
0508   FD E9                  JP   (IY)   
050A                CSTORE_:      
050A   FD E9                  JP   (IY)   
050C                             ; 48t
050C                DEPTH_:      
050C   FD E9                  JP   (IY)   
050E                EMIT_:       
050E   FD E9                  JP   (IY)   
0510                IFTE_:       
0510   FD E9                  JP   (IY)   
0512                EXEC_:       
0512   FD E9                  JP   (IY)   
0514                GO_:         
0514   FD E9                  JP   (IY)   
0516                ENDGROUP_:      
0516   FD E9                  JP   (IY)   
0518                GROUP_:      
0518   FD E9                  JP   (IY)   
051A                SYSVAR_:      
051A   FD E9                  JP   (IY)   
051C                I_:          
051C   FD E9                  JP   (IY)   
051E                INCR_:       
051E   FD E9                  JP   (IY)   
0520                INPORT_:      
0520   FD E9                  JP   (IY)   
0522                J_:          
0522   FD E9                  JP   (IY)   
0524                KEY_:        
0524   FD E9                  JP   (IY)   
0526                NEWLN_:      
0526   FD E9                  JP   (IY)   
0528                OUTPORT_:      
0528   FD E9                  JP   (IY)   
052A                ROT_:        
052A   FD E9                  JP   (IY)   
052C                SIGN_:       
052C   FD E9                  JP   (IY)   
052E                BREAK_:      
052E   FD E9                  JP   (IY)   
0530                PRINTSTK_:      
0530   FD E9                  JP   (IY)   
0532                EDITDEF_:      
0532   FD E9                  JP   (IY)   
0534                             ;*******************************************************************
0534                             ; Page 5 primitive routines continued
0534                             ;*******************************************************************
0534                             ; **************************************************************************
0534                             ; calculate nesting value
0534                             ; A is char to be tested,
0534                             ; E is the nesting value (initially 0)
0534                             ; E is increased by ( and [
0534                             ; E is decreased by ) and ]
0534                             ; E has its bit 7 toggled by `
0534                             ; limited to 127 levels
0534                             ; **************************************************************************
0534                NESTING:      ;= 44
0534   FE 60                  CP   "`"   
0536   20 0A                  JR   NZ,nesting1   
0538   CB 7B                  BIT   7,E   
053A   28 03                  JR   Z,nesting1a   
053C   CB BB                  RES   7,E   
053E   C9                     RET      
053F                NESTING1A:      
053F   CB FB                  SET   7,E   
0541   C9                     RET      
0542                NESTING1:      
0542   CB 7B                  BIT   7,E   
0544   C0                     RET   NZ   
0545   FE 3A                  CP   ":"   
0547   28 08                  JR   Z,nesting2   
0549   FE 5B                  CP   "["   
054B   28 04                  JR   Z,nesting2   
054D   FE 28                  CP   "("   
054F   20 02                  JR   NZ,nesting3   
0551                NESTING2:      
0551   1C                     INC   E   
0552   C9                     RET      
0553                NESTING3:      
0553   FE 3B                  CP   ";"   
0555   28 07                  JR   Z,nesting4   
0557   FE 5D                  CP   "]"   
0559   28 03                  JR   Z,nesting4   
055B   FE 29                  CP   ")"   
055D   C0                     RET   NZ   
055E                NESTING4:      
055E   1D                     DEC   E   
055F   C9                     RET      
0560                CRLF:        ; 18
0560   CD 70 05               CALL   printStr   
0563   0D 0A 00               .CSTR   "\r\n"   
0566   C9                     RET      
0567                PROMPT:      
0567   CD 70 05               CALL   printStr   
056A   0D 0A 3E 20 00         .CSTR   "\r\n> "   
056F   C9                     RET      
0570                PRINTSTR:      
0570   E3                     EX   (SP),HL   
0571   18 04                  JR   printStr2   
0573                PRINTSTR1:      
0573   CD 85 00               CALL   putchar   
0576   23                     INC   HL   
0577                PRINTSTR2:      
0577   7E                     LD   A,(HL)   
0578   B7                     OR   A   
0579   20 F8                  JR   NZ,printStr1   
057B   23                     INC   HL   
057C   E3                     EX   (SP),HL   
057D   C9                     RET      
057E                RPUSH:       ; 11
057E   DD 2B                  DEC   IX   
0580   DD 74 00               LD   (IX+0),H   
0583   DD 2B                  DEC   IX   
0585   DD 75 00               LD   (IX+0),L   
0588   C9                     RET      
0589                RPOP:        ; 11
0589   DD 6E 00               LD   L,(IX+0)   
058C   DD 23                  INC   IX   
058E   DD 66 00               LD   H,(IX+0)   
0591   DD 23                  INC   IX   
0593   C9                     RET      
0594                ENTER:       ; 9
0594   60 69                  LD   HL,BC   
0596   CD 7E 05               CALL   rpush   ; save Instruction Pointer
0599   C1                     POP   BC   
059A   0B                     DEC   BC   
059B   FD E9                  JP   (IY)   ; Execute code from User def
0800                          .ORG   RAMSTART   
0800                          DS   DSIZE   
0880                STACK:       
0880                DSTACK:      
0880                          DS   RSIZE   
0900                RSTACK:      
0900                TIB:      DS   TIBSIZE   
0A00                          ALIGN   $100   
0A00                MINTVARS:      
0A00                SYSVARS:      
0A00                VS0:      DS   2   ; a
0A02                VBASE16:   DS   2   ; b
0A04                VTIBPTR:   DS   2   ; c
0A06                VDEFS:    DS   2   ; d
0A08                VEDITED:   DS   2   ; e
0A0A                          DS   2   ; f
0A0C                          DS   2   ; g
0A0E                VHEAPPTR:   DS   2   ; h
0A10                          DS   2   ; i
0A12                          DS   2   ; j
0A14                          DS   2   ; k
0A16                          DS   2   ; l
0A18                          DS   2   ; m
0A1A                          DS   2   ; n
0A1C                          DS   2   ; o
0A1E                          DS   2   ; p
0A20                          DS   2   ; q
0A22                          DS   2   ; r
0A24                          DS   2   ; s
0A26                          DS   2   ; t
0A28                          DS   2   ; u
0A2A                          DS   2   ; v
0A2C                          DS   2   ; w
0A2E                          DS   2   ; x
0A30                          DS   2   ; y
0A32                          DS   2   ; z
0A34                          DS   2   ; 
0A36                VBYTEMODE:   DS   2   ; 
0A38                          DS   $30   
0A68                TBPTR:    DS   2   ; reserved for tests
0A6A                RST08:    DS   2   
0A6C                RST10:    DS   2   
0A6E                RST18:    DS   2   
0A70                RST20:    DS   2   
0A72                RST28:    DS   2   
0A74                RST30:    DS   2   ; 
0A76                BAUD:     DS   2   ; 
0A78                INTVEC:   DS   2   ; 
0A7A                NMIVEC:   DS   2   ; 
0A7C                GETCVEC:   DS   2   ; 
0A7E                PUTCVEC:   DS   2   ; 
0A80                             ; ****************************************************************
0A80                             ; VARS Table - holds 26 16-bit user variables
0A80                             ; ****************************************************************
0A80                VARS:     DS   26 * 2   
0AB4                             ; ****************************************************************
0AB4                             ; DEFS Table - holds 26 addresses of user routines
0AB4                             ; ****************************************************************
0AB4                          ALIGN   $40   
0AB4                          .ORG   $-12   
0AB4                          DS   12   ; vars for group 0
0AC0                DEFS:     DS   GRPSIZE * NUMGRPS   
0C00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 26 IN MINT.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 111 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 126 IN MINT.asm
                    > USED AT LINE 764 IN MINT.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 13 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 14 IN MINT.asm
                    > USED AT LINE 7 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 15 IN MINT.asm
                    > USED AT LINE 10 IN ram.asm
TRUE:               0001 DEFINED AT LINE 16 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 17 IN MINT.asm
                    > USED AT LINE 41 IN MINT.asm
NUMGRPS:            0005 DEFINED AT LINE 19 IN MINT.asm
                    > USED AT LINE 58 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
GRPSIZE:            0040 DEFINED AT LINE 20 IN MINT.asm
                    > USED AT LINE 58 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
START:              0180 DEFINED AT LINE 28 IN MINT.asm
                    > USED AT LINE 6
ISYSVARS:           0198 DEFINED AT LINE 39 IN MINT.asm
                    > USED AT LINE 52 IN MINT.asm
INITIALIZE:         01A8 DEFINED AT LINE 49 IN MINT.asm
                    > USED AT LINE 30 IN MINT.asm
INIT1:              01C0 DEFINED AT LINE 59 IN MINT.asm
                    > USED AT LINE 64 IN MINT.asm
MACRO:              01C9 DEFINED AT LINE 67 IN MINT.asm
                    > USED AT LINE 119 IN MINT.asm
INTERPRET:          01E2 DEFINED AT LINE 80 IN MINT.asm
                    > USED AT LINE 33 IN MINT.asm
                    > USED AT LINE 535 IN MINT.asm
INTERPRET2:         01EC DEFINED AT LINE 85 IN MINT.asm
                    > USED AT LINE 78 IN MINT.asm
INTERPRET3:         01F4 DEFINED AT LINE 92 IN MINT.asm
                    > USED AT LINE 101 IN MINT.asm
INTERPRET4:         01FA DEFINED AT LINE 98 IN MINT.asm
                    > USED AT LINE 90 IN MINT.asm
WAITCHAR:           01FF DEFINED AT LINE 110 IN MINT.asm
                    > USED AT LINE 128 IN MINT.asm
                    > USED AT LINE 142 IN MINT.asm
WAITCHAR1:          0212 DEFINED AT LINE 121 IN MINT.asm
                    > USED AT LINE 113 IN MINT.asm
WAITCHAR3:          0220 DEFINED AT LINE 130 IN MINT.asm
                    > USED AT LINE 117 IN MINT.asm
WAITCHAR4:          0236 DEFINED AT LINE 146 IN MINT.asm
                    > USED AT LINE 115 IN MINT.asm
NEXT:               023F DEFINED AT LINE 174 IN MINT.asm
                    > USED AT LINE 51 IN MINT.asm
                    > USED AT LINE 554 IN MINT.asm
MACROS:             024A DEFINED AT LINE 189 IN MINT.asm
EMPTY_:             024A DEFINED AT LINE 1 IN MINT.asm
BACKSP_:            024B DEFINED AT LINE 4 IN MINT.asm
EDIT_:              024C DEFINED AT LINE 7 IN MINT.asm
REEDIT_:            024D DEFINED AT LINE 10 IN MINT.asm
LIST_:              024E DEFINED AT LINE 13 IN MINT.asm
PRINTSTACK_:        024F DEFINED AT LINE 16 IN MINT.asm
TOGGLEBASE_:        0250 DEFINED AT LINE 19 IN MINT.asm
OPCODES:            0300 DEFINED AT LINE 198 IN MINT.asm
CTRLCODES:          0380 DEFINED AT LINE 335 IN MINT.asm
                    > USED AT LINE 69 IN MINT.asm
ALTCODES:           0380 DEFINED AT LINE 336 IN MINT.asm
                    > USED AT LINE 479 IN MINT.asm
PAGE4:              0400 DEFINED AT LINE 471 IN MINT.asm
ALT_:               0400 DEFINED AT LINE 473 IN MINT.asm
ALT:                0400 DEFINED AT LINE 474 IN MINT.asm
AND_:               040D DEFINED AT LINE 486 IN MINT.asm
OR_:                040F DEFINED AT LINE 489 IN MINT.asm
XOR_:               0411 DEFINED AT LINE 492 IN MINT.asm
INV_:               0413 DEFINED AT LINE 495 IN MINT.asm
ADD_:               0415 DEFINED AT LINE 498 IN MINT.asm
ARRDEF_:            0417 DEFINED AT LINE 501 IN MINT.asm
ARREND_:            0419 DEFINED AT LINE 504 IN MINT.asm
BEGIN_:             041B DEFINED AT LINE 507 IN MINT.asm
CALL_:              041D DEFINED AT LINE 510 IN MINT.asm
DEF_:               041F DEFINED AT LINE 513 IN MINT.asm
HDOT_:              0421 DEFINED AT LINE 516 IN MINT.asm
DOT_:               0423 DEFINED AT LINE 519 IN MINT.asm
DROP_:              0425 DEFINED AT LINE 522 IN MINT.asm
DUP_:               0427 DEFINED AT LINE 525 IN MINT.asm
ETX_:               0429 DEFINED AT LINE 528 IN MINT.asm
ETX:                0429 DEFINED AT LINE 529 IN MINT.asm
ETX1:               0433 DEFINED AT LINE 534 IN MINT.asm
                    > USED AT LINE 532 IN MINT.asm
EXIT_:              0436 DEFINED AT LINE 537 IN MINT.asm
FETCH_:             0442 DEFINED AT LINE 547 IN MINT.asm
HEX_:               0444 DEFINED AT LINE 550 IN MINT.asm
NOP_:               0446 DEFINED AT LINE 553 IN MINT.asm
NUM_:               0449 DEFINED AT LINE 556 IN MINT.asm
OVER_:              044B DEFINED AT LINE 559 IN MINT.asm
RET_:               044D DEFINED AT LINE 562 IN MINT.asm
STORE_:             0456 DEFINED AT LINE 569 IN MINT.asm
SWAP_:              0458 DEFINED AT LINE 572 IN MINT.asm
SHL_:               045A DEFINED AT LINE 575 IN MINT.asm
SHR_:               045C DEFINED AT LINE 578 IN MINT.asm
NEG_:               045E DEFINED AT LINE 581 IN MINT.asm
SUB_:               0460 DEFINED AT LINE 584 IN MINT.asm
EQ_:                0462 DEFINED AT LINE 587 IN MINT.asm
GETREF_:            0464 DEFINED AT LINE 590 IN MINT.asm
GT_:                0466 DEFINED AT LINE 593 IN MINT.asm
LT_:                0468 DEFINED AT LINE 596 IN MINT.asm
VAR_:               046A DEFINED AT LINE 599 IN MINT.asm
DIV_:               046C DEFINED AT LINE 602 IN MINT.asm
MUL_:               046E DEFINED AT LINE 605 IN MINT.asm
AGAIN_:             0470 DEFINED AT LINE 608 IN MINT.asm
STR_:               0472 DEFINED AT LINE 611 IN MINT.asm
PAGE6:              0500 DEFINED AT LINE 623 IN MINT.asm
CARRDEF_:           0500 DEFINED AT LINE 625 IN MINT.asm
CFETCH_:            0502 DEFINED AT LINE 628 IN MINT.asm
ANOP_:              0504 DEFINED AT LINE 630 IN MINT.asm
CHARCODE_:          0506 DEFINED AT LINE 633 IN MINT.asm
COMMENT_:           0508 DEFINED AT LINE 636 IN MINT.asm
CSTORE_:            050A DEFINED AT LINE 639 IN MINT.asm
DEPTH_:             050C DEFINED AT LINE 642 IN MINT.asm
EMIT_:              050E DEFINED AT LINE 645 IN MINT.asm
IFTE_:              0510 DEFINED AT LINE 648 IN MINT.asm
EXEC_:              0512 DEFINED AT LINE 651 IN MINT.asm
GO_:                0514 DEFINED AT LINE 654 IN MINT.asm
ENDGROUP_:          0516 DEFINED AT LINE 657 IN MINT.asm
GROUP_:             0518 DEFINED AT LINE 660 IN MINT.asm
SYSVAR_:            051A DEFINED AT LINE 663 IN MINT.asm
I_:                 051C DEFINED AT LINE 666 IN MINT.asm
INCR_:              051E DEFINED AT LINE 669 IN MINT.asm
INPORT_:            0520 DEFINED AT LINE 672 IN MINT.asm
J_:                 0522 DEFINED AT LINE 675 IN MINT.asm
KEY_:               0524 DEFINED AT LINE 678 IN MINT.asm
NEWLN_:             0526 DEFINED AT LINE 681 IN MINT.asm
OUTPORT_:           0528 DEFINED AT LINE 684 IN MINT.asm
ROT_:               052A DEFINED AT LINE 687 IN MINT.asm
SIGN_:              052C DEFINED AT LINE 690 IN MINT.asm
BREAK_:             052E DEFINED AT LINE 693 IN MINT.asm
PRINTSTK_:          0530 DEFINED AT LINE 696 IN MINT.asm
EDITDEF_:           0532 DEFINED AT LINE 699 IN MINT.asm
NESTING:            0534 DEFINED AT LINE 716 IN MINT.asm
                    > USED AT LINE 96 IN MINT.asm
                    > USED AT LINE 127 IN MINT.asm
NESTING1A:          053F DEFINED AT LINE 723 IN MINT.asm
                    > USED AT LINE 720 IN MINT.asm
NESTING1:           0542 DEFINED AT LINE 726 IN MINT.asm
                    > USED AT LINE 718 IN MINT.asm
NESTING2:           0551 DEFINED AT LINE 735 IN MINT.asm
                    > USED AT LINE 730 IN MINT.asm
                    > USED AT LINE 732 IN MINT.asm
NESTING3:           0553 DEFINED AT LINE 738 IN MINT.asm
                    > USED AT LINE 734 IN MINT.asm
NESTING4:           055E DEFINED AT LINE 745 IN MINT.asm
                    > USED AT LINE 740 IN MINT.asm
                    > USED AT LINE 742 IN MINT.asm
CRLF:               0560 DEFINED AT LINE 749 IN MINT.asm
                    > USED AT LINE 139 IN MINT.asm
PROMPT:             0567 DEFINED AT LINE 754 IN MINT.asm
                    > USED AT LINE 81 IN MINT.asm
PRINTSTR:           0570 DEFINED AT LINE 759 IN MINT.asm
                    > USED AT LINE 31 IN MINT.asm
                    > USED AT LINE 750 IN MINT.asm
                    > USED AT LINE 755 IN MINT.asm
PRINTSTR1:          0573 DEFINED AT LINE 763 IN MINT.asm
                    > USED AT LINE 770 IN MINT.asm
PRINTSTR2:          0577 DEFINED AT LINE 767 IN MINT.asm
                    > USED AT LINE 761 IN MINT.asm
RPUSH:              057E DEFINED AT LINE 775 IN MINT.asm
                    > USED AT LINE 791 IN MINT.asm
RPOP:               0589 DEFINED AT LINE 782 IN MINT.asm
                    > USED AT LINE 541 IN MINT.asm
                    > USED AT LINE 564 IN MINT.asm
ENTER:              0594 DEFINED AT LINE 789 IN MINT.asm
                    > USED AT LINE 75 IN MINT.asm
STACK:              0880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
DSTACK:             0880 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 29 IN MINT.asm
                    > USED AT LINE 40 IN MINT.asm
                    > USED AT LINE 530 IN MINT.asm
                    > USED AT LINE 533 IN MINT.asm
RSTACK:             0900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 50 IN MINT.asm
TIB:                0900 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 89 IN MINT.asm
                    > USED AT LINE 122 IN MINT.asm
                    > USED AT LINE 131 IN MINT.asm
                    > USED AT LINE 148 IN MINT.asm
MINTVARS:           0A00 DEFINED AT LINE 13 IN ram.asm
SYSVARS:            0A00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 53 IN MINT.asm
VS0:                0A00 DEFINED AT LINE 16 IN ram.asm
VBASE16:            0A02 DEFINED AT LINE 17 IN ram.asm
VTIBPTR:            0A04 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 68 IN MINT.asm
                    > USED AT LINE 77 IN MINT.asm
                    > USED AT LINE 83 IN MINT.asm
                    > USED AT LINE 147 IN MINT.asm
VDEFS:              0A06 DEFINED AT LINE 19 IN ram.asm
VEDITED:            0A08 DEFINED AT LINE 20 IN ram.asm
VHEAPPTR:           0A0E DEFINED AT LINE 23 IN ram.asm
VBYTEMODE:          0A36 DEFINED AT LINE 44 IN ram.asm
TBPTR:              0A68 DEFINED AT LINE 46 IN ram.asm
RST08:              0A6A DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0A6C DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0A6E DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0A70 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0A72 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0A74 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0A76 DEFINED AT LINE 54 IN ram.asm
INTVEC:             0A78 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0A7A DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0A7C DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0A7E DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
VARS:               0A80 DEFINED AT LINE 62 IN ram.asm
DEFS:               0AC0 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 43 IN MINT.asm
                    > USED AT LINE 57 IN MINT.asm
HEAP:               0C00 DEFINED AT LINE 72 IN ram.asm
                    > USED AT LINE 47 IN MINT.asm
