0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 6A 0A               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 6C 0A               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 6E 0A               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 70 0A               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 72 0A               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 74 0A               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 78 0A               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 7A 0A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 7C 0A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 7E 0A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 08               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 6A 0A               LD   (RST08),HL   
0094   22 6C 0A               LD   (RST10),HL   
0097   22 6E 0A               LD   (RST18),HL   
009A   22 70 0A               LD   (RST20),HL   
009D   22 72 0A               LD   (RST28),HL   
00A0   22 74 0A               LD   (RST30),HL   
00A3   22 78 0A               LD   (INTVEC),HL   
00A6   22 7A 0A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 7C 0A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 7E 0A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 80 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MINT Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                DSIZE:    EQU   $80   
00C6                RSIZE:    EQU   $80   
00C6                TIBSIZE:   EQU   $100   
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                NUMGRPS:   EQU   5   
00C6                GRPSIZE:   EQU   $40   
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   
0180                START:       
0180   31 80 08               LD   SP,DSTACK   
0183   CD A8 01               CALL   initialize   
0186   CD 5B 05               CALL   printStr   
0189   4D 49 4E 54 20 56 31 2E 30 0D 0A 00 .CSTR   "MINT V1.0\r\n"   
0195   C3 E3 01               JP   interpret   
0198                             ; ***********************************************************************
0198                             ; Initial values for user mintVars		
0198                             ; ***********************************************************************		
0198                ISYSVARS:      
0198   80 08                  DW   dStack   ; a vS0
019A   00 00                  DW   FALSE   ; b vBase16
019C   00 00                  DW   0   ; c vTIBPtr
019E   C0 0A                  DW   DEFS   ; d vDEFS
01A0   00 00                  DW   0   ; e vEdited the last command to be edited
01A2   00 00                  DW   0   ; f
01A4   00 00                  DW   0   ; g
01A6   00 0C                  DW   HEAP   ; h vHeapPtr
01A8                INITIALIZE:      
01A8   21 98 01               LD   HL,iSysVars   
01AB   11 00 0A               LD   DE,sysVars   
01AE   01 10 00               LD   BC,8 * 2   
01B1   ED B0                  LDIR      
01B3   21 C0 0A               LD   HL,DEFS   
01B6   06 A0                  LD   B,GRPSIZE/2 * NUMGRPS   
01B8                INIT1:       
01B8   36 4C                  LD   (HL),lsb(empty_)   
01BA   23                     INC   HL   
01BB   36 02                  LD   (HL),msb(empty_)   
01BD   23                     INC   HL   
01BE   10 F8                  DJNZ   init1   
01C0   D9                     EXX      
01C1   11 00 09               LD   DE,RSTACK   
01C4   D9                     EXX      
01C5   FD 21 41 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
01C9   C9                     RET      
01CA                MACRO:       ; 25
01CA   ED 43 04 0A            LD   (vTIBPtr),BC   
01CE   21 80 03               LD   HL,ctrlCodes   
01D1   85                     ADD   A,L   
01D2   6F                     LD   L,A   
01D3   5E                     LD   E,(HL)   
01D4   16 02                  LD   D,msb(macros)   
01D6   D5                     PUSH   DE   
01D7   CD 77 05               CALL   ENTER   
01DA   5C 47 00               .CSTR   "\\G"   
01DD   ED 4B 04 0A            LD   BC,(vTIBPtr)   
01E1   18 0A                  JR   interpret2   
01E3                INTERPRET:      
01E3   CD 52 05               CALL   prompt   
01E6   01 00 00               LD   BC,0   ; load BC with offset into TIB
01E9   ED 43 04 0A            LD   (vTIBPtr),BC   
01ED                INTERPRET2:      ; calc nesting (a macro might have changed it)
01ED   1E 00                  LD   E,0   ; initilize nesting value
01EF   C5                     PUSH   BC   ; save offset into TIB,
01F0                             ; BC is also the count of chars in TIB
01F0   21 00 09               LD   HL,TIB   ; HL is start of TIB
01F3   18 06                  JR   interpret4   
01F5                INTERPRET3:      
01F5   7E                     LD   A,(HL)   ; A = char in TIB
01F6   23                     INC   HL   ; inc pointer into TIB
01F7   0B                     DEC   BC   ; dec count of chars in TIB
01F8   CD AE 05               CALL   nesting   ; update nesting value
01FB                INTERPRET4:      
01FB   79                     LD   A,C   ; is count zero?
01FC   B0                     OR   B   
01FD   20 F6                  JR   NZ,interpret3   ; if not loop
01FF   C1                     POP   BC   ; restore offset into TIB
0200                             ; *******************************************************************
0200                             ; Wait for a character from the serial input (keyboard)
0200                             ; and store it in the text buffer. Keep accepting characters,
0200                             ; increasing the instruction pointer BC - until a newline received.
0200                             ; *******************************************************************
0200                WAITCHAR:      
0200   CD 81 00               CALL   getchar   ; loop around waiting for character
0203   FE 20                  CP   $20   
0205   30 0C                  JR   NC,waitchar1   
0207   FE 00                  CP   $0   ; is it end of string?
0209   28 2C                  JR   Z,waitchar4   
020B   FE 0D                  CP   "\r"   ; carriage return?
020D   28 12                  JR   Z,waitchar3   
020F   16 00                  LD   D,0   
0211   18 B7                  JR   macro   
0213                WAITCHAR1:      
0213   21 00 09               LD   HL,TIB   
0216   09                     ADD   HL,BC   
0217   77                     LD   (HL),A   ; store the character in textbuf
0218   03                     INC   BC   
0219   CD 85 00               CALL   putchar   ; echo character to screen
021C   CD AE 05               CALL   nesting   
021F   18 DF                  JR   waitchar   ; wait for next character
0221                WAITCHAR3:      
0221   21 00 09               LD   HL,TIB   
0224   09                     ADD   HL,BC   
0225   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
0227   23                     INC   HL   
0228   36 0A                  LD   (HL),"\n"   
022A   23                     INC   HL   
022B   03                     INC   BC   
022C   03                     INC   BC   
022D   CD 4B 05               CALL   crlf   ; echo character to screen
0230   7B                     LD   A,E   ; if zero nesting append and ETX after \r
0231   B7                     OR   A   
0232   20 CC                  JR   NZ,waitchar   
0234   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
0236   03                     INC   BC   
0237                WAITCHAR4:      
0237   ED 43 04 0A            LD   (vTIBPtr),BC   
023B   D9                     EXX      
023C   01 00 09               LD   BC,TIB   ; Instructions stored on heap at address HERE
023F   0B                     DEC   BC   
0240   D9                     EXX      
0241                             ; Drop into the NEXT and dispatch routines
0241                             ; ********************************************************************************
0241                             ; 
0241                             ; Dispatch Routine.
0241                             ; 
0241                             ; Get the next character and form a 1 byte jump address
0241                             ; 
0241                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
0241                             ; jump to the selected function.
0241                             ; 
0241                             ; Individual handler routines will deal with each category:
0241                             ; 
0241                             ; 1. Detect characters A-Z and jump to the User Command handler routine
0241                             ; 
0241                             ; 2. Detect characters a-z and jump to the variable handler routine
0241                             ; 
0241                             ; 3. All other characters are punctuation and cause a jump to the associated
0241                             ; primitive code.
0241                             ; 
0241                             ; Instruction Pointer IP BC is incremented
0241                             ; 
0241                             ; *********************************************************************************
0241                NEXT:        ; 9
0241   D9                     EXX      
0242   03                     INC   BC   ; 6t    Increment the IP
0243   0A                     LD   A,(BC)   ; 7t    Get the next character and dispatch
0244   D9                     EXX      
0245   6F                     LD   L,A   ; 4t    Index into table
0246   26 03                  LD   H,msb(opcodes)   ; 7t    Start address of jump table
0248   6E                     LD   L,(HL)   ; 7t    get low jump address
0249   26 04                  LD   H,msb(page4)   ; 7t    Load H with the 1st page address
024B   E9                     JP   (HL)   ; 4t    Jump to routine
024C                             ; **************************************************************************
024C                             ; Macros must be written in Mint and end with ;
024C                             ; this code must not span pages
024C                             ; **************************************************************************
024C                MACROS:      
024C                EMPTY_:      
024C   3B                     DB   ";"   
024D                BACKSP_:      
024D   3B                     DB   ";"   
024E                EDIT_:       
024E   3B                     DB   ";"   
024F                REEDIT_:      
024F   3B                     DB   ";"   
0250                LIST_:       
0250   3B                     DB   ";"   
0251                PRINTSTACK_:      
0251   3B                     DB   ";"   
0252                TOGGLEBASE_:      
0252   3B                     DB   ";"   
0253                             ; **************************************************************************
0253                             ; Page 2  Jump Tables
0253                             ; **************************************************************************
0253                          ALIGN   $100   
0300                OPCODES:      
0300                             ; ***********************************************************************
0300                             ; Initial values for user mintVars		
0300                             ; ***********************************************************************		
0300   36                     DB   lsb(exit_)   ;   NUL
0301   4B                     DB   lsb(nop_)   ;   SOH
0302   4B                     DB   lsb(nop_)   ;   STX
0303   29                     DB   lsb(etx_)   ;   ETX
0304   4B                     DB   lsb(nop_)   ;   EOT
0305   4B                     DB   lsb(nop_)   ;   ENQ
0306   4B                     DB   lsb(nop_)   ;   ACK
0307   4B                     DB   lsb(nop_)   ;   BEL
0308   4B                     DB   lsb(nop_)   ;   BS
0309   4B                     DB   lsb(nop_)   ;   TAB
030A   4B                     DB   lsb(nop_)   ;   LF
030B   4B                     DB   lsb(nop_)   ;   VT
030C   4B                     DB   lsb(nop_)   ;   FF
030D   4B                     DB   lsb(nop_)   ;   CR
030E   4B                     DB   lsb(nop_)   ;   SO
030F   4B                     DB   lsb(nop_)   ;   SI
0310   4B                     DB   lsb(nop_)   ;   DLE
0311   4B                     DB   lsb(nop_)   ;   DC1
0312   4B                     DB   lsb(nop_)   ;   DC2
0313   4B                     DB   lsb(nop_)   ;   DC3
0314   4B                     DB   lsb(nop_)   ;   DC4
0315   4B                     DB   lsb(nop_)   ;   NAK
0316   4B                     DB   lsb(nop_)   ;   SYN
0317   4B                     DB   lsb(nop_)   ;   ETB
0318   4B                     DB   lsb(nop_)   ;   CAN
0319   4B                     DB   lsb(nop_)   ;   EM
031A   4B                     DB   lsb(nop_)   ;   SUB
031B   4B                     DB   lsb(nop_)   ;   ESC
031C   4B                     DB   lsb(nop_)   ;   FS
031D   4B                     DB   lsb(nop_)   ;   GS
031E   4B                     DB   lsb(nop_)   ;   RS
031F   4B                     DB   lsb(nop_)   ;   US
0320   4B                     DB   lsb(nop_)   ;   SP
0321   5C                     DB   lsb(store_)   ;   !
0322   27                     DB   lsb(dup_)   ;   "
0323   49                     DB   lsb(hex_)   ;    #
0324   64                     DB   lsb(swap_)   ;    $
0325   51                     DB   lsb(over_)   ;    %
0326   0D                     DB   lsb(and_)   ;    &
0327   25                     DB   lsb(drop_)   ;    '
0328   1B                     DB   lsb(begin_)   ;    (
0329   82                     DB   lsb(again_)   ;    )
032A   80                     DB   lsb(mul_)   ;    *
032B   15                     DB   lsb(add_)   ;    +
032C   21                     DB   lsb(hdot_)   ;    ,
032D   6C                     DB   lsb(sub_)   ;    -
032E   23                     DB   lsb(dot_)   ;    .
032F   7E                     DB   lsb(div_)   ;    /
0330   4E                     DB   lsb(num_)   ;    0
0331   4E                     DB   lsb(num_)   ;    1
0332   4E                     DB   lsb(num_)   ;    2
0333   4E                     DB   lsb(num_)   ;    3
0334   4E                     DB   lsb(num_)   ;    4
0335   4E                     DB   lsb(num_)   ;    5
0336   4E                     DB   lsb(num_)   ;    6
0337   4E                     DB   lsb(num_)   ;    7
0338   4E                     DB   lsb(num_)   ;    8
0339   4E                     DB   lsb(num_)   ;    9
033A   1F                     DB   lsb(def_)   ;    :
033B   53                     DB   lsb(ret_)   ;    ;
033C   74                     DB   lsb(lt_)   ;    <
033D   6E                     DB   lsb(eq_)   ;    =
033E   72                     DB   lsb(gt_)   ;    >
033F   70                     DB   lsb(getRef_)   ;    ?
0340   43                     DB   lsb(fetch_)   ;    @
0341   1D                     DB   lsb(call_)   ;    A
0342   1D                     DB   lsb(call_)   ;    B
0343   1D                     DB   lsb(call_)   ;    C
0344   1D                     DB   lsb(call_)   ;    D
0345   1D                     DB   lsb(call_)   ;    E
0346   1D                     DB   lsb(call_)   ;    F
0347   1D                     DB   lsb(call_)   ;    G
0348   1D                     DB   lsb(call_)   ;    H
0349   1D                     DB   lsb(call_)   ;    I
034A   1D                     DB   lsb(call_)   ;    J
034B   1D                     DB   lsb(call_)   ;    K
034C   1D                     DB   lsb(call_)   ;    L
034D   1D                     DB   lsb(call_)   ;    M
034E   1D                     DB   lsb(call_)   ;    N
034F   1D                     DB   lsb(call_)   ;    O
0350   1D                     DB   lsb(call_)   ;    P
0351   1D                     DB   lsb(call_)   ;    Q
0352   1D                     DB   lsb(call_)   ;    R
0353   1D                     DB   lsb(call_)   ;    S
0354   1D                     DB   lsb(call_)   ;    T
0355   1D                     DB   lsb(call_)   ;    U
0356   1D                     DB   lsb(call_)   ;    V
0357   1D                     DB   lsb(call_)   ;    W
0358   1D                     DB   lsb(call_)   ;    X
0359   1D                     DB   lsb(call_)   ;    Y
035A   1D                     DB   lsb(call_)   ;    Z
035B   17                     DB   lsb(arrDef_)   ;    [
035C   00                     DB   lsb(alt_)   ;    \
035D   19                     DB   lsb(arrEnd_)   ;    ]
035E   11                     DB   lsb(xor_)   ;    ^
035F   6A                     DB   lsb(neg_)   ;    _
0360   84                     DB   lsb(str_)   ;    `
0361   76                     DB   lsb(var_)   ;    a
0362   76                     DB   lsb(var_)   ;    b
0363   76                     DB   lsb(var_)   ;    c
0364   76                     DB   lsb(var_)   ;    d
0365   76                     DB   lsb(var_)   ;    e
0366   76                     DB   lsb(var_)   ;    f
0367   76                     DB   lsb(var_)   ;    g
0368   76                     DB   lsb(var_)   ;    h
0369   76                     DB   lsb(var_)   ;    i
036A   76                     DB   lsb(var_)   ;    j
036B   76                     DB   lsb(var_)   ;    k
036C   76                     DB   lsb(var_)   ;    l
036D   76                     DB   lsb(var_)   ;    m
036E   76                     DB   lsb(var_)   ;    n
036F   76                     DB   lsb(var_)   ;    o
0370   76                     DB   lsb(var_)   ;    p
0371   76                     DB   lsb(var_)   ;    q
0372   76                     DB   lsb(var_)   ;    r
0373   76                     DB   lsb(var_)   ;    s
0374   76                     DB   lsb(var_)   ;    t
0375   76                     DB   lsb(var_)   ;    u
0376   76                     DB   lsb(var_)   ;    v
0377   76                     DB   lsb(var_)   ;    w
0378   76                     DB   lsb(var_)   ;    x
0379   76                     DB   lsb(var_)   ;    y
037A   76                     DB   lsb(var_)   ;    z
037B   66                     DB   lsb(shl_)   ;    {
037C   0F                     DB   lsb(or_)   ;    |
037D   68                     DB   lsb(shr_)   ;    }
037E   13                     DB   lsb(inv_)   ;    ~
037F   4B                     DB   lsb(nop_)   ;    backspace
0380                             ; ***********************************************************************
0380                             ; Alternate function codes		
0380                             ; ***********************************************************************		
0380                CTRLCODES:      
0380                ALTCODES:      
0380   4C                     DB   lsb(empty_)   ; NUL ^@
0381   4C                     DB   lsb(empty_)   ; SOH ^A
0382   52                     DB   lsb(toggleBase_)   ; STX ^B
0383   4C                     DB   lsb(empty_)   ; ETX ^C
0384   4C                     DB   lsb(empty_)   ; EOT ^D
0385   4E                     DB   lsb(edit_)   ; ENQ ^E
0386   4C                     DB   lsb(empty_)   ; ACK ^F
0387   4C                     DB   lsb(empty_)   ; BEL ^G
0388   4D                     DB   lsb(backsp_)   ; BS  ^H
0389   4C                     DB   lsb(empty_)   ; TAB ^I
038A   4F                     DB   lsb(reedit_)   ; LF  ^J
038B   4C                     DB   lsb(empty_)   ; VT  ^K
038C   50                     DB   lsb(list_)   ; FF  ^L
038D   4C                     DB   lsb(empty_)   ; CR  ^M
038E   4C                     DB   lsb(empty_)   ; SO  ^N
038F   4C                     DB   lsb(empty_)   ; SI  ^O
0390   51                     DB   lsb(printStack_)   ; DLE ^P
0391   4C                     DB   lsb(empty_)   ; DC1 ^Q
0392   4C                     DB   lsb(empty_)   ; DC2 ^R
0393   4C                     DB   lsb(empty_)   ; DC3 ^S
0394   4C                     DB   lsb(empty_)   ; DC4 ^T
0395   4C                     DB   lsb(empty_)   ; NAK ^U
0396   4C                     DB   lsb(empty_)   ; SYN ^V
0397   4C                     DB   lsb(empty_)   ; ETB ^W
0398   4C                     DB   lsb(empty_)   ; CAN ^X
0399   4C                     DB   lsb(empty_)   ; EM  ^Y
039A   4C                     DB   lsb(empty_)   ; SUB ^Z
039B   4C                     DB   lsb(empty_)   ; ESC ^[
039C   4C                     DB   lsb(empty_)   ; FS  ^\
039D   4C                     DB   lsb(empty_)   ; GS  ^]
039E   4C                     DB   lsb(empty_)   ; RS  ^^
039F   4C                     DB   lsb(empty_)   ; US  ^_)
03A0   04                     DB   lsb(aNop_)   ; SP  ^`
03A1   0A                     DB   lsb(cStore_)   ;    !
03A2   04                     DB   lsb(aNop_)   ;    "
03A3   04                     DB   lsb(aNop_)   ;    #
03A4   04                     DB   lsb(aNop_)   ;    $  ( -- adr ) text input ptr
03A5   04                     DB   lsb(aNop_)   ;    %
03A6   04                     DB   lsb(aNop_)   ;    &
03A7   04                     DB   lsb(aNop_)   ;    '
03A8   10                     DB   lsb(ifte_)   ;    (  ( b -- )
03A9   04                     DB   lsb(aNop_)   ;    )
03AA   04                     DB   lsb(aNop_)   ;    *
03AB   35                     DB   lsb(incr_)   ;    +  ( adr -- ) decrements variable at address
03AC   04                     DB   lsb(aNop_)   ;    ,
03AD   04                     DB   lsb(aNop_)   ;    -
03AE   04                     DB   lsb(aNop_)   ;    .
03AF   04                     DB   lsb(aNop_)   ;    /
03B0   04                     DB   lsb(aNop_)   ;    0
03B1   04                     DB   lsb(aNop_)   ;    1
03B2   04                     DB   lsb(aNop_)   ;    2
03B3   04                     DB   lsb(aNop_)   ;    3
03B4   04                     DB   lsb(aNop_)   ;    4
03B5   04                     DB   lsb(aNop_)   ;    5
03B6   04                     DB   lsb(aNop_)   ;    6
03B7   04                     DB   lsb(aNop_)   ;    7
03B8   04                     DB   lsb(aNop_)   ;    8
03B9   04                     DB   lsb(aNop_)   ;    9
03BA   04                     DB   lsb(aNop_)   ;    :  start defining a macro
03BB   04                     DB   lsb(aNop_)   ;    ;
03BC   04                     DB   lsb(aNop_)   ;    <
03BD   04                     DB   lsb(aNop_)   ;    =
03BE   04                     DB   lsb(aNop_)   ;    >
03BF   04                     DB   lsb(aNop_)   ;    ?
03C0   02                     DB   lsb(cFetch_)   ;    @
03C1   04                     DB   lsb(aNop_)   ;    A
03C2   45                     DB   lsb(break_)   ;    B
03C3   4B                     DB   lsb(nop_)   ;    C
03C4   0C                     DB   lsb(depth_)   ;    D  ( -- val ) depth of data stack
03C5   0E                     DB   lsb(emit_)   ;    E   ( val -- ) emits a char to output
03C6   04                     DB   lsb(aNop_)   ;    F
03C7   1B                     DB   lsb(go_)   ;    G   ( -- ? ) execute mint definition
03C8   04                     DB   lsb(aNop_)   ;    H
03C9   37                     DB   lsb(inPort_)   ;    I  ( port -- val )
03CA   04                     DB   lsb(aNop_)   ;    J
03CB   3B                     DB   lsb(key_)   ;    K  ( -- val )  read a char from input
03CC   04                     DB   lsb(aNop_)   ;    L
03CD   04                     DB   lsb(aNop_)   ;    M
03CE   3D                     DB   lsb(newln_)   ;    N   ; prints a newline to output
03CF   3F                     DB   lsb(outPort_)   ;    O  ( val port -- )
03D0   47                     DB   lsb(printStk_)   ;    P  ( -- ) non-destructively prints stack
03D1   04                     DB   lsb(aNop_)   ;    Q  quits from Mint REPL
03D2   41                     DB   lsb(rot_)   ;    R  ( a b c -- b c a )
03D3   04                     DB   lsb(aNop_)   ;    S
03D4   04                     DB   lsb(aNop_)   ;    T
03D5   04                     DB   lsb(aNop_)   ;    U
03D6   04                     DB   lsb(aNop_)   ;    V
03D7   04                     DB   lsb(aNop_)   ;    W   ; ( b -- ) if false, skip to end of loop
03D8   12                     DB   lsb(exec_)   ;    X
03D9   04                     DB   lsb(aNop_)   ;    Y
03DA   49                     DB   lsb(editDef_)   ;    Z
03DB   00                     DB   lsb(cArrDef_)   ;    [
03DC   08                     DB   lsb(comment_)   ;    \  comment text, skips reading until end of line
03DD   04                     DB   lsb(aNop_)   ;    ]
03DE   06                     DB   lsb(charCode_)   ;    ^
03DF   43                     DB   lsb(sign_)   ;    _)  ( n -- b ) returns true if -ve
03E0   04                     DB   lsb(aNop_)   ;    `
03E1   2B                     DB   lsb(sysVar_)   ;    a  ; start of data stack variable
03E2   2B                     DB   lsb(sysVar_)   ;    b  ; base16 variable
03E3   2B                     DB   lsb(sysVar_)   ;    c  ; TIBPtr variable
03E4   2B                     DB   lsb(sysVar_)   ;    d
03E5   2B                     DB   lsb(sysVar_)   ;    e
03E6   2B                     DB   lsb(sysVar_)   ;    f
03E7   2B                     DB   lsb(sysVar_)   ;    g
03E8   2B                     DB   lsb(sysVar_)   ;    h  ; heap ptr variable
03E9   33                     DB   lsb(i_)   ;    i  ; returns index variable of current loop
03EA   39                     DB   lsb(j_)   ;    j  ; returns index variable of outer loop
03EB   2B                     DB   lsb(sysVar_)   ;    k
03EC   2B                     DB   lsb(sysVar_)   ;    l
03ED   2B                     DB   lsb(sysVar_)   ;    m  ( a b -- c ) return the minimum value
03EE   2B                     DB   lsb(sysVar_)   ;    n
03EF   2B                     DB   lsb(sysVar_)   ;    o
03F0   2B                     DB   lsb(sysVar_)   ;    p
03F1   2B                     DB   lsb(sysVar_)   ;    q
03F2   2B                     DB   lsb(sysVar_)   ;    r
03F3   2B                     DB   lsb(sysVar_)   ;    s
03F4   2B                     DB   lsb(sysVar_)   ;    t
03F5   2B                     DB   lsb(sysVar_)   ;    u
03F6   2B                     DB   lsb(sysVar_)   ;    v
03F7   2B                     DB   lsb(sysVar_)   ;    w
03F8   2B                     DB   lsb(sysVar_)   ;    x
03F9   2B                     DB   lsb(sysVar_)   ;    y
03FA   2B                     DB   lsb(sysVar_)   ;    z
03FB   29                     DB   lsb(group_)   ;    {
03FC   04                     DB   lsb(aNop_)   ;    |
03FD   27                     DB   lsb(endGroup_)   ;    }
03FE   04                     DB   lsb(aNop_)   ;    ~
03FF   04                     DB   lsb(aNop_)   ;    BS		
0400                             ; **********************************************************************			
0400                             ; Page 4 primitive routines
0400                             ; **********************************************************************
0400                          ALIGN   $100   
0400                PAGE4:       
0400                ALT_:        
0400                ALT:         ;= 11
0400   D9                     EXX      
0401   03                     INC   BC   
0402   0A                     LD   A,(BC)   
0403   D9                     EXX      
0404   21 80 03               LD   HL,altCodes   
0407   85                     ADD   A,L   
0408   6F                     LD   L,A   
0409   6E                     LD   L,(HL)   ; 7t    get low jump address
040A   26 05                  LD   H,msb(page6)   ; Load H with the 5th page address
040C   E9                     JP   (HL)   ; 4t    Jump to routine
040D                AND_:        
040D   FD E9                  JP   (IY)   
040F                             ; 63t
040F                OR_:         
040F   FD E9                  JP   (IY)   
0411                XOR_:        
0411   FD E9                  JP   (IY)   
0413                INV_:        
0413   FD E9                  JP   (IY)   
0415                ADD_:        ; Add the top 2 members of the stack
0415   FD E9                  JP   (IY)   
0417                ARRDEF_:      
0417   FD E9                  JP   (IY)   
0419                ARREND_:      
0419   FD E9                  JP   (IY)   
041B                BEGIN_:      
041B   FD E9                  JP   (IY)   
041D                CALL_:       
041D   FD E9                  JP   (IY)   
041F                DEF_:        
041F   FD E9                  JP   (IY)   
0421                HDOT_:       ; print hexadecimal
0421   FD E9                  JP   (IY)   
0423                DOT_:        
0423   FD E9                  JP   (IY)   
0425                DROP_:       ; Discard the top member of the stack
0425   FD E9                  JP   (IY)   
0427                DUP_:        
0427   FD E9                  JP   (IY)   
0429                ETX_:        
0429                ETX:         
0429   21 80 F7               LD   HL,-DSTACK   
042C   39                     ADD   HL,SP   
042D   D2 33 04               JP   NC,etx1   
0430   31 80 08               LD   SP,DSTACK   
0433                ETX1:        
0433   C3 E3 01               JP   interpret   
0436                EXIT_:       
0436   D9                     EXX      
0437   03                     INC   BC   
0438   50 59                  LD   DE,BC   
043A   CD 70 05               CALL   rpop   
043D   44 4D                  LD   BC,HL   
043F   EB                     EX   DE,HL   
0440   E5                     PUSH   HL   
0441   D9                     EXX      
0442   C9                     RET      
0443                FETCH_:      
0443   EB                     EX   DE,HL   
0444   5E                     LD   E,(HL)   
0445   23                     INC   HL   
0446   56                     LD   D,(HL)   
0447   FD E9                  JP   (IY)   
0449                HEX_:        
0449   FD E9                  JP   (IY)   
044B                NOP_:        
044B   C3 41 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
044E                NUM_:        
044E   C3 8D 05               JP   num   
0451                OVER_:       
0451   FD E9                  JP   (IY)   
0453                RET_:        
0453   D9                     EXX      
0454   CD 70 05               CALL   rpop   ; Restore Instruction pointer
0457   44 4D                  LD   BC,HL   
0459   D9                     EXX      
045A   FD E9                  JP   (IY)   
045C                STORE_:      
045C   EB                     EX   DE,HL   ; HL = TOS
045D   D1                     POP   DE   ; DE = NOS
045E   73                     LD   (HL),E   
045F   23                     INC   HL   
0460   72                     LD   (HL),D   
0461   D1                     POP   DE   ; DE = TOS
0462   FD E9                  JP   (IY)   
0464                SWAP_:       
0464   FD E9                  JP   (IY)   
0466                SHL_:        
0466   FD E9                  JP   (IY)   
0468                SHR_:        
0468   FD E9                  JP   (IY)   
046A                NEG_:        
046A   FD E9                  JP   (IY)   
046C                SUB_:        ; Subtract the value 2nd on stack from top of stack
046C   FD E9                  JP   (IY)   
046E                             ; 58t
046E                EQ_:         
046E   FD E9                  JP   (IY)   
0470                GETREF_:      
0470   FD E9                  JP   (IY)   
0472                GT_:         
0472   FD E9                  JP   (IY)   
0474                LT_:         
0474   FD E9                  JP   (IY)   
0476                VAR_:        
0476                          LD   A,((VARS - mintVars)/2) - "a"   
0479   CD 82 05               CALL   lookupVar   
047C   FD E9                  JP   (IY)   
047E                DIV_:        
047E   FD E9                  JP   (IY)   
0480                MUL_:        
0480   FD E9                  JP   (IY)   
0482                AGAIN_:      
0482   FD E9                  JP   (IY)   
0484                STR_:        
0484   FD E9                  JP   (IY)   
0486                             ;*******************************************************************
0486                             ; Page 5 primitive routines
0486                             ;*******************************************************************
0486                             ;falls through
0486                             ; **************************************************************************
0486                             ; Page 6 Alt primitives
0486                             ; **************************************************************************
0486                          ALIGN   $100   
0500                PAGE6:       
0500                CARRDEF_:      ; define a byte array
0500   FD E9                  JP   (IY)   
0502                CFETCH_:      
0502   FD E9                  JP   (IY)   
0504                ANOP_:       
0504   FD E9                  JP   (IY)   ; 8t
0506                             ; 49t
0506                CHARCODE_:      
0506   FD E9                  JP   (IY)   
0508                COMMENT_:      
0508   FD E9                  JP   (IY)   
050A                CSTORE_:      
050A   FD E9                  JP   (IY)   
050C                             ; 48t
050C                DEPTH_:      
050C   FD E9                  JP   (IY)   
050E                EMIT_:       
050E   FD E9                  JP   (IY)   
0510                IFTE_:       
0510   FD E9                  JP   (IY)   
0512                EXEC_:       
0512   CD 17 05               CALL   exec1   
0515   FD E9                  JP   (IY)   
0517                EXEC1:       
0517   E1                     POP   HL   ; HL = RET address
0518   E3                     EX   (SP),HL   ; HL = NOS, (SP) = RET
0519   EB                     EX   DE,HL   ; HL = TOS, DE = NOS
051A   E9                     JP   (HL)   ; JP to machine code, RET will return to exec_
051B                GO_:         
051B   D5                     PUSH   DE   ; push TOS
051C   D9                     EXX      
051D   60 69                  LD   HL,BC   
051F   CD 69 05               CALL   rpush   ; save Instruction Pointer
0522   C1                     POP   BC   ; pop TOS
0523   0B                     DEC   BC   ; decrement to just before
0524   D9                     EXX      
0525   FD E9                  JP   (IY)   ; Execute code from User def
0527                ENDGROUP_:      
0527   FD E9                  JP   (IY)   
0529                GROUP_:      
0529   FD E9                  JP   (IY)   
052B                SYSVAR_:      
052B                          LD   A,((sysVars - mintVars)/2) - "a"   
052E   CD 82 05               CALL   lookupVar   
0531   FD E9                  JP   (IY)   
0533                I_:          
0533   FD E9                  JP   (IY)   
0535                INCR_:       
0535   FD E9                  JP   (IY)   
0537                INPORT_:      
0537   FD E9                  JP   (IY)   
0539                J_:          
0539   FD E9                  JP   (IY)   
053B                KEY_:        
053B   FD E9                  JP   (IY)   
053D                NEWLN_:      
053D   FD E9                  JP   (IY)   
053F                OUTPORT_:      
053F   FD E9                  JP   (IY)   
0541                ROT_:        
0541   FD E9                  JP   (IY)   
0543                SIGN_:       
0543   FD E9                  JP   (IY)   
0545                BREAK_:      
0545   FD E9                  JP   (IY)   
0547                PRINTSTK_:      
0547   FD E9                  JP   (IY)   
0549                EDITDEF_:      
0549   FD E9                  JP   (IY)   
054B                             ;*******************************************************************
054B                             ; Page 5 primitive routines continued
054B                             ;*******************************************************************
054B                CRLF:        ; 18
054B   CD 5B 05               CALL   printStr   
054E   0D 0A 00               .CSTR   "\r\n"   
0551   C9                     RET      
0552                PROMPT:      
0552   CD 5B 05               CALL   printStr   
0555   0D 0A 3E 20 00         .CSTR   "\r\n> "   
055A   C9                     RET      
055B                PRINTSTR:      
055B   E3                     EX   (SP),HL   
055C   18 04                  JR   printStr2   
055E                PRINTSTR1:      
055E   CD 85 00               CALL   putchar   
0561   23                     INC   HL   
0562                PRINTSTR2:      
0562   7E                     LD   A,(HL)   
0563   B7                     OR   A   
0564   20 F8                  JR   NZ,printStr1   
0566   23                     INC   HL   
0567   E3                     EX   (SP),HL   
0568   C9                     RET      
0569                RPUSH:       ; 11
0569   EB                     EX   DE,HL   
056A   2B                     DEC   HL   
056B   72                     LD   (HL),D   
056C   2B                     DEC   HL   
056D   73                     LD   (HL),E   
056E   EB                     EX   DE,HL   
056F   C9                     RET      
0570                RPOP:        ; 11
0570   EB                     EX   DE,HL   
0571   5E                     LD   E,(HL)   
0572   23                     INC   HL   
0573   56                     LD   D,(HL)   
0574   23                     INC   HL   
0575   EB                     EX   DE,HL   
0576   C9                     RET      
0577                ENTER:       ;= 9
0577   D9                     EXX      
0578   60 69                  LD   HL,BC   
057A   CD 69 05               CALL   rpush   ; save Instruction Pointer
057D   C1                     POP   BC   
057E   0B                     DEC   BC   
057F   D9                     EXX      
0580   FD E9                  JP   (IY)   ; Execute code from User def
0582                             ;= 11?
0582                LOOKUPVAR:      ; offset in A e.g. ((VARS - mintVars)/2) - "a"
0582   D9                     EXX      
0583   60                     LD   H,B   
0584   69                     LD   L,C   
0585   96                     SUB   (HL)   
0586   87                     ADD   A,A   
0587   D9                     EXX      
0588   D5                     PUSH   DE   ; push TOS
0589   5F                     LD   E,A   ; TOS = ptr to var
058A   16 0A                  LD   D,msb(mintVars)   
058C   C9                     RET      
058D                             ; ********************************************************************************
058D                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
058D                             ; Read the first character.
058D                             ;			
058D                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
058D                             ; and then added into the L register. (HL forms a 16-bit accumulator)
058D                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
058D                             ; and then add in the next digit. Repeat this until a non-number character is
058D                             ; detected. Add in the final digit so that HL contains the converted number.
058D                             ; Push HL onto the stack and proceed to the dispatch routine.
058D                             ; ********************************************************************************
058D                NUM:         ;= 23
058D   21 00 00               LD   HL,0   ; Clear HL to accept the number
0590   0A                     LD   A,(BC)   ; Get the character which is a numeral
0591                NUM1:        ; corrected KB 24/11/21
0591   D6 30                  SUB   $30   ; Form decimal digit
0593   85                     ADD   A,L   ; Add into bottom of HL
0594   6F                     LD   L,A   ; 
0595   AF                     XOR   A   ; Clear A
0596   8C                     ADC   A,H   ; Add with carry H-reg
0597   67                     LD   H,A   ; Put result in H-reg
0598   03                     INC   BC   ; Increment IP
0599   0A                     LD   A,(BC)   ; and get the next character
059A   FE 30                  CP   $30   ; Less than $30
059C   38 0C                  JR   C,num2   ; Not a number / end of number
059E   FE 3A                  CP   $3A   ; Greater or equal to $3A
05A0   30 08                  JR   NC,num2   ; Not a number / end of number
05A2                             ; Multiply digit(s) in HL by 10
05A2   29                     ADD   HL,HL   ; 2X
05A3   5D                     LD   E,L   ; LD DE,HL
05A4   54                     LD   D,H   ; 
05A5   29                     ADD   HL,HL   ; 4X
05A6   29                     ADD   HL,HL   ; 8X
05A7   19                     ADD   HL,DE   ; 2X  + 8X  = 10X
05A8   18 E7                  JR   num1   
05AA                NUM2:        
05AA   0B                     DEC   BC   
05AB   E5                     PUSH   HL   ; Put the number on the stack
05AC   FD E9                  JP   (IY)   ; and process the next character
05AE                             ; **************************************************************************
05AE                             ; calculate nesting value
05AE                             ; A is char to be tested,
05AE                             ; E is the nesting value (initially 0)
05AE                             ; E is increased by ( and [
05AE                             ; E is decreased by ) and ]
05AE                             ; E has its bit 7 toggled by `
05AE                             ; limited to 127 levels
05AE                             ; **************************************************************************
05AE                NESTING:      ;= 44
05AE   FE 60                  CP   "`"   
05B0   20 0A                  JR   NZ,nesting1   
05B2   CB 7B                  BIT   7,E   
05B4   28 03                  JR   Z,nesting1a   
05B6   CB BB                  RES   7,E   
05B8   C9                     RET      
05B9                NESTING1A:      
05B9   CB FB                  SET   7,E   
05BB   C9                     RET      
05BC                NESTING1:      
05BC   CB 7B                  BIT   7,E   
05BE   C0                     RET   NZ   
05BF   FE 3A                  CP   ":"   
05C1   28 08                  JR   Z,nesting2   
05C3   FE 5B                  CP   "["   
05C5   28 04                  JR   Z,nesting2   
05C7   FE 28                  CP   "("   
05C9   20 02                  JR   NZ,nesting3   
05CB                NESTING2:      
05CB   1C                     INC   E   
05CC   C9                     RET      
05CD                NESTING3:      
05CD   FE 3B                  CP   ";"   
05CF   28 07                  JR   Z,nesting4   
05D1   FE 5D                  CP   "]"   
05D3   28 03                  JR   Z,nesting4   
05D5   FE 29                  CP   ")"   
05D7   C0                     RET   NZ   
05D8                NESTING4:      
05D8   1D                     DEC   E   
05D9   C9                     RET      
0800                          .ORG   RAMSTART   
0800                          DS   DSIZE   
0880                STACK:       
0880                DSTACK:      
0880                          DS   RSIZE   
0900                RSTACK:      
0900                TIB:      DS   TIBSIZE   
0A00                          ALIGN   $100   
0A00                MINTVARS:      
0A00                SYSVARS:      
0A00                VS0:      DS   2   ; a
0A02                VBASE16:   DS   2   ; b
0A04                VTIBPTR:   DS   2   ; c
0A06                VDEFS:    DS   2   ; d
0A08                VEDITED:   DS   2   ; e
0A0A                          DS   2   ; f
0A0C                          DS   2   ; g
0A0E                VHEAPPTR:   DS   2   ; h
0A10                          DS   2   ; i
0A12                          DS   2   ; j
0A14                          DS   2   ; k
0A16                          DS   2   ; l
0A18                          DS   2   ; m
0A1A                          DS   2   ; n
0A1C                          DS   2   ; o
0A1E                          DS   2   ; p
0A20                          DS   2   ; q
0A22                          DS   2   ; r
0A24                          DS   2   ; s
0A26                          DS   2   ; t
0A28                          DS   2   ; u
0A2A                          DS   2   ; v
0A2C                          DS   2   ; w
0A2E                          DS   2   ; x
0A30                          DS   2   ; y
0A32                          DS   2   ; z
0A34                          DS   2   ; 
0A36                VBYTEMODE:   DS   2   ; 
0A38                          DS   $30   
0A68                TBPTR:    DS   2   ; reserved for tests
0A6A                RST08:    DS   2   
0A6C                RST10:    DS   2   
0A6E                RST18:    DS   2   
0A70                RST20:    DS   2   
0A72                RST28:    DS   2   
0A74                RST30:    DS   2   ; 
0A76                BAUD:     DS   2   ; 
0A78                INTVEC:   DS   2   ; 
0A7A                NMIVEC:   DS   2   ; 
0A7C                GETCVEC:   DS   2   ; 
0A7E                PUTCVEC:   DS   2   ; 
0A80                             ; ****************************************************************
0A80                             ; VARS Table - holds 26 16-bit user variables
0A80                             ; ****************************************************************
0A80                VARS:     DS   26 * 2   
0AB4                             ; ****************************************************************
0AB4                             ; DEFS Table - holds 26 addresses of user routines
0AB4                             ; ****************************************************************
0AB4                          ALIGN   $40   
0AB4                          .ORG   $-12   
0AB4                          DS   12   ; vars for group 0
0AC0                DEFS:     DS   GRPSIZE * NUMGRPS   
0C00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 26 IN MINT.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 113 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 128 IN MINT.asm
                    > USED AT LINE 753 IN MINT.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 13 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 14 IN MINT.asm
                    > USED AT LINE 7 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 15 IN MINT.asm
                    > USED AT LINE 10 IN ram.asm
TRUE:               0001 DEFINED AT LINE 16 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 17 IN MINT.asm
                    > USED AT LINE 41 IN MINT.asm
NUMGRPS:            0005 DEFINED AT LINE 19 IN MINT.asm
                    > USED AT LINE 56 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
GRPSIZE:            0040 DEFINED AT LINE 20 IN MINT.asm
                    > USED AT LINE 56 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
START:              0180 DEFINED AT LINE 28 IN MINT.asm
                    > USED AT LINE 6
ISYSVARS:           0198 DEFINED AT LINE 39 IN MINT.asm
                    > USED AT LINE 50 IN MINT.asm
INITIALIZE:         01A8 DEFINED AT LINE 49 IN MINT.asm
                    > USED AT LINE 30 IN MINT.asm
INIT1:              01B8 DEFINED AT LINE 57 IN MINT.asm
                    > USED AT LINE 62 IN MINT.asm
MACRO:              01CA DEFINED AT LINE 69 IN MINT.asm
                    > USED AT LINE 121 IN MINT.asm
INTERPRET:          01E3 DEFINED AT LINE 82 IN MINT.asm
                    > USED AT LINE 33 IN MINT.asm
                    > USED AT LINE 538 IN MINT.asm
INTERPRET2:         01ED DEFINED AT LINE 87 IN MINT.asm
                    > USED AT LINE 80 IN MINT.asm
INTERPRET3:         01F5 DEFINED AT LINE 94 IN MINT.asm
                    > USED AT LINE 103 IN MINT.asm
INTERPRET4:         01FB DEFINED AT LINE 100 IN MINT.asm
                    > USED AT LINE 92 IN MINT.asm
WAITCHAR:           0200 DEFINED AT LINE 112 IN MINT.asm
                    > USED AT LINE 130 IN MINT.asm
                    > USED AT LINE 144 IN MINT.asm
WAITCHAR1:          0213 DEFINED AT LINE 123 IN MINT.asm
                    > USED AT LINE 115 IN MINT.asm
WAITCHAR3:          0221 DEFINED AT LINE 132 IN MINT.asm
                    > USED AT LINE 119 IN MINT.asm
WAITCHAR4:          0237 DEFINED AT LINE 148 IN MINT.asm
                    > USED AT LINE 117 IN MINT.asm
NEXT:               0241 DEFINED AT LINE 177 IN MINT.asm
                    > USED AT LINE 66 IN MINT.asm
                    > USED AT LINE 562 IN MINT.asm
MACROS:             024C DEFINED AT LINE 192 IN MINT.asm
EMPTY_:             024C DEFINED AT LINE 1 IN MINT.asm
BACKSP_:            024D DEFINED AT LINE 4 IN MINT.asm
EDIT_:              024E DEFINED AT LINE 7 IN MINT.asm
REEDIT_:            024F DEFINED AT LINE 10 IN MINT.asm
LIST_:              0250 DEFINED AT LINE 13 IN MINT.asm
PRINTSTACK_:        0251 DEFINED AT LINE 16 IN MINT.asm
TOGGLEBASE_:        0252 DEFINED AT LINE 19 IN MINT.asm
OPCODES:            0300 DEFINED AT LINE 201 IN MINT.asm
CTRLCODES:          0380 DEFINED AT LINE 338 IN MINT.asm
                    > USED AT LINE 71 IN MINT.asm
ALTCODES:           0380 DEFINED AT LINE 339 IN MINT.asm
                    > USED AT LINE 482 IN MINT.asm
PAGE4:              0400 DEFINED AT LINE 474 IN MINT.asm
ALT_:               0400 DEFINED AT LINE 476 IN MINT.asm
ALT:                0400 DEFINED AT LINE 477 IN MINT.asm
AND_:               040D DEFINED AT LINE 489 IN MINT.asm
OR_:                040F DEFINED AT LINE 492 IN MINT.asm
XOR_:               0411 DEFINED AT LINE 495 IN MINT.asm
INV_:               0413 DEFINED AT LINE 498 IN MINT.asm
ADD_:               0415 DEFINED AT LINE 501 IN MINT.asm
ARRDEF_:            0417 DEFINED AT LINE 504 IN MINT.asm
ARREND_:            0419 DEFINED AT LINE 507 IN MINT.asm
BEGIN_:             041B DEFINED AT LINE 510 IN MINT.asm
CALL_:              041D DEFINED AT LINE 513 IN MINT.asm
DEF_:               041F DEFINED AT LINE 516 IN MINT.asm
HDOT_:              0421 DEFINED AT LINE 519 IN MINT.asm
DOT_:               0423 DEFINED AT LINE 522 IN MINT.asm
DROP_:              0425 DEFINED AT LINE 525 IN MINT.asm
DUP_:               0427 DEFINED AT LINE 528 IN MINT.asm
ETX_:               0429 DEFINED AT LINE 531 IN MINT.asm
ETX:                0429 DEFINED AT LINE 532 IN MINT.asm
ETX1:               0433 DEFINED AT LINE 537 IN MINT.asm
                    > USED AT LINE 535 IN MINT.asm
EXIT_:              0436 DEFINED AT LINE 540 IN MINT.asm
FETCH_:             0443 DEFINED AT LINE 551 IN MINT.asm
HEX_:               0449 DEFINED AT LINE 558 IN MINT.asm
NOP_:               044B DEFINED AT LINE 561 IN MINT.asm
NUM_:               044E DEFINED AT LINE 564 IN MINT.asm
OVER_:              0451 DEFINED AT LINE 567 IN MINT.asm
RET_:               0453 DEFINED AT LINE 570 IN MINT.asm
STORE_:             045C DEFINED AT LINE 577 IN MINT.asm
SWAP_:              0464 DEFINED AT LINE 586 IN MINT.asm
SHL_:               0466 DEFINED AT LINE 589 IN MINT.asm
SHR_:               0468 DEFINED AT LINE 592 IN MINT.asm
NEG_:               046A DEFINED AT LINE 595 IN MINT.asm
SUB_:               046C DEFINED AT LINE 598 IN MINT.asm
EQ_:                046E DEFINED AT LINE 601 IN MINT.asm
GETREF_:            0470 DEFINED AT LINE 604 IN MINT.asm
GT_:                0472 DEFINED AT LINE 607 IN MINT.asm
LT_:                0474 DEFINED AT LINE 610 IN MINT.asm
VAR_:               0476 DEFINED AT LINE 613 IN MINT.asm
DIV_:               047E DEFINED AT LINE 618 IN MINT.asm
MUL_:               0480 DEFINED AT LINE 621 IN MINT.asm
AGAIN_:             0482 DEFINED AT LINE 624 IN MINT.asm
STR_:               0484 DEFINED AT LINE 627 IN MINT.asm
PAGE6:              0500 DEFINED AT LINE 639 IN MINT.asm
CARRDEF_:           0500 DEFINED AT LINE 641 IN MINT.asm
CFETCH_:            0502 DEFINED AT LINE 644 IN MINT.asm
ANOP_:              0504 DEFINED AT LINE 646 IN MINT.asm
CHARCODE_:          0506 DEFINED AT LINE 649 IN MINT.asm
COMMENT_:           0508 DEFINED AT LINE 652 IN MINT.asm
CSTORE_:            050A DEFINED AT LINE 655 IN MINT.asm
DEPTH_:             050C DEFINED AT LINE 658 IN MINT.asm
EMIT_:              050E DEFINED AT LINE 661 IN MINT.asm
IFTE_:              0510 DEFINED AT LINE 664 IN MINT.asm
EXEC_:              0512 DEFINED AT LINE 667 IN MINT.asm
EXEC1:              0517 DEFINED AT LINE 670 IN MINT.asm
                    > USED AT LINE 668 IN MINT.asm
GO_:                051B DEFINED AT LINE 676 IN MINT.asm
ENDGROUP_:          0527 DEFINED AT LINE 686 IN MINT.asm
GROUP_:             0529 DEFINED AT LINE 689 IN MINT.asm
SYSVAR_:            052B DEFINED AT LINE 692 IN MINT.asm
I_:                 0533 DEFINED AT LINE 697 IN MINT.asm
INCR_:              0535 DEFINED AT LINE 700 IN MINT.asm
INPORT_:            0537 DEFINED AT LINE 703 IN MINT.asm
J_:                 0539 DEFINED AT LINE 706 IN MINT.asm
KEY_:               053B DEFINED AT LINE 709 IN MINT.asm
NEWLN_:             053D DEFINED AT LINE 712 IN MINT.asm
OUTPORT_:           053F DEFINED AT LINE 715 IN MINT.asm
ROT_:               0541 DEFINED AT LINE 718 IN MINT.asm
SIGN_:              0543 DEFINED AT LINE 721 IN MINT.asm
BREAK_:             0545 DEFINED AT LINE 724 IN MINT.asm
PRINTSTK_:          0547 DEFINED AT LINE 727 IN MINT.asm
EDITDEF_:           0549 DEFINED AT LINE 730 IN MINT.asm
CRLF:               054B DEFINED AT LINE 738 IN MINT.asm
                    > USED AT LINE 141 IN MINT.asm
PROMPT:             0552 DEFINED AT LINE 743 IN MINT.asm
                    > USED AT LINE 83 IN MINT.asm
PRINTSTR:           055B DEFINED AT LINE 748 IN MINT.asm
                    > USED AT LINE 31 IN MINT.asm
                    > USED AT LINE 739 IN MINT.asm
                    > USED AT LINE 744 IN MINT.asm
PRINTSTR1:          055E DEFINED AT LINE 752 IN MINT.asm
                    > USED AT LINE 759 IN MINT.asm
PRINTSTR2:          0562 DEFINED AT LINE 756 IN MINT.asm
                    > USED AT LINE 750 IN MINT.asm
RPUSH:              0569 DEFINED AT LINE 764 IN MINT.asm
                    > USED AT LINE 680 IN MINT.asm
                    > USED AT LINE 785 IN MINT.asm
RPOP:               0570 DEFINED AT LINE 773 IN MINT.asm
                    > USED AT LINE 544 IN MINT.asm
                    > USED AT LINE 572 IN MINT.asm
ENTER:              0577 DEFINED AT LINE 782 IN MINT.asm
                    > USED AT LINE 77 IN MINT.asm
LOOKUPVAR:          0582 DEFINED AT LINE 792 IN MINT.asm
                    > USED AT LINE 615 IN MINT.asm
                    > USED AT LINE 694 IN MINT.asm
NUM:                058D DEFINED AT LINE 816 IN MINT.asm
                    > USED AT LINE 565 IN MINT.asm
NUM1:               0591 DEFINED AT LINE 820 IN MINT.asm
                    > USED AT LINE 842 IN MINT.asm
NUM2:               05AA DEFINED AT LINE 843 IN MINT.asm
                    > USED AT LINE 832 IN MINT.asm
                    > USED AT LINE 834 IN MINT.asm
NESTING:            05AE DEFINED AT LINE 858 IN MINT.asm
                    > USED AT LINE 98 IN MINT.asm
                    > USED AT LINE 129 IN MINT.asm
NESTING1A:          05B9 DEFINED AT LINE 865 IN MINT.asm
                    > USED AT LINE 862 IN MINT.asm
NESTING1:           05BC DEFINED AT LINE 868 IN MINT.asm
                    > USED AT LINE 860 IN MINT.asm
NESTING2:           05CB DEFINED AT LINE 877 IN MINT.asm
                    > USED AT LINE 872 IN MINT.asm
                    > USED AT LINE 874 IN MINT.asm
NESTING3:           05CD DEFINED AT LINE 880 IN MINT.asm
                    > USED AT LINE 876 IN MINT.asm
NESTING4:           05D8 DEFINED AT LINE 887 IN MINT.asm
                    > USED AT LINE 882 IN MINT.asm
                    > USED AT LINE 884 IN MINT.asm
STACK:              0880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
DSTACK:             0880 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 29 IN MINT.asm
                    > USED AT LINE 40 IN MINT.asm
                    > USED AT LINE 533 IN MINT.asm
                    > USED AT LINE 536 IN MINT.asm
RSTACK:             0900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 64 IN MINT.asm
TIB:                0900 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 91 IN MINT.asm
                    > USED AT LINE 124 IN MINT.asm
                    > USED AT LINE 133 IN MINT.asm
                    > USED AT LINE 151 IN MINT.asm
MINTVARS:           0A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 614 IN MINT.asm
                    > USED AT LINE 693 IN MINT.asm
SYSVARS:            0A00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 51 IN MINT.asm
                    > USED AT LINE 693 IN MINT.asm
VS0:                0A00 DEFINED AT LINE 16 IN ram.asm
VBASE16:            0A02 DEFINED AT LINE 17 IN ram.asm
VTIBPTR:            0A04 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 70 IN MINT.asm
                    > USED AT LINE 79 IN MINT.asm
                    > USED AT LINE 85 IN MINT.asm
                    > USED AT LINE 149 IN MINT.asm
VDEFS:              0A06 DEFINED AT LINE 19 IN ram.asm
VEDITED:            0A08 DEFINED AT LINE 20 IN ram.asm
VHEAPPTR:           0A0E DEFINED AT LINE 23 IN ram.asm
VBYTEMODE:          0A36 DEFINED AT LINE 44 IN ram.asm
TBPTR:              0A68 DEFINED AT LINE 46 IN ram.asm
RST08:              0A6A DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0A6C DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0A6E DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0A70 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0A72 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0A74 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0A76 DEFINED AT LINE 54 IN ram.asm
INTVEC:             0A78 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0A7A DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0A7C DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0A7E DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
VARS:               0A80 DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 614 IN MINT.asm
DEFS:               0AC0 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 43 IN MINT.asm
                    > USED AT LINE 55 IN MINT.asm
HEAP:               0C00 DEFINED AT LINE 72 IN ram.asm
                    > USED AT LINE 47 IN MINT.asm
